
ILI9341.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000948c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000183e8  0800965c  0800965c  0000a65c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021a44  08021a44  00035eec  2**0
                  CONTENTS
  4 .ARM          00000008  08021a44  08021a44  00022a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021a4c  08021a4c  00035eec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021a4c  08021a4c  00022a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08021a50  08021a50  00022a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00012eec  20000000  08021a54  00023000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001624  20012eec  08034940  00035eec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014510  08034940  00036510  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00035eec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc26  00000000  00000000  00035f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027a5  00000000  00000000  00045b42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  000482e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0000443e  00000000  00000000  00049070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000158b2  00000000  00000000  0004d4ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000ceba8  00000000  00000000  00062d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00131908  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000ab5  00000000  00000000  0013194b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c04  00000000  00000000  00132400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00136004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20012eec 	.word	0x20012eec
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009644 	.word	0x08009644

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20012ef0 	.word	0x20012ef0
 800020c:	08009644 	.word	0x08009644

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <LCD_Init>:
extern const uint16_t bigFont[1520];

//***************************************************************************************************************************************
// Función para inicializar LCD
//***************************************************************************************************************************************
void LCD_Init(void) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0

	//****************************************
	// Secuencia de Inicialización
	//****************************************
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 80005b4:	2201      	movs	r2, #1
 80005b6:	2101      	movs	r1, #1
 80005b8:	4878      	ldr	r0, [pc, #480]	@ (800079c <LCD_Init+0x1ec>)
 80005ba:	f005 ffa9 	bl	8006510 <HAL_GPIO_WritePin>
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin | LCD_WR_Pin | LCD_RS_Pin,
 80005be:	2201      	movs	r2, #1
 80005c0:	2113      	movs	r1, #19
 80005c2:	4877      	ldr	r0, [pc, #476]	@ (80007a0 <LCD_Init+0x1f0>)
 80005c4:	f005 ffa4 	bl	8006510 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 80005c8:	2201      	movs	r2, #1
 80005ca:	2102      	movs	r1, #2
 80005cc:	4875      	ldr	r0, [pc, #468]	@ (80007a4 <LCD_Init+0x1f4>)
 80005ce:	f005 ff9f 	bl	8006510 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80005d2:	2005      	movs	r0, #5
 80005d4:	f005 fc40 	bl	8005e58 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_RESET);
 80005d8:	2200      	movs	r2, #0
 80005da:	2102      	movs	r1, #2
 80005dc:	4871      	ldr	r0, [pc, #452]	@ (80007a4 <LCD_Init+0x1f4>)
 80005de:	f005 ff97 	bl	8006510 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80005e2:	2014      	movs	r0, #20
 80005e4:	f005 fc38 	bl	8005e58 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 80005e8:	2201      	movs	r2, #1
 80005ea:	2102      	movs	r1, #2
 80005ec:	486d      	ldr	r0, [pc, #436]	@ (80007a4 <LCD_Init+0x1f4>)
 80005ee:	f005 ff8f 	bl	8006510 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 80005f2:	2096      	movs	r0, #150	@ 0x96
 80005f4:	f005 fc30 	bl	8005e58 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_RESET);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2101      	movs	r1, #1
 80005fc:	4867      	ldr	r0, [pc, #412]	@ (800079c <LCD_Init+0x1ec>)
 80005fe:	f005 ff87 	bl	8006510 <HAL_GPIO_WritePin>

	//****************************************
	LCD_CMD(0xE9);  // SETPANELRELATED
 8000602:	20e9      	movs	r0, #233	@ 0xe9
 8000604:	f000 f8d0 	bl	80007a8 <LCD_CMD>
	LCD_DATA(0x20);
 8000608:	2020      	movs	r0, #32
 800060a:	f000 f973 	bl	80008f4 <LCD_DATA>
	//****************************************
	LCD_CMD(0x11); // Exit Sleep SLEEP OUT (SLPOUT)
 800060e:	2011      	movs	r0, #17
 8000610:	f000 f8ca 	bl	80007a8 <LCD_CMD>
	HAL_Delay(100);
 8000614:	2064      	movs	r0, #100	@ 0x64
 8000616:	f005 fc1f 	bl	8005e58 <HAL_Delay>
	//****************************************
	LCD_CMD(0xD1);    // (SETVCOM)
 800061a:	20d1      	movs	r0, #209	@ 0xd1
 800061c:	f000 f8c4 	bl	80007a8 <LCD_CMD>
	LCD_DATA(0x00);
 8000620:	2000      	movs	r0, #0
 8000622:	f000 f967 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x71);
 8000626:	2071      	movs	r0, #113	@ 0x71
 8000628:	f000 f964 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x19);
 800062c:	2019      	movs	r0, #25
 800062e:	f000 f961 	bl	80008f4 <LCD_DATA>
	//****************************************
	LCD_CMD(0xD0);   // (SETPOWER)
 8000632:	20d0      	movs	r0, #208	@ 0xd0
 8000634:	f000 f8b8 	bl	80007a8 <LCD_CMD>
	LCD_DATA(0x07);
 8000638:	2007      	movs	r0, #7
 800063a:	f000 f95b 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x01);
 800063e:	2001      	movs	r0, #1
 8000640:	f000 f958 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x08);
 8000644:	2008      	movs	r0, #8
 8000646:	f000 f955 	bl	80008f4 <LCD_DATA>
	//****************************************
	LCD_CMD(0x36);  // (MEMORYACCESS)
 800064a:	2036      	movs	r0, #54	@ 0x36
 800064c:	f000 f8ac 	bl	80007a8 <LCD_CMD>
	LCD_DATA(0x40 | 0x80 | 0x20 | 0x08); // LCD_DATA(0x19);
 8000650:	20e8      	movs	r0, #232	@ 0xe8
 8000652:	f000 f94f 	bl	80008f4 <LCD_DATA>
	//****************************************
	LCD_CMD(0x3A); // Set_pixel_format (PIXELFORMAT)
 8000656:	203a      	movs	r0, #58	@ 0x3a
 8000658:	f000 f8a6 	bl	80007a8 <LCD_CMD>
	LCD_DATA(0x05); // color setings, 05h - 16bit pixel, 11h - 3bit pixel
 800065c:	2005      	movs	r0, #5
 800065e:	f000 f949 	bl	80008f4 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC1);    // (POWERCONTROL2)
 8000662:	20c1      	movs	r0, #193	@ 0xc1
 8000664:	f000 f8a0 	bl	80007a8 <LCD_CMD>
	LCD_DATA(0x10);
 8000668:	2010      	movs	r0, #16
 800066a:	f000 f943 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x10);
 800066e:	2010      	movs	r0, #16
 8000670:	f000 f940 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x02);
 8000674:	2002      	movs	r0, #2
 8000676:	f000 f93d 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x02);
 800067a:	2002      	movs	r0, #2
 800067c:	f000 f93a 	bl	80008f4 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC0); // Set Default Gamma (POWERCONTROL1)
 8000680:	20c0      	movs	r0, #192	@ 0xc0
 8000682:	f000 f891 	bl	80007a8 <LCD_CMD>
	LCD_DATA(0x00);
 8000686:	2000      	movs	r0, #0
 8000688:	f000 f934 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x35);
 800068c:	2035      	movs	r0, #53	@ 0x35
 800068e:	f000 f931 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x00);
 8000692:	2000      	movs	r0, #0
 8000694:	f000 f92e 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x00);
 8000698:	2000      	movs	r0, #0
 800069a:	f000 f92b 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x01);
 800069e:	2001      	movs	r0, #1
 80006a0:	f000 f928 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x02);
 80006a4:	2002      	movs	r0, #2
 80006a6:	f000 f925 	bl	80008f4 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC5); // Set Frame Rate (VCOMCONTROL1)
 80006aa:	20c5      	movs	r0, #197	@ 0xc5
 80006ac:	f000 f87c 	bl	80007a8 <LCD_CMD>
	LCD_DATA(0x04); // 72Hz
 80006b0:	2004      	movs	r0, #4
 80006b2:	f000 f91f 	bl	80008f4 <LCD_DATA>
	//****************************************
	LCD_CMD(0xD2); // Power Settings  (SETPWRNORMAL)
 80006b6:	20d2      	movs	r0, #210	@ 0xd2
 80006b8:	f000 f876 	bl	80007a8 <LCD_CMD>
	LCD_DATA(0x01);
 80006bc:	2001      	movs	r0, #1
 80006be:	f000 f919 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x44);
 80006c2:	2044      	movs	r0, #68	@ 0x44
 80006c4:	f000 f916 	bl	80008f4 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC8); //Set Gamma  (GAMMASET)
 80006c8:	20c8      	movs	r0, #200	@ 0xc8
 80006ca:	f000 f86d 	bl	80007a8 <LCD_CMD>
	LCD_DATA(0x04);
 80006ce:	2004      	movs	r0, #4
 80006d0:	f000 f910 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x67);
 80006d4:	2067      	movs	r0, #103	@ 0x67
 80006d6:	f000 f90d 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x35);
 80006da:	2035      	movs	r0, #53	@ 0x35
 80006dc:	f000 f90a 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x04);
 80006e0:	2004      	movs	r0, #4
 80006e2:	f000 f907 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x08);
 80006e6:	2008      	movs	r0, #8
 80006e8:	f000 f904 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x06);
 80006ec:	2006      	movs	r0, #6
 80006ee:	f000 f901 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x24);
 80006f2:	2024      	movs	r0, #36	@ 0x24
 80006f4:	f000 f8fe 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x01);
 80006f8:	2001      	movs	r0, #1
 80006fa:	f000 f8fb 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x37);
 80006fe:	2037      	movs	r0, #55	@ 0x37
 8000700:	f000 f8f8 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x40);
 8000704:	2040      	movs	r0, #64	@ 0x40
 8000706:	f000 f8f5 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x03);
 800070a:	2003      	movs	r0, #3
 800070c:	f000 f8f2 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x10);
 8000710:	2010      	movs	r0, #16
 8000712:	f000 f8ef 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x08);
 8000716:	2008      	movs	r0, #8
 8000718:	f000 f8ec 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x80);
 800071c:	2080      	movs	r0, #128	@ 0x80
 800071e:	f000 f8e9 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x00);
 8000722:	2000      	movs	r0, #0
 8000724:	f000 f8e6 	bl	80008f4 <LCD_DATA>
	//****************************************
	LCD_CMD(0x2A); // Set_column_address 320px (CASET)
 8000728:	202a      	movs	r0, #42	@ 0x2a
 800072a:	f000 f83d 	bl	80007a8 <LCD_CMD>
	LCD_DATA(0x00);
 800072e:	2000      	movs	r0, #0
 8000730:	f000 f8e0 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x00);
 8000734:	2000      	movs	r0, #0
 8000736:	f000 f8dd 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x01);
 800073a:	2001      	movs	r0, #1
 800073c:	f000 f8da 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x3F);
 8000740:	203f      	movs	r0, #63	@ 0x3f
 8000742:	f000 f8d7 	bl	80008f4 <LCD_DATA>
	//****************************************
	LCD_CMD(0x2B); // Set_page_address 480px (PASET)
 8000746:	202b      	movs	r0, #43	@ 0x2b
 8000748:	f000 f82e 	bl	80007a8 <LCD_CMD>
	LCD_DATA(0x00);
 800074c:	2000      	movs	r0, #0
 800074e:	f000 f8d1 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x00);
 8000752:	2000      	movs	r0, #0
 8000754:	f000 f8ce 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x01);
 8000758:	2001      	movs	r0, #1
 800075a:	f000 f8cb 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0xE0);
 800075e:	20e0      	movs	r0, #224	@ 0xe0
 8000760:	f000 f8c8 	bl	80008f4 <LCD_DATA>
	//  LCD_DATA(0x8F);
	LCD_CMD(0x29); //display on
 8000764:	2029      	movs	r0, #41	@ 0x29
 8000766:	f000 f81f 	bl	80007a8 <LCD_CMD>
	LCD_CMD(0x2C); //display on
 800076a:	202c      	movs	r0, #44	@ 0x2c
 800076c:	f000 f81c 	bl	80007a8 <LCD_CMD>

	LCD_CMD(ILI9341_INVOFF); //Invert Off
 8000770:	2020      	movs	r0, #32
 8000772:	f000 f819 	bl	80007a8 <LCD_CMD>
	HAL_Delay(120);
 8000776:	2078      	movs	r0, #120	@ 0x78
 8000778:	f005 fb6e 	bl	8005e58 <HAL_Delay>
	LCD_CMD(ILI9341_SLPOUT);    //Exit Sleep
 800077c:	2011      	movs	r0, #17
 800077e:	f000 f813 	bl	80007a8 <LCD_CMD>
	HAL_Delay(120);
 8000782:	2078      	movs	r0, #120	@ 0x78
 8000784:	f005 fb68 	bl	8005e58 <HAL_Delay>
	LCD_CMD(ILI9341_DISPON);    //Display on
 8000788:	2029      	movs	r0, #41	@ 0x29
 800078a:	f000 f80d 	bl	80007a8 <LCD_CMD>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 800078e:	2201      	movs	r2, #1
 8000790:	2101      	movs	r1, #1
 8000792:	4802      	ldr	r0, [pc, #8]	@ (800079c <LCD_Init+0x1ec>)
 8000794:	f005 febc 	bl	8006510 <HAL_GPIO_WritePin>
}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40020400 	.word	0x40020400
 80007a0:	40020000 	.word	0x40020000
 80007a4:	40020800 	.word	0x40020800

080007a8 <LCD_CMD>:
//***************************************************************************************************************************************
// Función para enviar comandos a la LCD - parámetro (comando)
//***************************************************************************************************************************************
void LCD_CMD(uint8_t cmd) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2110      	movs	r1, #16
 80007b6:	484c      	ldr	r0, [pc, #304]	@ (80008e8 <LCD_CMD+0x140>)
 80007b8:	f005 feaa 	bl	8006510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	2102      	movs	r1, #2
 80007c0:	4849      	ldr	r0, [pc, #292]	@ (80008e8 <LCD_CMD+0x140>)
 80007c2:	f005 fea5 	bl	8006510 <HAL_GPIO_WritePin>

	if ((cmd & (1 << 0)) == 1) {
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	f003 0301 	and.w	r3, r3, #1
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d006      	beq.n	80007de <LCD_CMD+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 80007d0:	2201      	movs	r2, #1
 80007d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007d6:	4844      	ldr	r0, [pc, #272]	@ (80008e8 <LCD_CMD+0x140>)
 80007d8:	f005 fe9a 	bl	8006510 <HAL_GPIO_WritePin>
 80007dc:	e005      	b.n	80007ea <LCD_CMD+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007e4:	4840      	ldr	r0, [pc, #256]	@ (80008e8 <LCD_CMD+0x140>)
 80007e6:	f005 fe93 	bl	8006510 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 1)) == 0x02) {
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	f003 0302 	and.w	r3, r3, #2
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d005      	beq.n	8000800 <LCD_CMD+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 80007f4:	2201      	movs	r2, #1
 80007f6:	2180      	movs	r1, #128	@ 0x80
 80007f8:	483c      	ldr	r0, [pc, #240]	@ (80008ec <LCD_CMD+0x144>)
 80007fa:	f005 fe89 	bl	8006510 <HAL_GPIO_WritePin>
 80007fe:	e004      	b.n	800080a <LCD_CMD+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 8000800:	2200      	movs	r2, #0
 8000802:	2180      	movs	r1, #128	@ 0x80
 8000804:	4839      	ldr	r0, [pc, #228]	@ (80008ec <LCD_CMD+0x144>)
 8000806:	f005 fe83 	bl	8006510 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 2)) == 0x04) {
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	f003 0304 	and.w	r3, r3, #4
 8000810:	2b00      	cmp	r3, #0
 8000812:	d006      	beq.n	8000822 <LCD_CMD+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 8000814:	2201      	movs	r2, #1
 8000816:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800081a:	4833      	ldr	r0, [pc, #204]	@ (80008e8 <LCD_CMD+0x140>)
 800081c:	f005 fe78 	bl	8006510 <HAL_GPIO_WritePin>
 8000820:	e005      	b.n	800082e <LCD_CMD+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000828:	482f      	ldr	r0, [pc, #188]	@ (80008e8 <LCD_CMD+0x140>)
 800082a:	f005 fe71 	bl	8006510 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 3)) == 0x08) {
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	f003 0308 	and.w	r3, r3, #8
 8000834:	2b00      	cmp	r3, #0
 8000836:	d005      	beq.n	8000844 <LCD_CMD+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 8000838:	2201      	movs	r2, #1
 800083a:	2108      	movs	r1, #8
 800083c:	482c      	ldr	r0, [pc, #176]	@ (80008f0 <LCD_CMD+0x148>)
 800083e:	f005 fe67 	bl	8006510 <HAL_GPIO_WritePin>
 8000842:	e004      	b.n	800084e <LCD_CMD+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	2108      	movs	r1, #8
 8000848:	4829      	ldr	r0, [pc, #164]	@ (80008f0 <LCD_CMD+0x148>)
 800084a:	f005 fe61 	bl	8006510 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 4)) == 0x10) {
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	f003 0310 	and.w	r3, r3, #16
 8000854:	2b00      	cmp	r3, #0
 8000856:	d005      	beq.n	8000864 <LCD_CMD+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 8000858:	2201      	movs	r2, #1
 800085a:	2120      	movs	r1, #32
 800085c:	4824      	ldr	r0, [pc, #144]	@ (80008f0 <LCD_CMD+0x148>)
 800085e:	f005 fe57 	bl	8006510 <HAL_GPIO_WritePin>
 8000862:	e004      	b.n	800086e <LCD_CMD+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	2120      	movs	r1, #32
 8000868:	4821      	ldr	r0, [pc, #132]	@ (80008f0 <LCD_CMD+0x148>)
 800086a:	f005 fe51 	bl	8006510 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 5)) == 0x20) {
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	f003 0320 	and.w	r3, r3, #32
 8000874:	2b00      	cmp	r3, #0
 8000876:	d005      	beq.n	8000884 <LCD_CMD+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 8000878:	2201      	movs	r2, #1
 800087a:	2110      	movs	r1, #16
 800087c:	481c      	ldr	r0, [pc, #112]	@ (80008f0 <LCD_CMD+0x148>)
 800087e:	f005 fe47 	bl	8006510 <HAL_GPIO_WritePin>
 8000882:	e004      	b.n	800088e <LCD_CMD+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	2110      	movs	r1, #16
 8000888:	4819      	ldr	r0, [pc, #100]	@ (80008f0 <LCD_CMD+0x148>)
 800088a:	f005 fe41 	bl	8006510 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 6)) == 0x40) {
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000894:	2b00      	cmp	r3, #0
 8000896:	d006      	beq.n	80008a6 <LCD_CMD+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 8000898:	2201      	movs	r2, #1
 800089a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800089e:	4814      	ldr	r0, [pc, #80]	@ (80008f0 <LCD_CMD+0x148>)
 80008a0:	f005 fe36 	bl	8006510 <HAL_GPIO_WritePin>
 80008a4:	e005      	b.n	80008b2 <LCD_CMD+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008ac:	4810      	ldr	r0, [pc, #64]	@ (80008f0 <LCD_CMD+0x148>)
 80008ae:	f005 fe2f 	bl	8006510 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 7)) == 0x80) {
 80008b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	da06      	bge.n	80008c8 <LCD_CMD+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 80008ba:	2201      	movs	r2, #1
 80008bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008c0:	4809      	ldr	r0, [pc, #36]	@ (80008e8 <LCD_CMD+0x140>)
 80008c2:	f005 fe25 	bl	8006510 <HAL_GPIO_WritePin>
 80008c6:	e005      	b.n	80008d4 <LCD_CMD+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 80008c8:	2200      	movs	r2, #0
 80008ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008ce:	4806      	ldr	r0, [pc, #24]	@ (80008e8 <LCD_CMD+0x140>)
 80008d0:	f005 fe1e 	bl	8006510 <HAL_GPIO_WritePin>
	}
	//GPIO_PortB_DATA_R = cmd;
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 80008d4:	2201      	movs	r2, #1
 80008d6:	2102      	movs	r1, #2
 80008d8:	4803      	ldr	r0, [pc, #12]	@ (80008e8 <LCD_CMD+0x140>)
 80008da:	f005 fe19 	bl	8006510 <HAL_GPIO_WritePin>

}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40020000 	.word	0x40020000
 80008ec:	40020800 	.word	0x40020800
 80008f0:	40020400 	.word	0x40020400

080008f4 <LCD_DATA>:
//***************************************************************************************************************************************
// Función para enviar datos a la LCD - parámetro (dato)
//***************************************************************************************************************************************
void LCD_DATA(uint8_t data) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	71fb      	strb	r3, [r7, #7]
	//HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80008fe:	2201      	movs	r2, #1
 8000900:	2110      	movs	r1, #16
 8000902:	484c      	ldr	r0, [pc, #304]	@ (8000a34 <LCD_DATA+0x140>)
 8000904:	f005 fe04 	bl	8006510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8000908:	2200      	movs	r2, #0
 800090a:	2102      	movs	r1, #2
 800090c:	4849      	ldr	r0, [pc, #292]	@ (8000a34 <LCD_DATA+0x140>)
 800090e:	f005 fdff 	bl	8006510 <HAL_GPIO_WritePin>
	if ((data & (1 << 0)) == 1) {
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	2b00      	cmp	r3, #0
 800091a:	d006      	beq.n	800092a <LCD_DATA+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 800091c:	2201      	movs	r2, #1
 800091e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000922:	4844      	ldr	r0, [pc, #272]	@ (8000a34 <LCD_DATA+0x140>)
 8000924:	f005 fdf4 	bl	8006510 <HAL_GPIO_WritePin>
 8000928:	e005      	b.n	8000936 <LCD_DATA+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000930:	4840      	ldr	r0, [pc, #256]	@ (8000a34 <LCD_DATA+0x140>)
 8000932:	f005 fded 	bl	8006510 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 1)) == 0x02) {
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	f003 0302 	and.w	r3, r3, #2
 800093c:	2b00      	cmp	r3, #0
 800093e:	d005      	beq.n	800094c <LCD_DATA+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 8000940:	2201      	movs	r2, #1
 8000942:	2180      	movs	r1, #128	@ 0x80
 8000944:	483c      	ldr	r0, [pc, #240]	@ (8000a38 <LCD_DATA+0x144>)
 8000946:	f005 fde3 	bl	8006510 <HAL_GPIO_WritePin>
 800094a:	e004      	b.n	8000956 <LCD_DATA+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	2180      	movs	r1, #128	@ 0x80
 8000950:	4839      	ldr	r0, [pc, #228]	@ (8000a38 <LCD_DATA+0x144>)
 8000952:	f005 fddd 	bl	8006510 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 2)) == 0x04) {
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	f003 0304 	and.w	r3, r3, #4
 800095c:	2b00      	cmp	r3, #0
 800095e:	d006      	beq.n	800096e <LCD_DATA+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 8000960:	2201      	movs	r2, #1
 8000962:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000966:	4833      	ldr	r0, [pc, #204]	@ (8000a34 <LCD_DATA+0x140>)
 8000968:	f005 fdd2 	bl	8006510 <HAL_GPIO_WritePin>
 800096c:	e005      	b.n	800097a <LCD_DATA+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000974:	482f      	ldr	r0, [pc, #188]	@ (8000a34 <LCD_DATA+0x140>)
 8000976:	f005 fdcb 	bl	8006510 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 3)) == 0x08) {
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	f003 0308 	and.w	r3, r3, #8
 8000980:	2b00      	cmp	r3, #0
 8000982:	d005      	beq.n	8000990 <LCD_DATA+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 8000984:	2201      	movs	r2, #1
 8000986:	2108      	movs	r1, #8
 8000988:	482c      	ldr	r0, [pc, #176]	@ (8000a3c <LCD_DATA+0x148>)
 800098a:	f005 fdc1 	bl	8006510 <HAL_GPIO_WritePin>
 800098e:	e004      	b.n	800099a <LCD_DATA+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	2108      	movs	r1, #8
 8000994:	4829      	ldr	r0, [pc, #164]	@ (8000a3c <LCD_DATA+0x148>)
 8000996:	f005 fdbb 	bl	8006510 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 4)) == 0x10) {
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	f003 0310 	and.w	r3, r3, #16
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d005      	beq.n	80009b0 <LCD_DATA+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 80009a4:	2201      	movs	r2, #1
 80009a6:	2120      	movs	r1, #32
 80009a8:	4824      	ldr	r0, [pc, #144]	@ (8000a3c <LCD_DATA+0x148>)
 80009aa:	f005 fdb1 	bl	8006510 <HAL_GPIO_WritePin>
 80009ae:	e004      	b.n	80009ba <LCD_DATA+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2120      	movs	r1, #32
 80009b4:	4821      	ldr	r0, [pc, #132]	@ (8000a3c <LCD_DATA+0x148>)
 80009b6:	f005 fdab 	bl	8006510 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 5)) == 0x20) {
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	f003 0320 	and.w	r3, r3, #32
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d005      	beq.n	80009d0 <LCD_DATA+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 80009c4:	2201      	movs	r2, #1
 80009c6:	2110      	movs	r1, #16
 80009c8:	481c      	ldr	r0, [pc, #112]	@ (8000a3c <LCD_DATA+0x148>)
 80009ca:	f005 fda1 	bl	8006510 <HAL_GPIO_WritePin>
 80009ce:	e004      	b.n	80009da <LCD_DATA+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 80009d0:	2200      	movs	r2, #0
 80009d2:	2110      	movs	r1, #16
 80009d4:	4819      	ldr	r0, [pc, #100]	@ (8000a3c <LCD_DATA+0x148>)
 80009d6:	f005 fd9b 	bl	8006510 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 6)) == 0x40) {
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d006      	beq.n	80009f2 <LCD_DATA+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 80009e4:	2201      	movs	r2, #1
 80009e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009ea:	4814      	ldr	r0, [pc, #80]	@ (8000a3c <LCD_DATA+0x148>)
 80009ec:	f005 fd90 	bl	8006510 <HAL_GPIO_WritePin>
 80009f0:	e005      	b.n	80009fe <LCD_DATA+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009f8:	4810      	ldr	r0, [pc, #64]	@ (8000a3c <LCD_DATA+0x148>)
 80009fa:	f005 fd89 	bl	8006510 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 7)) == 0x80) {
 80009fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	da06      	bge.n	8000a14 <LCD_DATA+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 8000a06:	2201      	movs	r2, #1
 8000a08:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a0c:	4809      	ldr	r0, [pc, #36]	@ (8000a34 <LCD_DATA+0x140>)
 8000a0e:	f005 fd7f 	bl	8006510 <HAL_GPIO_WritePin>
 8000a12:	e005      	b.n	8000a20 <LCD_DATA+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a1a:	4806      	ldr	r0, [pc, #24]	@ (8000a34 <LCD_DATA+0x140>)
 8000a1c:	f005 fd78 	bl	8006510 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8000a20:	2201      	movs	r2, #1
 8000a22:	2102      	movs	r1, #2
 8000a24:	4803      	ldr	r0, [pc, #12]	@ (8000a34 <LCD_DATA+0x140>)
 8000a26:	f005 fd73 	bl	8006510 <HAL_GPIO_WritePin>
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40020000 	.word	0x40020000
 8000a38:	40020800 	.word	0x40020800
 8000a3c:	40020400 	.word	0x40020400

08000a40 <SetWindows>:
//***************************************************************************************************************************************
// Función para definir rango de direcciones de memoria con las cuales se trabajara (se define una ventana)
//***************************************************************************************************************************************
void SetWindows(unsigned int x1, unsigned int y1, unsigned int x2,
		unsigned int y2) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
 8000a4c:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x2a); // Set_column_address 4 parameters
 8000a4e:	202a      	movs	r0, #42	@ 0x2a
 8000a50:	f7ff feaa 	bl	80007a8 <LCD_CMD>
	LCD_DATA(x1 >> 8);
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	0a1b      	lsrs	r3, r3, #8
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff ff4a 	bl	80008f4 <LCD_DATA>
	LCD_DATA(x1);
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff ff45 	bl	80008f4 <LCD_DATA>
	LCD_DATA(x2 >> 8);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	0a1b      	lsrs	r3, r3, #8
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff ff3f 	bl	80008f4 <LCD_DATA>
	LCD_DATA(x2);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff ff3a 	bl	80008f4 <LCD_DATA>
	LCD_CMD(0x2b); // Set_page_address 4 parameters
 8000a80:	202b      	movs	r0, #43	@ 0x2b
 8000a82:	f7ff fe91 	bl	80007a8 <LCD_CMD>
	LCD_DATA(y1 >> 8);
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	0a1b      	lsrs	r3, r3, #8
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff ff31 	bl	80008f4 <LCD_DATA>
	LCD_DATA(y1);
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff ff2c 	bl	80008f4 <LCD_DATA>
	LCD_DATA(y2 >> 8);
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	0a1b      	lsrs	r3, r3, #8
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff ff26 	bl	80008f4 <LCD_DATA>
	LCD_DATA(y2);
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff ff21 	bl	80008f4 <LCD_DATA>
	LCD_CMD(0x2c); // Write_memory_start
 8000ab2:	202c      	movs	r0, #44	@ 0x2c
 8000ab4:	f7ff fe78 	bl	80007a8 <LCD_CMD>
}
 8000ab8:	bf00      	nop
 8000aba:	3710      	adds	r7, #16
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <LCD_Clear>:
//***************************************************************************************************************************************
// Función para borrar la pantalla - parámetros (color)
//***************************************************************************************************************************************
void LCD_Clear(unsigned int c) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	unsigned int x, y;
	LCD_CMD(0x02c); // write_memory_start
 8000ac8:	202c      	movs	r0, #44	@ 0x2c
 8000aca:	f7ff fe6d 	bl	80007a8 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2110      	movs	r1, #16
 8000ad2:	481b      	ldr	r0, [pc, #108]	@ (8000b40 <LCD_Clear+0x80>)
 8000ad4:	f005 fd1c 	bl	8006510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2101      	movs	r1, #1
 8000adc:	4819      	ldr	r0, [pc, #100]	@ (8000b44 <LCD_Clear+0x84>)
 8000ade:	f005 fd17 	bl	8006510 <HAL_GPIO_WritePin>
	SetWindows(0, 0, 319, 239); // 479, 319);
 8000ae2:	23ef      	movs	r3, #239	@ 0xef
 8000ae4:	f240 123f 	movw	r2, #319	@ 0x13f
 8000ae8:	2100      	movs	r1, #0
 8000aea:	2000      	movs	r0, #0
 8000aec:	f7ff ffa8 	bl	8000a40 <SetWindows>
	for (x = 0; x < 320; x++)
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	e016      	b.n	8000b24 <LCD_Clear+0x64>
		for (y = 0; y < 240; y++) {
 8000af6:	2300      	movs	r3, #0
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	e00d      	b.n	8000b18 <LCD_Clear+0x58>
			LCD_DATA(c >> 8);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	0a1b      	lsrs	r3, r3, #8
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fef6 	bl	80008f4 <LCD_DATA>
			LCD_DATA(c);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff fef1 	bl	80008f4 <LCD_DATA>
		for (y = 0; y < 240; y++) {
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	3301      	adds	r3, #1
 8000b16:	60bb      	str	r3, [r7, #8]
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	2bef      	cmp	r3, #239	@ 0xef
 8000b1c:	d9ee      	bls.n	8000afc <LCD_Clear+0x3c>
	for (x = 0; x < 320; x++)
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	3301      	adds	r3, #1
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000b2a:	d3e4      	bcc.n	8000af6 <LCD_Clear+0x36>
		}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	2101      	movs	r1, #1
 8000b30:	4804      	ldr	r0, [pc, #16]	@ (8000b44 <LCD_Clear+0x84>)
 8000b32:	f005 fced 	bl	8006510 <HAL_GPIO_WritePin>
}
 8000b36:	bf00      	nop
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40020000 	.word	0x40020000
 8000b44:	40020400 	.word	0x40020400

08000b48 <FillRect>:
 }
 }
 */

void FillRect(unsigned int x, unsigned int y, unsigned int w, unsigned int h,
		unsigned int c) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	@ 0x28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
 8000b54:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 8000b56:	202c      	movs	r0, #44	@ 0x2c
 8000b58:	f7ff fe26 	bl	80007a8 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	2110      	movs	r1, #16
 8000b60:	4824      	ldr	r0, [pc, #144]	@ (8000bf4 <FillRect+0xac>)
 8000b62:	f005 fcd5 	bl	8006510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2101      	movs	r1, #1
 8000b6a:	4823      	ldr	r0, [pc, #140]	@ (8000bf8 <FillRect+0xb0>)
 8000b6c:	f005 fcd0 	bl	8006510 <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + w;
 8000b70:	68fa      	ldr	r2, [r7, #12]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	61bb      	str	r3, [r7, #24]
	y2 = y + h;
 8000b78:	68ba      	ldr	r2, [r7, #8]
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	1e5a      	subs	r2, r3, #1
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	68b9      	ldr	r1, [r7, #8]
 8000b8a:	68f8      	ldr	r0, [r7, #12]
 8000b8c:	f7ff ff58 	bl	8000a40 <SetWindows>
	unsigned int k = w * h * 2 - 1;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	683a      	ldr	r2, [r7, #0]
 8000b94:	fb02 f303 	mul.w	r3, r2, r3
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	627b      	str	r3, [r7, #36]	@ 0x24
	for (int i = 0; i < w; i++) {
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	623b      	str	r3, [r7, #32]
 8000ba2:	e01a      	b.n	8000bda <FillRect+0x92>
		for (int j = 0; j < h; j++) {
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61fb      	str	r3, [r7, #28]
 8000ba8:	e010      	b.n	8000bcc <FillRect+0x84>
			LCD_DATA(c >> 8);
 8000baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bac:	0a1b      	lsrs	r3, r3, #8
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff fe9f 	bl	80008f4 <LCD_DATA>
			LCD_DATA(c);
 8000bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fe9a 	bl	80008f4 <LCD_DATA>

			//LCD_DATA(bitmap[k]);
			k = k - 2;
 8000bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bc2:	3b02      	subs	r3, #2
 8000bc4:	627b      	str	r3, [r7, #36]	@ 0x24
		for (int j = 0; j < h; j++) {
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	61fb      	str	r3, [r7, #28]
 8000bcc:	69fb      	ldr	r3, [r7, #28]
 8000bce:	683a      	ldr	r2, [r7, #0]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d8ea      	bhi.n	8000baa <FillRect+0x62>
	for (int i = 0; i < w; i++) {
 8000bd4:	6a3b      	ldr	r3, [r7, #32]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	623b      	str	r3, [r7, #32]
 8000bda:	6a3b      	ldr	r3, [r7, #32]
 8000bdc:	687a      	ldr	r2, [r7, #4]
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d8e0      	bhi.n	8000ba4 <FillRect+0x5c>
		}
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000be2:	2201      	movs	r2, #1
 8000be4:	2101      	movs	r1, #1
 8000be6:	4804      	ldr	r0, [pc, #16]	@ (8000bf8 <FillRect+0xb0>)
 8000be8:	f005 fc92 	bl	8006510 <HAL_GPIO_WritePin>
}
 8000bec:	bf00      	nop
 8000bee:	3728      	adds	r7, #40	@ 0x28
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40020000 	.word	0x40020000
 8000bf8:	40020400 	.word	0x40020400

08000bfc <LCD_Print>:
//***************************************************************************************************************************************
// Función para dibujar texto - parámetros ( texto, coordenada x, cordenada y, color, background)
//***************************************************************************************************************************************
void LCD_Print(char *text, int x, int y, int fontSize, int color,
		int background) {
 8000bfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c00:	b093      	sub	sp, #76	@ 0x4c
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	60f8      	str	r0, [r7, #12]
 8000c06:	60b9      	str	r1, [r7, #8]
 8000c08:	607a      	str	r2, [r7, #4]
 8000c0a:	603b      	str	r3, [r7, #0]
 8000c0c:	466b      	mov	r3, sp
 8000c0e:	461e      	mov	r6, r3

	int fontXSize;
	int fontYSize;

	if (fontSize == 1) {
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d103      	bne.n	8000c1e <LCD_Print+0x22>
		fontXSize = fontXSizeSmal;
 8000c16:	2308      	movs	r3, #8
 8000c18:	647b      	str	r3, [r7, #68]	@ 0x44
		fontYSize = fontYSizeSmal;
 8000c1a:	230c      	movs	r3, #12
 8000c1c:	643b      	str	r3, [r7, #64]	@ 0x40
	}
	if (fontSize == 2) {
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	2b02      	cmp	r3, #2
 8000c22:	d103      	bne.n	8000c2c <LCD_Print+0x30>
		fontXSize = fontXSizeBig;
 8000c24:	2310      	movs	r3, #16
 8000c26:	647b      	str	r3, [r7, #68]	@ 0x44
		fontYSize = fontYSizeBig;
 8000c28:	2310      	movs	r3, #16
 8000c2a:	643b      	str	r3, [r7, #64]	@ 0x40
	}
	if (fontSize == 3) {
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	2b03      	cmp	r3, #3
 8000c30:	d103      	bne.n	8000c3a <LCD_Print+0x3e>
			fontXSize = fontXSizeNum;
 8000c32:	2320      	movs	r3, #32
 8000c34:	647b      	str	r3, [r7, #68]	@ 0x44
			fontYSize = fontYSizeNum;
 8000c36:	2332      	movs	r3, #50	@ 0x32
 8000c38:	643b      	str	r3, [r7, #64]	@ 0x40
		}

	char charInput;
	int cLength = strlen(text);
 8000c3a:	68f8      	ldr	r0, [r7, #12]
 8000c3c:	f7ff fae8 	bl	8000210 <strlen>
 8000c40:	4603      	mov	r3, r0
 8000c42:	627b      	str	r3, [r7, #36]	@ 0x24
	//Serial.println(cLength, DEC);
	int charDec;
	int c;
	//int charHex;
	char char_array[cLength + 1];
 8000c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c46:	1c59      	adds	r1, r3, #1
 8000c48:	1e4b      	subs	r3, r1, #1
 8000c4a:	623b      	str	r3, [r7, #32]
 8000c4c:	460a      	mov	r2, r1
 8000c4e:	2300      	movs	r3, #0
 8000c50:	4690      	mov	r8, r2
 8000c52:	4699      	mov	r9, r3
 8000c54:	f04f 0200 	mov.w	r2, #0
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000c60:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000c64:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000c68:	460a      	mov	r2, r1
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	4614      	mov	r4, r2
 8000c6e:	461d      	mov	r5, r3
 8000c70:	f04f 0200 	mov.w	r2, #0
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	00eb      	lsls	r3, r5, #3
 8000c7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c7e:	00e2      	lsls	r2, r4, #3
 8000c80:	460b      	mov	r3, r1
 8000c82:	3307      	adds	r3, #7
 8000c84:	08db      	lsrs	r3, r3, #3
 8000c86:	00db      	lsls	r3, r3, #3
 8000c88:	ebad 0d03 	sub.w	sp, sp, r3
 8000c8c:	466b      	mov	r3, sp
 8000c8e:	3300      	adds	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
	for(int i = 0; text[i] != '\0'; i++){
 8000c92:	2300      	movs	r3, #0
 8000c94:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000c96:	e00b      	b.n	8000cb0 <LCD_Print+0xb4>
		char_array[i]=text[i];
 8000c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c9a:	68fa      	ldr	r2, [r7, #12]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	7819      	ldrb	r1, [r3, #0]
 8000ca0:	69fa      	ldr	r2, [r7, #28]
 8000ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000ca4:	4413      	add	r3, r2
 8000ca6:	460a      	mov	r2, r1
 8000ca8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; text[i] != '\0'; i++){
 8000caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000cac:	3301      	adds	r3, #1
 8000cae:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000cb2:	68fa      	ldr	r2, [r7, #12]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d1ed      	bne.n	8000c98 <LCD_Print+0x9c>
	}

	//text.toCharArray(char_array, cLength + 1);

	for (int i = 0; i < cLength; i++) {
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8000cc0:	e077      	b.n	8000db2 <LCD_Print+0x1b6>
		charInput = char_array[i];
 8000cc2:	69fa      	ldr	r2, [r7, #28]
 8000cc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cc6:	4413      	add	r3, r2
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	76fb      	strb	r3, [r7, #27]
		//Serial.println(char_array[i]);
		charDec = (int) charInput;
 8000ccc:	7efb      	ldrb	r3, [r7, #27]
 8000cce:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	483c      	ldr	r0, [pc, #240]	@ (8000dc8 <LCD_Print+0x1cc>)
 8000cd6:	f005 fc1b 	bl	8006510 <HAL_GPIO_WritePin>
		SetWindows(x + (i * fontXSize), y, x + (i * fontXSize) + fontXSize - 1, y + fontYSize);
 8000cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cdc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000cde:	fb03 f202 	mul.w	r2, r3, r2
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	6879      	ldr	r1, [r7, #4]
 8000cea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000cee:	fb03 f202 	mul.w	r2, r3, r2
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	441a      	add	r2, r3
 8000cf6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000cf8:	4413      	add	r3, r2
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	461c      	mov	r4, r3
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000d02:	4413      	add	r3, r2
 8000d04:	4622      	mov	r2, r4
 8000d06:	f7ff fe9b 	bl	8000a40 <SetWindows>
		long charHex1;
		for (int n = 0; n < fontYSize; n++) {
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000d0e:	e044      	b.n	8000d9a <LCD_Print+0x19e>
			if (fontSize == 1) {
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d10b      	bne.n	8000d2e <LCD_Print+0x132>
				charHex1 = pgm_read_word_near(
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	3b20      	subs	r3, #32
 8000d1a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000d1c:	fb02 f303 	mul.w	r3, r2, r3
 8000d20:	461a      	mov	r2, r3
 8000d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d24:	4413      	add	r3, r2
 8000d26:	4a29      	ldr	r2, [pc, #164]	@ (8000dcc <LCD_Print+0x1d0>)
 8000d28:	4413      	add	r3, r2
 8000d2a:	881b      	ldrh	r3, [r3, #0]
 8000d2c:	633b      	str	r3, [r7, #48]	@ 0x30
						smallFont + ((charDec - 32) * fontYSize) + n);
			}
			if (fontSize == 2) {
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d10c      	bne.n	8000d4e <LCD_Print+0x152>
				charHex1 = pgm_read_word_near(
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	3b20      	subs	r3, #32
 8000d38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000d3a:	fb02 f303 	mul.w	r3, r2, r3
 8000d3e:	461a      	mov	r2, r3
 8000d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d42:	4413      	add	r3, r2
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	4a22      	ldr	r2, [pc, #136]	@ (8000dd0 <LCD_Print+0x1d4>)
 8000d48:	4413      	add	r3, r2
 8000d4a:	881b      	ldrh	r3, [r3, #0]
 8000d4c:	633b      	str	r3, [r7, #48]	@ 0x30
						bigFont + ((charDec - 32) * fontYSize) + n);
			}
			for (int t = 1; t < fontXSize + 1; t++) {
 8000d4e:	2301      	movs	r3, #1
 8000d50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d52:	e01b      	b.n	8000d8c <LCD_Print+0x190>
				if ((charHex1 & (1 << (fontXSize - t))) > 0) {
 8000d54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	409a      	lsls	r2, r3
 8000d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d60:	4013      	ands	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	dd02      	ble.n	8000d6c <LCD_Print+0x170>
					c = color;
 8000d66:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000d6a:	e001      	b.n	8000d70 <LCD_Print+0x174>
				} else {
					c = background;
 8000d6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
				}
				LCD_DATA(c >> 8);
 8000d70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d72:	121b      	asrs	r3, r3, #8
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fdbc 	bl	80008f4 <LCD_DATA>
				LCD_DATA(c);
 8000d7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fdb7 	bl	80008f4 <LCD_DATA>
			for (int t = 1; t < fontXSize + 1; t++) {
 8000d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d88:	3301      	adds	r3, #1
 8000d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d90:	429a      	cmp	r2, r3
 8000d92:	dadf      	bge.n	8000d54 <LCD_Print+0x158>
		for (int n = 0; n < fontYSize; n++) {
 8000d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d96:	3301      	adds	r3, #1
 8000d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000d9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000d9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	dbb6      	blt.n	8000d10 <LCD_Print+0x114>
			}
		}
		HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000da2:	2201      	movs	r2, #1
 8000da4:	2101      	movs	r1, #1
 8000da6:	4808      	ldr	r0, [pc, #32]	@ (8000dc8 <LCD_Print+0x1cc>)
 8000da8:	f005 fbb2 	bl	8006510 <HAL_GPIO_WritePin>
	for (int i = 0; i < cLength; i++) {
 8000dac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dae:	3301      	adds	r3, #1
 8000db0:	637b      	str	r3, [r7, #52]	@ 0x34
 8000db2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000db6:	429a      	cmp	r2, r3
 8000db8:	db83      	blt.n	8000cc2 <LCD_Print+0xc6>
 8000dba:	46b5      	mov	sp, r6
	}
}
 8000dbc:	bf00      	nop
 8000dbe:	374c      	adds	r7, #76	@ 0x4c
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40020400 	.word	0x40020400
 8000dcc:	08009714 	.word	0x08009714
 8000dd0:	08009b88 	.word	0x08009b88

08000dd4 <LCD_Bitmap>:
//***************************************************************************************************************************************
// Función para dibujar una imagen a partir de un arreglo de colores (Bitmap) Formato (Color 16bit R 5bits G 6bits B 5bits)
//***************************************************************************************************************************************
void LCD_Bitmap(unsigned int x, unsigned int y, unsigned int width,
		unsigned int height, unsigned char bitmap[]) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	@ 0x28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
 8000de0:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 8000de2:	202c      	movs	r0, #44	@ 0x2c
 8000de4:	f7ff fce0 	bl	80007a8 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000de8:	2201      	movs	r2, #1
 8000dea:	2110      	movs	r1, #16
 8000dec:	4824      	ldr	r0, [pc, #144]	@ (8000e80 <LCD_Bitmap+0xac>)
 8000dee:	f005 fb8f 	bl	8006510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2101      	movs	r1, #1
 8000df6:	4823      	ldr	r0, [pc, #140]	@ (8000e84 <LCD_Bitmap+0xb0>)
 8000df8:	f005 fb8a 	bl	8006510 <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + width;
 8000dfc:	68fa      	ldr	r2, [r7, #12]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4413      	add	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
	y2 = y + height;
 8000e04:	68ba      	ldr	r2, [r7, #8]
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	4413      	add	r3, r2
 8000e0a:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	1e5a      	subs	r2, r3, #1
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	68b9      	ldr	r1, [r7, #8]
 8000e16:	68f8      	ldr	r0, [r7, #12]
 8000e18:	f7ff fe12 	bl	8000a40 <SetWindows>
	unsigned int k = 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	627b      	str	r3, [r7, #36]	@ 0x24

	for (int i = 0; i < width; i++) {
 8000e20:	2300      	movs	r3, #0
 8000e22:	623b      	str	r3, [r7, #32]
 8000e24:	e01e      	b.n	8000e64 <LCD_Bitmap+0x90>
		for (int j = 0; j < height; j++) {
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
 8000e2a:	e014      	b.n	8000e56 <LCD_Bitmap+0x82>
			LCD_DATA(bitmap[k]);
 8000e2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e30:	4413      	add	r3, r2
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fd5d 	bl	80008f4 <LCD_DATA>
			LCD_DATA(bitmap[k + 1]);
 8000e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000e40:	4413      	add	r3, r2
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fd55 	bl	80008f4 <LCD_DATA>
			//LCD_DATA(bitmap[k]);
			k = k + 2;
 8000e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e4c:	3302      	adds	r3, #2
 8000e4e:	627b      	str	r3, [r7, #36]	@ 0x24
		for (int j = 0; j < height; j++) {
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	3301      	adds	r3, #1
 8000e54:	61fb      	str	r3, [r7, #28]
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	683a      	ldr	r2, [r7, #0]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d8e6      	bhi.n	8000e2c <LCD_Bitmap+0x58>
	for (int i = 0; i < width; i++) {
 8000e5e:	6a3b      	ldr	r3, [r7, #32]
 8000e60:	3301      	adds	r3, #1
 8000e62:	623b      	str	r3, [r7, #32]
 8000e64:	6a3b      	ldr	r3, [r7, #32]
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d8dc      	bhi.n	8000e26 <LCD_Bitmap+0x52>
		}
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	2101      	movs	r1, #1
 8000e70:	4804      	ldr	r0, [pc, #16]	@ (8000e84 <LCD_Bitmap+0xb0>)
 8000e72:	f005 fb4d 	bl	8006510 <HAL_GPIO_WritePin>
}
 8000e76:	bf00      	nop
 8000e78:	3728      	adds	r7, #40	@ 0x28
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40020000 	.word	0x40020000
 8000e84:	40020400 	.word	0x40020400

08000e88 <LCD_Sprite>:
//***************************************************************************************************************************************
// Función para dibujar una imagen sprite - los parámetros columns = número de imagenes en el sprite, index = cual desplegar, flip = darle vuelta
//***************************************************************************************************************************************
void LCD_Sprite(int x, int y, int width, int height, unsigned char bitmap[],
		int columns, int index, char flip, char offset) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08c      	sub	sp, #48	@ 0x30
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
 8000e94:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 8000e96:	202c      	movs	r0, #44	@ 0x2c
 8000e98:	f7ff fc86 	bl	80007a8 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	2110      	movs	r1, #16
 8000ea0:	484d      	ldr	r0, [pc, #308]	@ (8000fd8 <LCD_Sprite+0x150>)
 8000ea2:	f005 fb35 	bl	8006510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	484c      	ldr	r0, [pc, #304]	@ (8000fdc <LCD_Sprite+0x154>)
 8000eac:	f005 fb30 	bl	8006510 <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + width;
 8000eb0:	68fa      	ldr	r2, [r7, #12]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
	y2 = y + height;
 8000eb8:	68ba      	ldr	r2, [r7, #8]
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 8000ec0:	68f8      	ldr	r0, [r7, #12]
 8000ec2:	68b9      	ldr	r1, [r7, #8]
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	1e5a      	subs	r2, r3, #1
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	f7ff fdb8 	bl	8000a40 <SetWindows>
	int k = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int ancho = ((width * columns));
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000ed8:	fb02 f303 	mul.w	r3, r2, r3
 8000edc:	613b      	str	r3, [r7, #16]
	if (flip) {
 8000ede:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d03a      	beq.n	8000f5c <LCD_Sprite+0xd4>
		for (int j = 0; j < height; j++) {
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000eea:	e032      	b.n	8000f52 <LCD_Sprite+0xca>
			k = (j * (ancho) + index * width - 1 - offset) * 2;
 8000eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	fb03 f202 	mul.w	r2, r3, r2
 8000ef4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ef6:	6879      	ldr	r1, [r7, #4]
 8000ef8:	fb01 f303 	mul.w	r3, r1, r3
 8000efc:	4413      	add	r3, r2
 8000efe:	1e5a      	subs	r2, r3, #1
 8000f00:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
			k = k + width * 2;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f10:	4413      	add	r3, r2
 8000f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8000f14:	2300      	movs	r3, #0
 8000f16:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f18:	e014      	b.n	8000f44 <LCD_Sprite+0xbc>
				LCD_DATA(bitmap[k]);
 8000f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f1c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000f1e:	4413      	add	r3, r2
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fce6 	bl	80008f4 <LCD_DATA>
				LCD_DATA(bitmap[k + 1]);
 8000f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000f2e:	4413      	add	r3, r2
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff fcde 	bl	80008f4 <LCD_DATA>
				k = k - 2;
 8000f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f3a:	3b02      	subs	r3, #2
 8000f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8000f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f40:	3301      	adds	r3, #1
 8000f42:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	dbe6      	blt.n	8000f1a <LCD_Sprite+0x92>
		for (int j = 0; j < height; j++) {
 8000f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f4e:	3301      	adds	r3, #1
 8000f50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	dbc8      	blt.n	8000eec <LCD_Sprite+0x64>
 8000f5a:	e034      	b.n	8000fc6 <LCD_Sprite+0x13e>
			}
		}
	} else {
		for (int j = 0; j < height; j++) {
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	623b      	str	r3, [r7, #32]
 8000f60:	e02d      	b.n	8000fbe <LCD_Sprite+0x136>
			k = (j * (ancho) + index * width + 1 + offset) * 2;
 8000f62:	6a3b      	ldr	r3, [r7, #32]
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	fb03 f202 	mul.w	r2, r3, r2
 8000f6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f6c:	6879      	ldr	r1, [r7, #4]
 8000f6e:	fb01 f303 	mul.w	r3, r1, r3
 8000f72:	4413      	add	r3, r2
 8000f74:	1c5a      	adds	r2, r3, #1
 8000f76:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000f7a:	4413      	add	r3, r2
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8000f80:	2300      	movs	r3, #0
 8000f82:	61fb      	str	r3, [r7, #28]
 8000f84:	e014      	b.n	8000fb0 <LCD_Sprite+0x128>
				LCD_DATA(bitmap[k]);
 8000f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000f8a:	4413      	add	r3, r2
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fcb0 	bl	80008f4 <LCD_DATA>
				LCD_DATA(bitmap[k + 1]);
 8000f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f96:	3301      	adds	r3, #1
 8000f98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000f9a:	4413      	add	r3, r2
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff fca8 	bl	80008f4 <LCD_DATA>
				k = k + 2;
 8000fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fa6:	3302      	adds	r3, #2
 8000fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3301      	adds	r3, #1
 8000fae:	61fb      	str	r3, [r7, #28]
 8000fb0:	69fa      	ldr	r2, [r7, #28]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	dbe6      	blt.n	8000f86 <LCD_Sprite+0xfe>
		for (int j = 0; j < height; j++) {
 8000fb8:	6a3b      	ldr	r3, [r7, #32]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	623b      	str	r3, [r7, #32]
 8000fbe:	6a3a      	ldr	r2, [r7, #32]
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	dbcd      	blt.n	8000f62 <LCD_Sprite+0xda>
			}
		}

	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	2101      	movs	r1, #1
 8000fca:	4804      	ldr	r0, [pc, #16]	@ (8000fdc <LCD_Sprite+0x154>)
 8000fcc:	f005 faa0 	bl	8006510 <HAL_GPIO_WritePin>
}
 8000fd0:	bf00      	nop
 8000fd2:	3730      	adds	r7, #48	@ 0x30
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40020000 	.word	0x40020000
 8000fdc:	40020400 	.word	0x40020400

08000fe0 <disparar_balaJ1.1>:
		LCD_Bitmap(38, 199, 243, 39, image);
	}*/
	transmit_uart3("1");
	transmit_uart5("1");

void disparar_balaJ1() {
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	f8c7 c004 	str.w	ip, [r7, #4]
		for (int i = 0; i < MAX_BULLETS; i++) {
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	e02c      	b.n	800104a <disparar_balaJ1.1+0x6a>
			if (bullet_state[i] == 0) { // Encuentra una bala inactiva
 8000ff0:	4a1b      	ldr	r2, [pc, #108]	@ (8001060 <disparar_balaJ1.1+0x80>)
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d123      	bne.n	8001044 <disparar_balaJ1.1+0x64>
				bullet_x[i] = flip1 == 1 ? x1 + 26 : x1 -10; // Inicializa la posición
 8000ffc:	4b19      	ldr	r3, [pc, #100]	@ (8001064 <disparar_balaJ1.1+0x84>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d103      	bne.n	800100c <disparar_balaJ1.1+0x2c>
 8001004:	4b18      	ldr	r3, [pc, #96]	@ (8001068 <disparar_balaJ1.1+0x88>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	331a      	adds	r3, #26
 800100a:	e002      	b.n	8001012 <disparar_balaJ1.1+0x32>
 800100c:	4b16      	ldr	r3, [pc, #88]	@ (8001068 <disparar_balaJ1.1+0x88>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	3b0a      	subs	r3, #10
 8001012:	4916      	ldr	r1, [pc, #88]	@ (800106c <disparar_balaJ1.1+0x8c>)
 8001014:	68fa      	ldr	r2, [r7, #12]
 8001016:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
				bullet_y[i] = y1+bulleth1; // Asigna la posición Y inicial si es necesario
 800101a:	4b15      	ldr	r3, [pc, #84]	@ (8001070 <disparar_balaJ1.1+0x90>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	4b15      	ldr	r3, [pc, #84]	@ (8001074 <disparar_balaJ1.1+0x94>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	441a      	add	r2, r3
 8001024:	4914      	ldr	r1, [pc, #80]	@ (8001078 <disparar_balaJ1.1+0x98>)
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				bullet_state[i] = 1; // Marca la bala como activa
 800102c:	4a0c      	ldr	r2, [pc, #48]	@ (8001060 <disparar_balaJ1.1+0x80>)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	4413      	add	r3, r2
 8001032:	2201      	movs	r2, #1
 8001034:	701a      	strb	r2, [r3, #0]
				flip1_[i]= flip1;
 8001036:	4b0b      	ldr	r3, [pc, #44]	@ (8001064 <disparar_balaJ1.1+0x84>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	4910      	ldr	r1, [pc, #64]	@ (800107c <disparar_balaJ1.1+0x9c>)
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				break; // Sal de la búsqueda
 8001042:	e006      	b.n	8001052 <disparar_balaJ1.1+0x72>
		for (int i = 0; i < MAX_BULLETS; i++) {
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	3301      	adds	r3, #1
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	2b02      	cmp	r3, #2
 800104e:	ddcf      	ble.n	8000ff0 <disparar_balaJ1.1+0x10>
			}
		}
	}
 8001050:	bf00      	nop
 8001052:	bf00      	nop
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	200140dc 	.word	0x200140dc
 8001064:	200140b0 	.word	0x200140b0
 8001068:	200140a0 	.word	0x200140a0
 800106c:	200140e0 	.word	0x200140e0
 8001070:	20012e34 	.word	0x20012e34
 8001074:	200140cc 	.word	0x200140cc
 8001078:	200140ec 	.word	0x200140ec
 800107c:	200140f8 	.word	0x200140f8

08001080 <main>:
{
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b089      	sub	sp, #36	@ 0x24
 8001084:	af06      	add	r7, sp, #24
int main(void)
 8001086:	f107 0318 	add.w	r3, r7, #24
 800108a:	607b      	str	r3, [r7, #4]
  HAL_Init();
 800108c:	f004 fe72 	bl	8005d74 <HAL_Init>
  SystemClock_Config();
 8001090:	f002 fbb6 	bl	8003800 <SystemClock_Config>
  MX_GPIO_Init();
 8001094:	f002 fcd4 	bl	8003a40 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001098:	f002 fc1e 	bl	80038d8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800109c:	f002 fc7c 	bl	8003998 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80010a0:	f007 f892 	bl	80081c8 <MX_FATFS_Init>
  MX_UART5_Init();
 80010a4:	f002 fc4e 	bl	8003944 <MX_UART5_Init>
  MX_USART3_UART_Init();
 80010a8:	f002 fca0 	bl	80039ec <MX_USART3_UART_Init>
     fres = f_mount(&fs,"/" , 0);
 80010ac:	2200      	movs	r2, #0
 80010ae:	49c0      	ldr	r1, [pc, #768]	@ (80013b0 <main+0x330>)
 80010b0:	48c0      	ldr	r0, [pc, #768]	@ (80013b4 <main+0x334>)
 80010b2:	f007 fd85 	bl	8008bc0 <f_mount>
 80010b6:	4603      	mov	r3, r0
 80010b8:	461a      	mov	r2, r3
 80010ba:	4bbf      	ldr	r3, [pc, #764]	@ (80013b8 <main+0x338>)
 80010bc:	701a      	strb	r2, [r3, #0]
 HAL_UART_Receive_IT(&huart2, option, 1);  // EMPEZAR RECEPCIÓN
 80010be:	2201      	movs	r2, #1
 80010c0:	49be      	ldr	r1, [pc, #760]	@ (80013bc <main+0x33c>)
 80010c2:	48bf      	ldr	r0, [pc, #764]	@ (80013c0 <main+0x340>)
 80010c4:	f006 f904 	bl	80072d0 <HAL_UART_Receive_IT>
 HAL_UART_Receive_IT(&huart3, option, 1);  // EMPEZAR RECEPCIÓN
 80010c8:	2201      	movs	r2, #1
 80010ca:	49bc      	ldr	r1, [pc, #752]	@ (80013bc <main+0x33c>)
 80010cc:	48bd      	ldr	r0, [pc, #756]	@ (80013c4 <main+0x344>)
 80010ce:	f006 f8ff 	bl	80072d0 <HAL_UART_Receive_IT>
 HAL_UART_Receive_IT(&huart5, option2, 1);
 80010d2:	2201      	movs	r2, #1
 80010d4:	49bc      	ldr	r1, [pc, #752]	@ (80013c8 <main+0x348>)
 80010d6:	48bd      	ldr	r0, [pc, #756]	@ (80013cc <main+0x34c>)
 80010d8:	f006 f8fa 	bl	80072d0 <HAL_UART_Receive_IT>
	LCD_Init();
 80010dc:	f7ff fa68 	bl	80005b0 <LCD_Init>
	LCD_Clear(0x0000);	//PINTAR TODA LA PANTALLA DE NEGRO
 80010e0:	2000      	movs	r0, #0
 80010e2:	f7ff fced 	bl	8000ac0 <LCD_Clear>
	LCD_Bitmap(69, 35, 182, 75, Titulo);
 80010e6:	4bba      	ldr	r3, [pc, #744]	@ (80013d0 <main+0x350>)
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	234b      	movs	r3, #75	@ 0x4b
 80010ec:	22b6      	movs	r2, #182	@ 0xb6
 80010ee:	2123      	movs	r1, #35	@ 0x23
 80010f0:	2045      	movs	r0, #69	@ 0x45
 80010f2:	f7ff fe6f 	bl	8000dd4 <LCD_Bitmap>
	LCD_Bitmap(38, 199, 243, 39, Referencias);
 80010f6:	4bb7      	ldr	r3, [pc, #732]	@ (80013d4 <main+0x354>)
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	2327      	movs	r3, #39	@ 0x27
 80010fc:	22f3      	movs	r2, #243	@ 0xf3
 80010fe:	21c7      	movs	r1, #199	@ 0xc7
 8001100:	2026      	movs	r0, #38	@ 0x26
 8001102:	f7ff fe67 	bl	8000dd4 <LCD_Bitmap>
	transmit_uart3("1");
 8001106:	48b4      	ldr	r0, [pc, #720]	@ (80013d8 <main+0x358>)
 8001108:	f002 fd34 	bl	8003b74 <transmit_uart3>
	transmit_uart5("1");
 800110c:	48b2      	ldr	r0, [pc, #712]	@ (80013d8 <main+0x358>)
 800110e:	f002 fd47 	bl	8003ba0 <transmit_uart5>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if(modo==0){
 8001112:	4bb2      	ldr	r3, [pc, #712]	@ (80013dc <main+0x35c>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d137      	bne.n	800118a <main+0x10a>

			if(start==0){
 800111a:	4bb1      	ldr	r3, [pc, #708]	@ (80013e0 <main+0x360>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d108      	bne.n	8001134 <main+0xb4>
				LCD_Bitmap(117, 145, 86, 7, PressStart);
 8001122:	4bb0      	ldr	r3, [pc, #704]	@ (80013e4 <main+0x364>)
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	2307      	movs	r3, #7
 8001128:	2256      	movs	r2, #86	@ 0x56
 800112a:	2191      	movs	r1, #145	@ 0x91
 800112c:	2075      	movs	r0, #117	@ 0x75
 800112e:	f7ff fe51 	bl	8000dd4 <LCD_Bitmap>
 8001132:	e01f      	b.n	8001174 <main+0xf4>
			}
			else if(start==1){
 8001134:	4baa      	ldr	r3, [pc, #680]	@ (80013e0 <main+0x360>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d11b      	bne.n	8001174 <main+0xf4>
				FillRect(117, 145, 86, 7, 0x0000);
 800113c:	2300      	movs	r3, #0
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	2307      	movs	r3, #7
 8001142:	2256      	movs	r2, #86	@ 0x56
 8001144:	2191      	movs	r1, #145	@ 0x91
 8001146:	2075      	movs	r0, #117	@ 0x75
 8001148:	f7ff fcfe 	bl	8000b48 <FillRect>
				HAL_Delay(100);
 800114c:	2064      	movs	r0, #100	@ 0x64
 800114e:	f004 fe83 	bl	8005e58 <HAL_Delay>
				LCD_Bitmap(117, 145, 86, 7, PressStart);
 8001152:	4ba4      	ldr	r3, [pc, #656]	@ (80013e4 <main+0x364>)
 8001154:	9300      	str	r3, [sp, #0]
 8001156:	2307      	movs	r3, #7
 8001158:	2256      	movs	r2, #86	@ 0x56
 800115a:	2191      	movs	r1, #145	@ 0x91
 800115c:	2075      	movs	r0, #117	@ 0x75
 800115e:	f7ff fe39 	bl	8000dd4 <LCD_Bitmap>
				HAL_Delay(100);
 8001162:	2064      	movs	r0, #100	@ 0x64
 8001164:	f004 fe78 	bl	8005e58 <HAL_Delay>
				startcounter++;
 8001168:	4b9f      	ldr	r3, [pc, #636]	@ (80013e8 <main+0x368>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	3301      	adds	r3, #1
 800116e:	b2da      	uxtb	r2, r3
 8001170:	4b9d      	ldr	r3, [pc, #628]	@ (80013e8 <main+0x368>)
 8001172:	701a      	strb	r2, [r3, #0]
			}
			if (startcounter == 7){
 8001174:	4b9c      	ldr	r3, [pc, #624]	@ (80013e8 <main+0x368>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b07      	cmp	r3, #7
 800117a:	d1ca      	bne.n	8001112 <main+0x92>
				start = 0;
 800117c:	4b98      	ldr	r3, [pc, #608]	@ (80013e0 <main+0x360>)
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]
				modo = 1;
 8001182:	4b96      	ldr	r3, [pc, #600]	@ (80013dc <main+0x35c>)
 8001184:	2201      	movs	r2, #1
 8001186:	701a      	strb	r2, [r3, #0]
 8001188:	e7c3      	b.n	8001112 <main+0x92>
			}
		}
		else if(modo==50){
 800118a:	4b94      	ldr	r3, [pc, #592]	@ (80013dc <main+0x35c>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	2b32      	cmp	r3, #50	@ 0x32
 8001190:	f040 80b1 	bne.w	80012f6 <main+0x276>
			FillRect(0, 0, 320, 81, 0x039D);
 8001194:	f240 339d 	movw	r3, #925	@ 0x39d
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2351      	movs	r3, #81	@ 0x51
 800119c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80011a0:	2100      	movs	r1, #0
 80011a2:	2000      	movs	r0, #0
 80011a4:	f7ff fcd0 	bl	8000b48 <FillRect>
			//FillRect(0, 81, 320, 80, 0xF5E7);
			FillRect(0, 81, 320, 80, 0x19EB);
 80011a8:	f641 13eb 	movw	r3, #6635	@ 0x19eb
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	2350      	movs	r3, #80	@ 0x50
 80011b0:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80011b4:	2151      	movs	r1, #81	@ 0x51
 80011b6:	2000      	movs	r0, #0
 80011b8:	f7ff fcc6 	bl	8000b48 <FillRect>
			LCD_Print("VS.", 138, 111, 2, 0xFFFF, 0x19EB);		//LETRAS QUE DICEN "VS"
 80011bc:	f641 13eb 	movw	r3, #6635	@ 0x19eb
 80011c0:	9301      	str	r3, [sp, #4]
 80011c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	2302      	movs	r3, #2
 80011ca:	226f      	movs	r2, #111	@ 0x6f
 80011cc:	218a      	movs	r1, #138	@ 0x8a
 80011ce:	4887      	ldr	r0, [pc, #540]	@ (80013ec <main+0x36c>)
 80011d0:	f7ff fd14 	bl	8000bfc <LCD_Print>
			//LCD_Print("VS.", 140, 111, 2, 0x9FFE, 0x039D);	//LETRAS QUE DICEN "VS"
			FillRect(0, 161, 320, 80, 0x039D);
 80011d4:	f240 339d 	movw	r3, #925	@ 0x39d
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2350      	movs	r3, #80	@ 0x50
 80011dc:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80011e0:	21a1      	movs	r1, #161	@ 0xa1
 80011e2:	2000      	movs	r0, #0
 80011e4:	f7ff fcb0 	bl	8000b48 <FillRect>
			LCD_Sprite(80, 110, 20, 27, marioB, 1, 1, 1, 0);	//9
 80011e8:	2300      	movs	r3, #0
 80011ea:	9304      	str	r3, [sp, #16]
 80011ec:	2301      	movs	r3, #1
 80011ee:	9303      	str	r3, [sp, #12]
 80011f0:	2301      	movs	r3, #1
 80011f2:	9302      	str	r3, [sp, #8]
 80011f4:	2301      	movs	r3, #1
 80011f6:	9301      	str	r3, [sp, #4]
 80011f8:	4b7d      	ldr	r3, [pc, #500]	@ (80013f0 <main+0x370>)
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	231b      	movs	r3, #27
 80011fe:	2214      	movs	r2, #20
 8001200:	216e      	movs	r1, #110	@ 0x6e
 8001202:	2050      	movs	r0, #80	@ 0x50
 8001204:	f7ff fe40 	bl	8000e88 <LCD_Sprite>
			LCD_Sprite(214, 110, 21, 28, rollB, 1, 1, 0, 0);	//8
 8001208:	2300      	movs	r3, #0
 800120a:	9304      	str	r3, [sp, #16]
 800120c:	2300      	movs	r3, #0
 800120e:	9303      	str	r3, [sp, #12]
 8001210:	2301      	movs	r3, #1
 8001212:	9302      	str	r3, [sp, #8]
 8001214:	2301      	movs	r3, #1
 8001216:	9301      	str	r3, [sp, #4]
 8001218:	4b76      	ldr	r3, [pc, #472]	@ (80013f4 <main+0x374>)
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	231c      	movs	r3, #28
 800121e:	2215      	movs	r2, #21
 8001220:	216e      	movs	r1, #110	@ 0x6e
 8001222:	20d6      	movs	r0, #214	@ 0xd6
 8001224:	f7ff fe30 	bl	8000e88 <LCD_Sprite>
			FillRect(0, 135, 320, 5, 0xFFFF);
 8001228:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	2305      	movs	r3, #5
 8001230:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001234:	2187      	movs	r1, #135	@ 0x87
 8001236:	2000      	movs	r0, #0
 8001238:	f7ff fc86 	bl	8000b48 <FillRect>
			HAL_Delay(10000);
 800123c:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001240:	f004 fe0a 	bl	8005e58 <HAL_Delay>
			FillRect(0, 0, 320, 81, 0x039D);
 8001244:	f240 339d 	movw	r3, #925	@ 0x39d
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	2351      	movs	r3, #81	@ 0x51
 800124c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001250:	2100      	movs	r1, #0
 8001252:	2000      	movs	r0, #0
 8001254:	f7ff fc78 	bl	8000b48 <FillRect>
			//FillRect(0, 81, 320, 80, 0xF5E7);
			FillRect(0, 81, 320, 80, 0x19EB);
 8001258:	f641 13eb 	movw	r3, #6635	@ 0x19eb
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	2350      	movs	r3, #80	@ 0x50
 8001260:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001264:	2151      	movs	r1, #81	@ 0x51
 8001266:	2000      	movs	r0, #0
 8001268:	f7ff fc6e 	bl	8000b48 <FillRect>
			LCD_Print("VS.", 138, 111, 2, 0xFFFF, 0x19EB);		//LETRAS QUE DICEN "VS"
 800126c:	f641 13eb 	movw	r3, #6635	@ 0x19eb
 8001270:	9301      	str	r3, [sp, #4]
 8001272:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	2302      	movs	r3, #2
 800127a:	226f      	movs	r2, #111	@ 0x6f
 800127c:	218a      	movs	r1, #138	@ 0x8a
 800127e:	485b      	ldr	r0, [pc, #364]	@ (80013ec <main+0x36c>)
 8001280:	f7ff fcbc 	bl	8000bfc <LCD_Print>
			//LCD_Print("VS.", 140, 111, 2, 0x9FFE, 0x039D);	//LETRAS QUE DICEN "VS"
			FillRect(0, 161, 320, 80, 0x039D);
 8001284:	f240 339d 	movw	r3, #925	@ 0x39d
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	2350      	movs	r3, #80	@ 0x50
 800128c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001290:	21a1      	movs	r1, #161	@ 0xa1
 8001292:	2000      	movs	r0, #0
 8001294:	f7ff fc58 	bl	8000b48 <FillRect>
			LCD_Sprite(80, 110, 21, 28, rollB, 1, 1, 1, 0);		//8
 8001298:	2300      	movs	r3, #0
 800129a:	9304      	str	r3, [sp, #16]
 800129c:	2301      	movs	r3, #1
 800129e:	9303      	str	r3, [sp, #12]
 80012a0:	2301      	movs	r3, #1
 80012a2:	9302      	str	r3, [sp, #8]
 80012a4:	2301      	movs	r3, #1
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	4b52      	ldr	r3, [pc, #328]	@ (80013f4 <main+0x374>)
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	231c      	movs	r3, #28
 80012ae:	2215      	movs	r2, #21
 80012b0:	216e      	movs	r1, #110	@ 0x6e
 80012b2:	2050      	movs	r0, #80	@ 0x50
 80012b4:	f7ff fde8 	bl	8000e88 <LCD_Sprite>
			LCD_Sprite(214, 110, 20, 27, marioB, 1, 1, 0, 0);	//9
 80012b8:	2300      	movs	r3, #0
 80012ba:	9304      	str	r3, [sp, #16]
 80012bc:	2300      	movs	r3, #0
 80012be:	9303      	str	r3, [sp, #12]
 80012c0:	2301      	movs	r3, #1
 80012c2:	9302      	str	r3, [sp, #8]
 80012c4:	2301      	movs	r3, #1
 80012c6:	9301      	str	r3, [sp, #4]
 80012c8:	4b49      	ldr	r3, [pc, #292]	@ (80013f0 <main+0x370>)
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	231b      	movs	r3, #27
 80012ce:	2214      	movs	r2, #20
 80012d0:	216e      	movs	r1, #110	@ 0x6e
 80012d2:	20d6      	movs	r0, #214	@ 0xd6
 80012d4:	f7ff fdd8 	bl	8000e88 <LCD_Sprite>
			FillRect(0, 135, 320, 5, 0xFFFF);
 80012d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	2305      	movs	r3, #5
 80012e0:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80012e4:	2187      	movs	r1, #135	@ 0x87
 80012e6:	2000      	movs	r0, #0
 80012e8:	f7ff fc2e 	bl	8000b48 <FillRect>
			HAL_Delay(7000);
 80012ec:	f641 3058 	movw	r0, #7000	@ 0x1b58
 80012f0:	f004 fdb2 	bl	8005e58 <HAL_Delay>
 80012f4:	e70d      	b.n	8001112 <main+0x92>
		}
		else if(modo==1){
 80012f6:	4b39      	ldr	r3, [pc, #228]	@ (80013dc <main+0x35c>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	f040 808a 	bne.w	8001414 <main+0x394>
			LCD_Clear(0x039D);					//PINTAR TODA LA PANTALLA DE UN COLOR (EN 5R6G5B)
 8001300:	f240 309d 	movw	r0, #925	@ 0x39d
 8001304:	f7ff fbdc 	bl	8000ac0 <LCD_Clear>
			LCD_Bitmap(104, 59, 45, 45, selectorJ1);
 8001308:	4b3b      	ldr	r3, [pc, #236]	@ (80013f8 <main+0x378>)
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	232d      	movs	r3, #45	@ 0x2d
 800130e:	222d      	movs	r2, #45	@ 0x2d
 8001310:	213b      	movs	r1, #59	@ 0x3b
 8001312:	2068      	movs	r0, #104	@ 0x68
 8001314:	f7ff fd5e 	bl	8000dd4 <LCD_Bitmap>
			LCD_Print("MEGAMAN", 100, 105, 1, 0x9FFE, 0x039D);	//LETRAS QUE DICEN "MEGAMAN"
 8001318:	f240 339d 	movw	r3, #925	@ 0x39d
 800131c:	9301      	str	r3, [sp, #4]
 800131e:	f649 73fe 	movw	r3, #40958	@ 0x9ffe
 8001322:	9300      	str	r3, [sp, #0]
 8001324:	2301      	movs	r3, #1
 8001326:	2269      	movs	r2, #105	@ 0x69
 8001328:	2164      	movs	r1, #100	@ 0x64
 800132a:	4834      	ldr	r0, [pc, #208]	@ (80013fc <main+0x37c>)
 800132c:	f7ff fc66 	bl	8000bfc <LCD_Print>
			LCD_Bitmap(104, 127, 45, 45, selector);
 8001330:	4b33      	ldr	r3, [pc, #204]	@ (8001400 <main+0x380>)
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	232d      	movs	r3, #45	@ 0x2d
 8001336:	222d      	movs	r2, #45	@ 0x2d
 8001338:	217f      	movs	r1, #127	@ 0x7f
 800133a:	2068      	movs	r0, #104	@ 0x68
 800133c:	f7ff fd4a 	bl	8000dd4 <LCD_Bitmap>
			LCD_Print("ROLL", 110, 173, 1, 0x9FFE, 0x039D);	//LETRAS QUE DICEN "ELECMAN"
 8001340:	f240 339d 	movw	r3, #925	@ 0x39d
 8001344:	9301      	str	r3, [sp, #4]
 8001346:	f649 73fe 	movw	r3, #40958	@ 0x9ffe
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	2301      	movs	r3, #1
 800134e:	22ad      	movs	r2, #173	@ 0xad
 8001350:	216e      	movs	r1, #110	@ 0x6e
 8001352:	482c      	ldr	r0, [pc, #176]	@ (8001404 <main+0x384>)
 8001354:	f7ff fc52 	bl	8000bfc <LCD_Print>
			LCD_Bitmap(172, 59, 45, 45, selectorJ2);
 8001358:	4b2b      	ldr	r3, [pc, #172]	@ (8001408 <main+0x388>)
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	232d      	movs	r3, #45	@ 0x2d
 800135e:	222d      	movs	r2, #45	@ 0x2d
 8001360:	213b      	movs	r1, #59	@ 0x3b
 8001362:	20ac      	movs	r0, #172	@ 0xac
 8001364:	f7ff fd36 	bl	8000dd4 <LCD_Bitmap>
			LCD_Print("MARIO", 176, 105, 1, 0x9FFE, 0x039D);	//LETRAS QUE DICEN "CUTMAN"
 8001368:	f240 339d 	movw	r3, #925	@ 0x39d
 800136c:	9301      	str	r3, [sp, #4]
 800136e:	f649 73fe 	movw	r3, #40958	@ 0x9ffe
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	2301      	movs	r3, #1
 8001376:	2269      	movs	r2, #105	@ 0x69
 8001378:	21b0      	movs	r1, #176	@ 0xb0
 800137a:	4824      	ldr	r0, [pc, #144]	@ (800140c <main+0x38c>)
 800137c:	f7ff fc3e 	bl	8000bfc <LCD_Print>
			LCD_Bitmap(172, 127, 45, 45, selector);
 8001380:	4b1f      	ldr	r3, [pc, #124]	@ (8001400 <main+0x380>)
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	232d      	movs	r3, #45	@ 0x2d
 8001386:	222d      	movs	r2, #45	@ 0x2d
 8001388:	217f      	movs	r1, #127	@ 0x7f
 800138a:	20ac      	movs	r0, #172	@ 0xac
 800138c:	f7ff fd22 	bl	8000dd4 <LCD_Bitmap>
			LCD_Print("ICEMAN", 171, 173, 1, 0x9FFE, 0x039D);	//LETRAS QUE DICEN "ICEMAN"
 8001390:	f240 339d 	movw	r3, #925	@ 0x39d
 8001394:	9301      	str	r3, [sp, #4]
 8001396:	f649 73fe 	movw	r3, #40958	@ 0x9ffe
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	2301      	movs	r3, #1
 800139e:	22ad      	movs	r2, #173	@ 0xad
 80013a0:	21ab      	movs	r1, #171	@ 0xab
 80013a2:	481b      	ldr	r0, [pc, #108]	@ (8001410 <main+0x390>)
 80013a4:	f7ff fc2a 	bl	8000bfc <LCD_Print>
			modo = 2;
 80013a8:	4b0c      	ldr	r3, [pc, #48]	@ (80013dc <main+0x35c>)
 80013aa:	2202      	movs	r2, #2
 80013ac:	701a      	strb	r2, [r3, #0]
 80013ae:	e6b0      	b.n	8001112 <main+0x92>
 80013b0:	0800965c 	.word	0x0800965c
 80013b4:	20012f24 	.word	0x20012f24
 80013b8:	20013f5c 	.word	0x20013f5c
 80013bc:	20012f08 	.word	0x20012f08
 80013c0:	20014000 	.word	0x20014000
 80013c4:	20014048 	.word	0x20014048
 80013c8:	20012f0c 	.word	0x20012f0c
 80013cc:	20013fb8 	.word	0x20013fb8
 80013d0:	20003578 	.word	0x20003578
 80013d4:	2000e420 	.word	0x2000e420
 80013d8:	08009660 	.word	0x08009660
 80013dc:	20014090 	.word	0x20014090
 80013e0:	20014095 	.word	0x20014095
 80013e4:	2000df6c 	.word	0x2000df6c
 80013e8:	20014096 	.word	0x20014096
 80013ec:	08009664 	.word	0x08009664
 80013f0:	20001f60 	.word	0x20001f60
 80013f4:	20001ac8 	.word	0x20001ac8
 80013f8:	2000aff0 	.word	0x2000aff0
 80013fc:	08009668 	.word	0x08009668
 8001400:	2000a01c 	.word	0x2000a01c
 8001404:	08009670 	.word	0x08009670
 8001408:	2000bfc4 	.word	0x2000bfc4
 800140c:	08009678 	.word	0x08009678
 8001410:	08009680 	.word	0x08009680
		}
		else if(modo==2){
 8001414:	4b9d      	ldr	r3, [pc, #628]	@ (800168c <main+0x60c>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b02      	cmp	r3, #2
 800141a:	f040 833d 	bne.w	8001a98 <main+0xa18>
			//if (chselect1 == 1 && chselect2 == 1){		//SI AMBOS JUGADORES SELECCIONARON PERSONAJE, CAMBIAR DE ESCENA
			if (chselect1 == 1 && chselect2 == 1){		//SI AMBOS JUGADORES SELECCIONARON PERSONAJE, CAMBIAR DE ESCENA
 800141e:	4b9c      	ldr	r3, [pc, #624]	@ (8001690 <main+0x610>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d106      	bne.n	8001434 <main+0x3b4>
 8001426:	4b9b      	ldr	r3, [pc, #620]	@ (8001694 <main+0x614>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d102      	bne.n	8001434 <main+0x3b4>
				modo = 3;
 800142e:	4b97      	ldr	r3, [pc, #604]	@ (800168c <main+0x60c>)
 8001430:	2203      	movs	r2, #3
 8001432:	701a      	strb	r2, [r3, #0]
			}
			HAL_Delay(5);
 8001434:	2005      	movs	r0, #5
 8001436:	f004 fd0f 	bl	8005e58 <HAL_Delay>
			LCD_Bitmap(114, 72, 23, 25, megaman);
 800143a:	4b97      	ldr	r3, [pc, #604]	@ (8001698 <main+0x618>)
 800143c:	9300      	str	r3, [sp, #0]
 800143e:	2319      	movs	r3, #25
 8001440:	2217      	movs	r2, #23
 8001442:	2148      	movs	r1, #72	@ 0x48
 8001444:	2072      	movs	r0, #114	@ 0x72
 8001446:	f7ff fcc5 	bl	8000dd4 <LCD_Bitmap>
			LCD_Bitmap(186, 73, 16, 24, mario);
 800144a:	4b94      	ldr	r3, [pc, #592]	@ (800169c <main+0x61c>)
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	2318      	movs	r3, #24
 8001450:	2210      	movs	r2, #16
 8001452:	2149      	movs	r1, #73	@ 0x49
 8001454:	20ba      	movs	r0, #186	@ 0xba
 8001456:	f7ff fcbd 	bl	8000dd4 <LCD_Bitmap>
			LCD_Bitmap(117, 141, 17, 24, roll);
 800145a:	4b91      	ldr	r3, [pc, #580]	@ (80016a0 <main+0x620>)
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	2318      	movs	r3, #24
 8001460:	2211      	movs	r2, #17
 8001462:	218d      	movs	r1, #141	@ 0x8d
 8001464:	2075      	movs	r0, #117	@ 0x75
 8001466:	f7ff fcb5 	bl	8000dd4 <LCD_Bitmap>
			LCD_Bitmap(182, 141, 24, 24, iceman);
 800146a:	4b8e      	ldr	r3, [pc, #568]	@ (80016a4 <main+0x624>)
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	2318      	movs	r3, #24
 8001470:	2218      	movs	r2, #24
 8001472:	218d      	movs	r1, #141	@ 0x8d
 8001474:	20b6      	movs	r0, #182	@ 0xb6
 8001476:	f7ff fcad 	bl	8000dd4 <LCD_Bitmap>
			//LCD_Bitmap(150, 178, 17, 24, roll);
			//LCD_Bitmap(218, 178, 16, 24, mario);
			//CASILLA MEGAMAN (1,1) J1
			if(selector1x == 1 && selector1y == 1 && change1 == 1){
 800147a:	4b8b      	ldr	r3, [pc, #556]	@ (80016a8 <main+0x628>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d153      	bne.n	800152a <main+0x4aa>
 8001482:	4b8a      	ldr	r3, [pc, #552]	@ (80016ac <main+0x62c>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d14f      	bne.n	800152a <main+0x4aa>
 800148a:	4b89      	ldr	r3, [pc, #548]	@ (80016b0 <main+0x630>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d14b      	bne.n	800152a <main+0x4aa>
				if (selector1xAntiguo == 2 && selector1yAntiguo == 1){		//SI LA CASILLA ANTERIOR EN LA QUE ESTABA EL SELECTOR ERA LA (2,1)
 8001492:	4b88      	ldr	r3, [pc, #544]	@ (80016b4 <main+0x634>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b02      	cmp	r3, #2
 8001498:	d112      	bne.n	80014c0 <main+0x440>
 800149a:	4b87      	ldr	r3, [pc, #540]	@ (80016b8 <main+0x638>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d10e      	bne.n	80014c0 <main+0x440>
					LCD_Bitmap(172, 59, 45, 45, selector);					//REGRESARLA A SU COLOR ORIGINAL
 80014a2:	4b86      	ldr	r3, [pc, #536]	@ (80016bc <main+0x63c>)
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	232d      	movs	r3, #45	@ 0x2d
 80014a8:	222d      	movs	r2, #45	@ 0x2d
 80014aa:	213b      	movs	r1, #59	@ 0x3b
 80014ac:	20ac      	movs	r0, #172	@ 0xac
 80014ae:	f7ff fc91 	bl	8000dd4 <LCD_Bitmap>
					selector1xAntiguo = 0;
 80014b2:	4b80      	ldr	r3, [pc, #512]	@ (80016b4 <main+0x634>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	701a      	strb	r2, [r3, #0]
					selector1yAntiguo = 0;
 80014b8:	4b7f      	ldr	r3, [pc, #508]	@ (80016b8 <main+0x638>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	701a      	strb	r2, [r3, #0]
 80014be:	e015      	b.n	80014ec <main+0x46c>
				}else if (selector1xAntiguo == 1 && selector1yAntiguo == 2){//SI LA CASILLA ANTERIOR EN LA QUE ESTABA EL SELECTOR ERA LA (1,2)
 80014c0:	4b7c      	ldr	r3, [pc, #496]	@ (80016b4 <main+0x634>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d111      	bne.n	80014ec <main+0x46c>
 80014c8:	4b7b      	ldr	r3, [pc, #492]	@ (80016b8 <main+0x638>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d10d      	bne.n	80014ec <main+0x46c>
					LCD_Bitmap(104, 127, 45, 45, selector);					//REGRESARLA A SU COLOR ORIGINAL
 80014d0:	4b7a      	ldr	r3, [pc, #488]	@ (80016bc <main+0x63c>)
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	232d      	movs	r3, #45	@ 0x2d
 80014d6:	222d      	movs	r2, #45	@ 0x2d
 80014d8:	217f      	movs	r1, #127	@ 0x7f
 80014da:	2068      	movs	r0, #104	@ 0x68
 80014dc:	f7ff fc7a 	bl	8000dd4 <LCD_Bitmap>
					selector1xAntiguo = 0;
 80014e0:	4b74      	ldr	r3, [pc, #464]	@ (80016b4 <main+0x634>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	701a      	strb	r2, [r3, #0]
					selector1yAntiguo = 0;
 80014e6:	4b74      	ldr	r3, [pc, #464]	@ (80016b8 <main+0x638>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	701a      	strb	r2, [r3, #0]
				}
				if (chselect1 == 1){
 80014ec:	4b68      	ldr	r3, [pc, #416]	@ (8001690 <main+0x610>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d10e      	bne.n	8001512 <main+0x492>
					LCD_Bitmap(104, 59, 45, 45, selectorS);
 80014f4:	4b72      	ldr	r3, [pc, #456]	@ (80016c0 <main+0x640>)
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	232d      	movs	r3, #45	@ 0x2d
 80014fa:	222d      	movs	r2, #45	@ 0x2d
 80014fc:	213b      	movs	r1, #59	@ 0x3b
 80014fe:	2068      	movs	r0, #104	@ 0x68
 8001500:	f7ff fc68 	bl	8000dd4 <LCD_Bitmap>
					ch1 = 1;										//J2 SELECCIONÓ A MEGAMAN
 8001504:	4b6f      	ldr	r3, [pc, #444]	@ (80016c4 <main+0x644>)
 8001506:	2201      	movs	r2, #1
 8001508:	701a      	strb	r2, [r3, #0]
					change1 = 0;
 800150a:	4b69      	ldr	r3, [pc, #420]	@ (80016b0 <main+0x630>)
 800150c:	2200      	movs	r2, #0
 800150e:	701a      	strb	r2, [r3, #0]
				if (chselect1 == 1){
 8001510:	e133      	b.n	800177a <main+0x6fa>
				}else{
					LCD_Bitmap(104, 59, 45, 45, selectorJ1);
 8001512:	4b6d      	ldr	r3, [pc, #436]	@ (80016c8 <main+0x648>)
 8001514:	9300      	str	r3, [sp, #0]
 8001516:	232d      	movs	r3, #45	@ 0x2d
 8001518:	222d      	movs	r2, #45	@ 0x2d
 800151a:	213b      	movs	r1, #59	@ 0x3b
 800151c:	2068      	movs	r0, #104	@ 0x68
 800151e:	f7ff fc59 	bl	8000dd4 <LCD_Bitmap>
					change1 = 0;
 8001522:	4b63      	ldr	r3, [pc, #396]	@ (80016b0 <main+0x630>)
 8001524:	2200      	movs	r2, #0
 8001526:	701a      	strb	r2, [r3, #0]
				if (chselect1 == 1){
 8001528:	e127      	b.n	800177a <main+0x6fa>
				}
			//CASILLA ROLL (1,2) J1
			}else if(selector1x == 1 && selector1y == 2 && change1 == 1){
 800152a:	4b5f      	ldr	r3, [pc, #380]	@ (80016a8 <main+0x628>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d153      	bne.n	80015da <main+0x55a>
 8001532:	4b5e      	ldr	r3, [pc, #376]	@ (80016ac <main+0x62c>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b02      	cmp	r3, #2
 8001538:	d14f      	bne.n	80015da <main+0x55a>
 800153a:	4b5d      	ldr	r3, [pc, #372]	@ (80016b0 <main+0x630>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d14b      	bne.n	80015da <main+0x55a>
				if (selector1xAntiguo == 1 && selector1yAntiguo == 1){		//SI LA CASILLA ANTERIOR EN LA QUE ESTABA EL SELECTOR ERA LA (1,1)
 8001542:	4b5c      	ldr	r3, [pc, #368]	@ (80016b4 <main+0x634>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d112      	bne.n	8001570 <main+0x4f0>
 800154a:	4b5b      	ldr	r3, [pc, #364]	@ (80016b8 <main+0x638>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d10e      	bne.n	8001570 <main+0x4f0>
					LCD_Bitmap(104, 59, 45, 45, selector);					//REGRESARLA A SU COLOR ORIGINAL
 8001552:	4b5a      	ldr	r3, [pc, #360]	@ (80016bc <main+0x63c>)
 8001554:	9300      	str	r3, [sp, #0]
 8001556:	232d      	movs	r3, #45	@ 0x2d
 8001558:	222d      	movs	r2, #45	@ 0x2d
 800155a:	213b      	movs	r1, #59	@ 0x3b
 800155c:	2068      	movs	r0, #104	@ 0x68
 800155e:	f7ff fc39 	bl	8000dd4 <LCD_Bitmap>
					selector1xAntiguo = 0;
 8001562:	4b54      	ldr	r3, [pc, #336]	@ (80016b4 <main+0x634>)
 8001564:	2200      	movs	r2, #0
 8001566:	701a      	strb	r2, [r3, #0]
					selector1yAntiguo = 0;
 8001568:	4b53      	ldr	r3, [pc, #332]	@ (80016b8 <main+0x638>)
 800156a:	2200      	movs	r2, #0
 800156c:	701a      	strb	r2, [r3, #0]
 800156e:	e015      	b.n	800159c <main+0x51c>
				}else if (selector1xAntiguo == 2 && selector1yAntiguo == 2){//SI LA CASILLA ANTERIOR EN LA QUE ESTABA EL SELECTOR ERA LA (2,2)
 8001570:	4b50      	ldr	r3, [pc, #320]	@ (80016b4 <main+0x634>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b02      	cmp	r3, #2
 8001576:	d111      	bne.n	800159c <main+0x51c>
 8001578:	4b4f      	ldr	r3, [pc, #316]	@ (80016b8 <main+0x638>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b02      	cmp	r3, #2
 800157e:	d10d      	bne.n	800159c <main+0x51c>
					LCD_Bitmap(172, 127, 45, 45, selector);					//REGRESARLA A SU COLOR ORIGINAL
 8001580:	4b4e      	ldr	r3, [pc, #312]	@ (80016bc <main+0x63c>)
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	232d      	movs	r3, #45	@ 0x2d
 8001586:	222d      	movs	r2, #45	@ 0x2d
 8001588:	217f      	movs	r1, #127	@ 0x7f
 800158a:	20ac      	movs	r0, #172	@ 0xac
 800158c:	f7ff fc22 	bl	8000dd4 <LCD_Bitmap>
					selector1xAntiguo = 0;
 8001590:	4b48      	ldr	r3, [pc, #288]	@ (80016b4 <main+0x634>)
 8001592:	2200      	movs	r2, #0
 8001594:	701a      	strb	r2, [r3, #0]
					selector1yAntiguo = 0;
 8001596:	4b48      	ldr	r3, [pc, #288]	@ (80016b8 <main+0x638>)
 8001598:	2200      	movs	r2, #0
 800159a:	701a      	strb	r2, [r3, #0]
				}
				if (chselect1 == 1){
 800159c:	4b3c      	ldr	r3, [pc, #240]	@ (8001690 <main+0x610>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d10e      	bne.n	80015c2 <main+0x542>
					LCD_Bitmap(104, 127, 45, 45, selectorS);
 80015a4:	4b46      	ldr	r3, [pc, #280]	@ (80016c0 <main+0x640>)
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	232d      	movs	r3, #45	@ 0x2d
 80015aa:	222d      	movs	r2, #45	@ 0x2d
 80015ac:	217f      	movs	r1, #127	@ 0x7f
 80015ae:	2068      	movs	r0, #104	@ 0x68
 80015b0:	f7ff fc10 	bl	8000dd4 <LCD_Bitmap>
					ch1 = 8;										//J2 SELECCIONÓ A ELECMAN
 80015b4:	4b43      	ldr	r3, [pc, #268]	@ (80016c4 <main+0x644>)
 80015b6:	2208      	movs	r2, #8
 80015b8:	701a      	strb	r2, [r3, #0]
					change1 = 0;
 80015ba:	4b3d      	ldr	r3, [pc, #244]	@ (80016b0 <main+0x630>)
 80015bc:	2200      	movs	r2, #0
 80015be:	701a      	strb	r2, [r3, #0]
				if (chselect1 == 1){
 80015c0:	e0db      	b.n	800177a <main+0x6fa>
				}else{
					LCD_Bitmap(104, 127, 45, 45, selectorJ1);
 80015c2:	4b41      	ldr	r3, [pc, #260]	@ (80016c8 <main+0x648>)
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	232d      	movs	r3, #45	@ 0x2d
 80015c8:	222d      	movs	r2, #45	@ 0x2d
 80015ca:	217f      	movs	r1, #127	@ 0x7f
 80015cc:	2068      	movs	r0, #104	@ 0x68
 80015ce:	f7ff fc01 	bl	8000dd4 <LCD_Bitmap>
					change1 = 0;
 80015d2:	4b37      	ldr	r3, [pc, #220]	@ (80016b0 <main+0x630>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	701a      	strb	r2, [r3, #0]
				if (chselect1 == 1){
 80015d8:	e0cf      	b.n	800177a <main+0x6fa>
				}
			//CASILLA MARIO (2,1) J1
			}else if(selector1x == 2 && selector1y == 1 && change1 == 1){
 80015da:	4b33      	ldr	r3, [pc, #204]	@ (80016a8 <main+0x628>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d174      	bne.n	80016cc <main+0x64c>
 80015e2:	4b32      	ldr	r3, [pc, #200]	@ (80016ac <main+0x62c>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d170      	bne.n	80016cc <main+0x64c>
 80015ea:	4b31      	ldr	r3, [pc, #196]	@ (80016b0 <main+0x630>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d16c      	bne.n	80016cc <main+0x64c>
				if (selector1xAntiguo == 1 && selector1yAntiguo == 1){		//SI LA CASILLA ANTERIOR EN LA QUE ESTABA EL SELECTOR ERA LA (1,1)
 80015f2:	4b30      	ldr	r3, [pc, #192]	@ (80016b4 <main+0x634>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d112      	bne.n	8001620 <main+0x5a0>
 80015fa:	4b2f      	ldr	r3, [pc, #188]	@ (80016b8 <main+0x638>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d10e      	bne.n	8001620 <main+0x5a0>
					LCD_Bitmap(104, 59, 45, 45, selector);					//REGRESARLA A SU COLOR ORIGINAL
 8001602:	4b2e      	ldr	r3, [pc, #184]	@ (80016bc <main+0x63c>)
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	232d      	movs	r3, #45	@ 0x2d
 8001608:	222d      	movs	r2, #45	@ 0x2d
 800160a:	213b      	movs	r1, #59	@ 0x3b
 800160c:	2068      	movs	r0, #104	@ 0x68
 800160e:	f7ff fbe1 	bl	8000dd4 <LCD_Bitmap>
					selector1xAntiguo = 0;
 8001612:	4b28      	ldr	r3, [pc, #160]	@ (80016b4 <main+0x634>)
 8001614:	2200      	movs	r2, #0
 8001616:	701a      	strb	r2, [r3, #0]
					selector1yAntiguo = 0;
 8001618:	4b27      	ldr	r3, [pc, #156]	@ (80016b8 <main+0x638>)
 800161a:	2200      	movs	r2, #0
 800161c:	701a      	strb	r2, [r3, #0]
 800161e:	e015      	b.n	800164c <main+0x5cc>
				}else if (selector1xAntiguo == 2 && selector1yAntiguo == 2){//SI LA CASILLA ANTERIOR EN LA QUE ESTABA EL SELECTOR ERA LA (2,2)
 8001620:	4b24      	ldr	r3, [pc, #144]	@ (80016b4 <main+0x634>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b02      	cmp	r3, #2
 8001626:	d111      	bne.n	800164c <main+0x5cc>
 8001628:	4b23      	ldr	r3, [pc, #140]	@ (80016b8 <main+0x638>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b02      	cmp	r3, #2
 800162e:	d10d      	bne.n	800164c <main+0x5cc>
					LCD_Bitmap(172, 127, 45, 45, selector);					//REGRESARLA A SU COLOR ORIGINAL
 8001630:	4b22      	ldr	r3, [pc, #136]	@ (80016bc <main+0x63c>)
 8001632:	9300      	str	r3, [sp, #0]
 8001634:	232d      	movs	r3, #45	@ 0x2d
 8001636:	222d      	movs	r2, #45	@ 0x2d
 8001638:	217f      	movs	r1, #127	@ 0x7f
 800163a:	20ac      	movs	r0, #172	@ 0xac
 800163c:	f7ff fbca 	bl	8000dd4 <LCD_Bitmap>
					selector1xAntiguo = 0;
 8001640:	4b1c      	ldr	r3, [pc, #112]	@ (80016b4 <main+0x634>)
 8001642:	2200      	movs	r2, #0
 8001644:	701a      	strb	r2, [r3, #0]
					selector1yAntiguo = 0;
 8001646:	4b1c      	ldr	r3, [pc, #112]	@ (80016b8 <main+0x638>)
 8001648:	2200      	movs	r2, #0
 800164a:	701a      	strb	r2, [r3, #0]
				}
				if (chselect1 == 1){
 800164c:	4b10      	ldr	r3, [pc, #64]	@ (8001690 <main+0x610>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d10e      	bne.n	8001672 <main+0x5f2>
					LCD_Bitmap(172, 59, 45, 45, selectorS);
 8001654:	4b1a      	ldr	r3, [pc, #104]	@ (80016c0 <main+0x640>)
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	232d      	movs	r3, #45	@ 0x2d
 800165a:	222d      	movs	r2, #45	@ 0x2d
 800165c:	213b      	movs	r1, #59	@ 0x3b
 800165e:	20ac      	movs	r0, #172	@ 0xac
 8001660:	f7ff fbb8 	bl	8000dd4 <LCD_Bitmap>
					ch1 = 9;										//J2 SELECCIONÓ A ELECMAN
 8001664:	4b17      	ldr	r3, [pc, #92]	@ (80016c4 <main+0x644>)
 8001666:	2209      	movs	r2, #9
 8001668:	701a      	strb	r2, [r3, #0]
					change1 = 0;
 800166a:	4b11      	ldr	r3, [pc, #68]	@ (80016b0 <main+0x630>)
 800166c:	2200      	movs	r2, #0
 800166e:	701a      	strb	r2, [r3, #0]
				if (chselect1 == 1){
 8001670:	e083      	b.n	800177a <main+0x6fa>
				}else{
					LCD_Bitmap(172, 59, 45, 45, selectorJ1);
 8001672:	4b15      	ldr	r3, [pc, #84]	@ (80016c8 <main+0x648>)
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	232d      	movs	r3, #45	@ 0x2d
 8001678:	222d      	movs	r2, #45	@ 0x2d
 800167a:	213b      	movs	r1, #59	@ 0x3b
 800167c:	20ac      	movs	r0, #172	@ 0xac
 800167e:	f7ff fba9 	bl	8000dd4 <LCD_Bitmap>
					change1 = 0;
 8001682:	4b0b      	ldr	r3, [pc, #44]	@ (80016b0 <main+0x630>)
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]
				if (chselect1 == 1){
 8001688:	e077      	b.n	800177a <main+0x6fa>
 800168a:	bf00      	nop
 800168c:	20014090 	.word	0x20014090
 8001690:	20014099 	.word	0x20014099
 8001694:	2001409d 	.word	0x2001409d
 8001698:	20000000 	.word	0x20000000
 800169c:	20000c30 	.word	0x20000c30
 80016a0:	20000900 	.word	0x20000900
 80016a4:	20000480 	.word	0x20000480
 80016a8:	20012e2a 	.word	0x20012e2a
 80016ac:	20012e2b 	.word	0x20012e2b
 80016b0:	20012e2c 	.word	0x20012e2c
 80016b4:	20014097 	.word	0x20014097
 80016b8:	20014098 	.word	0x20014098
 80016bc:	2000a01c 	.word	0x2000a01c
 80016c0:	2000cf98 	.word	0x2000cf98
 80016c4:	2001409a 	.word	0x2001409a
 80016c8:	2000aff0 	.word	0x2000aff0
				}
			//CASILLA ICEMAN (2,2) J1
			}else if(selector1x == 2 && selector1y == 2 && change1 == 1){
 80016cc:	4b96      	ldr	r3, [pc, #600]	@ (8001928 <main+0x8a8>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d152      	bne.n	800177a <main+0x6fa>
 80016d4:	4b95      	ldr	r3, [pc, #596]	@ (800192c <main+0x8ac>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d14e      	bne.n	800177a <main+0x6fa>
 80016dc:	4b94      	ldr	r3, [pc, #592]	@ (8001930 <main+0x8b0>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d14a      	bne.n	800177a <main+0x6fa>
				if (selector1xAntiguo == 2 && selector1yAntiguo == 1){		//SI LA CASILLA ANTERIOR EN LA QUE ESTABA EL SELECTOR ERA LA (1,1)
 80016e4:	4b93      	ldr	r3, [pc, #588]	@ (8001934 <main+0x8b4>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d112      	bne.n	8001712 <main+0x692>
 80016ec:	4b92      	ldr	r3, [pc, #584]	@ (8001938 <main+0x8b8>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d10e      	bne.n	8001712 <main+0x692>
					LCD_Bitmap(172, 59, 45, 45, selector);					//REGRESARLA A SU COLOR ORIGINAL
 80016f4:	4b91      	ldr	r3, [pc, #580]	@ (800193c <main+0x8bc>)
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	232d      	movs	r3, #45	@ 0x2d
 80016fa:	222d      	movs	r2, #45	@ 0x2d
 80016fc:	213b      	movs	r1, #59	@ 0x3b
 80016fe:	20ac      	movs	r0, #172	@ 0xac
 8001700:	f7ff fb68 	bl	8000dd4 <LCD_Bitmap>
					selector1xAntiguo = 0;
 8001704:	4b8b      	ldr	r3, [pc, #556]	@ (8001934 <main+0x8b4>)
 8001706:	2200      	movs	r2, #0
 8001708:	701a      	strb	r2, [r3, #0]
					selector1yAntiguo = 0;
 800170a:	4b8b      	ldr	r3, [pc, #556]	@ (8001938 <main+0x8b8>)
 800170c:	2200      	movs	r2, #0
 800170e:	701a      	strb	r2, [r3, #0]
 8001710:	e015      	b.n	800173e <main+0x6be>
				}else if (selector1xAntiguo == 1 && selector1yAntiguo == 2){//SI LA CASILLA ANTERIOR EN LA QUE ESTABA EL SELECTOR ERA LA (2,2)
 8001712:	4b88      	ldr	r3, [pc, #544]	@ (8001934 <main+0x8b4>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d111      	bne.n	800173e <main+0x6be>
 800171a:	4b87      	ldr	r3, [pc, #540]	@ (8001938 <main+0x8b8>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b02      	cmp	r3, #2
 8001720:	d10d      	bne.n	800173e <main+0x6be>
					LCD_Bitmap(104, 127, 45, 45, selector);					//REGRESARLA A SU COLOR ORIGINAL
 8001722:	4b86      	ldr	r3, [pc, #536]	@ (800193c <main+0x8bc>)
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	232d      	movs	r3, #45	@ 0x2d
 8001728:	222d      	movs	r2, #45	@ 0x2d
 800172a:	217f      	movs	r1, #127	@ 0x7f
 800172c:	2068      	movs	r0, #104	@ 0x68
 800172e:	f7ff fb51 	bl	8000dd4 <LCD_Bitmap>
					selector1xAntiguo = 0;
 8001732:	4b80      	ldr	r3, [pc, #512]	@ (8001934 <main+0x8b4>)
 8001734:	2200      	movs	r2, #0
 8001736:	701a      	strb	r2, [r3, #0]
					selector1yAntiguo = 0;
 8001738:	4b7f      	ldr	r3, [pc, #508]	@ (8001938 <main+0x8b8>)
 800173a:	2200      	movs	r2, #0
 800173c:	701a      	strb	r2, [r3, #0]
				}
				if (chselect1 == 1){
 800173e:	4b80      	ldr	r3, [pc, #512]	@ (8001940 <main+0x8c0>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d10e      	bne.n	8001764 <main+0x6e4>
					LCD_Bitmap(172, 127, 45, 45, selectorS);
 8001746:	4b7f      	ldr	r3, [pc, #508]	@ (8001944 <main+0x8c4>)
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	232d      	movs	r3, #45	@ 0x2d
 800174c:	222d      	movs	r2, #45	@ 0x2d
 800174e:	217f      	movs	r1, #127	@ 0x7f
 8001750:	20ac      	movs	r0, #172	@ 0xac
 8001752:	f7ff fb3f 	bl	8000dd4 <LCD_Bitmap>
					ch1 = 5;										//J2 SELECCIONÓ A ELECMAN
 8001756:	4b7c      	ldr	r3, [pc, #496]	@ (8001948 <main+0x8c8>)
 8001758:	2205      	movs	r2, #5
 800175a:	701a      	strb	r2, [r3, #0]
					change1 = 0;
 800175c:	4b74      	ldr	r3, [pc, #464]	@ (8001930 <main+0x8b0>)
 800175e:	2200      	movs	r2, #0
 8001760:	701a      	strb	r2, [r3, #0]
 8001762:	e00a      	b.n	800177a <main+0x6fa>
				}else{
					LCD_Bitmap(172, 127, 45, 45, selectorJ1);
 8001764:	4b79      	ldr	r3, [pc, #484]	@ (800194c <main+0x8cc>)
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	232d      	movs	r3, #45	@ 0x2d
 800176a:	222d      	movs	r2, #45	@ 0x2d
 800176c:	217f      	movs	r1, #127	@ 0x7f
 800176e:	20ac      	movs	r0, #172	@ 0xac
 8001770:	f7ff fb30 	bl	8000dd4 <LCD_Bitmap>
					change1 = 0;
 8001774:	4b6e      	ldr	r3, [pc, #440]	@ (8001930 <main+0x8b0>)
 8001776:	2200      	movs	r2, #0
 8001778:	701a      	strb	r2, [r3, #0]
				}
			}
			//CASILLA MEGAMAN (1,1) J2
			if(selector2x == 1 && selector2y == 1 && change2 == 1){
 800177a:	4b75      	ldr	r3, [pc, #468]	@ (8001950 <main+0x8d0>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d155      	bne.n	800182e <main+0x7ae>
 8001782:	4b74      	ldr	r3, [pc, #464]	@ (8001954 <main+0x8d4>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d151      	bne.n	800182e <main+0x7ae>
 800178a:	4b73      	ldr	r3, [pc, #460]	@ (8001958 <main+0x8d8>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d14d      	bne.n	800182e <main+0x7ae>
				if (selector2xAntiguo == 2 && selector2yAntiguo == 1){		//SI LA CASILLA ANTERIOR EN LA QUE ESTABA EL SELECTOR ERA LA (2,1)
 8001792:	4b72      	ldr	r3, [pc, #456]	@ (800195c <main+0x8dc>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b02      	cmp	r3, #2
 8001798:	d112      	bne.n	80017c0 <main+0x740>
 800179a:	4b71      	ldr	r3, [pc, #452]	@ (8001960 <main+0x8e0>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d10e      	bne.n	80017c0 <main+0x740>
					LCD_Bitmap(172, 59, 45, 45, selector);					//REGRESARLA A SU COLOR ORIGINAL
 80017a2:	4b66      	ldr	r3, [pc, #408]	@ (800193c <main+0x8bc>)
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	232d      	movs	r3, #45	@ 0x2d
 80017a8:	222d      	movs	r2, #45	@ 0x2d
 80017aa:	213b      	movs	r1, #59	@ 0x3b
 80017ac:	20ac      	movs	r0, #172	@ 0xac
 80017ae:	f7ff fb11 	bl	8000dd4 <LCD_Bitmap>
					selector2xAntiguo = 0;
 80017b2:	4b6a      	ldr	r3, [pc, #424]	@ (800195c <main+0x8dc>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]
					selector2yAntiguo = 0;
 80017b8:	4b69      	ldr	r3, [pc, #420]	@ (8001960 <main+0x8e0>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	701a      	strb	r2, [r3, #0]
 80017be:	e015      	b.n	80017ec <main+0x76c>
				}else if (selector2xAntiguo == 1 && selector2yAntiguo == 2){//SI LA CASILLA ANTERIOR EN LA QUE ESTABA EL SELECTOR ERA LA (1,2)
 80017c0:	4b66      	ldr	r3, [pc, #408]	@ (800195c <main+0x8dc>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d111      	bne.n	80017ec <main+0x76c>
 80017c8:	4b65      	ldr	r3, [pc, #404]	@ (8001960 <main+0x8e0>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d10d      	bne.n	80017ec <main+0x76c>
					LCD_Bitmap(104, 127, 45, 45, selector);					//REGRESARLA A SU COLOR ORIGINAL
 80017d0:	4b5a      	ldr	r3, [pc, #360]	@ (800193c <main+0x8bc>)
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	232d      	movs	r3, #45	@ 0x2d
 80017d6:	222d      	movs	r2, #45	@ 0x2d
 80017d8:	217f      	movs	r1, #127	@ 0x7f
 80017da:	2068      	movs	r0, #104	@ 0x68
 80017dc:	f7ff fafa 	bl	8000dd4 <LCD_Bitmap>
					selector2xAntiguo = 0;
 80017e0:	4b5e      	ldr	r3, [pc, #376]	@ (800195c <main+0x8dc>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]
					selector2yAntiguo = 0;
 80017e6:	4b5e      	ldr	r3, [pc, #376]	@ (8001960 <main+0x8e0>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	701a      	strb	r2, [r3, #0]
				}
				if (chselect2 == 1){
 80017ec:	4b5d      	ldr	r3, [pc, #372]	@ (8001964 <main+0x8e4>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d10f      	bne.n	8001814 <main+0x794>
					LCD_Bitmap(104, 59, 45, 45, selectorS);
 80017f4:	4b53      	ldr	r3, [pc, #332]	@ (8001944 <main+0x8c4>)
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	232d      	movs	r3, #45	@ 0x2d
 80017fa:	222d      	movs	r2, #45	@ 0x2d
 80017fc:	213b      	movs	r1, #59	@ 0x3b
 80017fe:	2068      	movs	r0, #104	@ 0x68
 8001800:	f7ff fae8 	bl	8000dd4 <LCD_Bitmap>
					ch2 = 1;										//J2 SELECCIONÓ A MEGAMAN
 8001804:	4b58      	ldr	r3, [pc, #352]	@ (8001968 <main+0x8e8>)
 8001806:	2201      	movs	r2, #1
 8001808:	701a      	strb	r2, [r3, #0]
					change2 = 0;
 800180a:	4b53      	ldr	r3, [pc, #332]	@ (8001958 <main+0x8d8>)
 800180c:	2200      	movs	r2, #0
 800180e:	701a      	strb	r2, [r3, #0]
				if (chselect2 == 1){
 8001810:	f000 be33 	b.w	800247a <main+0x13fa>
				}else{
					LCD_Bitmap(104, 59, 45, 45, selectorJ2);
 8001814:	4b55      	ldr	r3, [pc, #340]	@ (800196c <main+0x8ec>)
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	232d      	movs	r3, #45	@ 0x2d
 800181a:	222d      	movs	r2, #45	@ 0x2d
 800181c:	213b      	movs	r1, #59	@ 0x3b
 800181e:	2068      	movs	r0, #104	@ 0x68
 8001820:	f7ff fad8 	bl	8000dd4 <LCD_Bitmap>
					change2 = 0;
 8001824:	4b4c      	ldr	r3, [pc, #304]	@ (8001958 <main+0x8d8>)
 8001826:	2200      	movs	r2, #0
 8001828:	701a      	strb	r2, [r3, #0]
				if (chselect2 == 1){
 800182a:	f000 be26 	b.w	800247a <main+0x13fa>
				}
				//CASILLA ROLL (1,2) J2
				}else if(selector2x == 1 && selector2y == 2 && change2 == 1){
 800182e:	4b48      	ldr	r3, [pc, #288]	@ (8001950 <main+0x8d0>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d155      	bne.n	80018e2 <main+0x862>
 8001836:	4b47      	ldr	r3, [pc, #284]	@ (8001954 <main+0x8d4>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	2b02      	cmp	r3, #2
 800183c:	d151      	bne.n	80018e2 <main+0x862>
 800183e:	4b46      	ldr	r3, [pc, #280]	@ (8001958 <main+0x8d8>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d14d      	bne.n	80018e2 <main+0x862>
					if (selector2xAntiguo == 1 && selector2yAntiguo == 1){		//SI LA CASILLA ANTERIOR EN LA QUE ESTABA EL SELECTOR ERA LA (1,1)
 8001846:	4b45      	ldr	r3, [pc, #276]	@ (800195c <main+0x8dc>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d112      	bne.n	8001874 <main+0x7f4>
 800184e:	4b44      	ldr	r3, [pc, #272]	@ (8001960 <main+0x8e0>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d10e      	bne.n	8001874 <main+0x7f4>
						LCD_Bitmap(104, 59, 45, 45, selector);					//REGRESARLA A SU COLOR ORIGINAL
 8001856:	4b39      	ldr	r3, [pc, #228]	@ (800193c <main+0x8bc>)
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	232d      	movs	r3, #45	@ 0x2d
 800185c:	222d      	movs	r2, #45	@ 0x2d
 800185e:	213b      	movs	r1, #59	@ 0x3b
 8001860:	2068      	movs	r0, #104	@ 0x68
 8001862:	f7ff fab7 	bl	8000dd4 <LCD_Bitmap>
						selector2xAntiguo = 0;
 8001866:	4b3d      	ldr	r3, [pc, #244]	@ (800195c <main+0x8dc>)
 8001868:	2200      	movs	r2, #0
 800186a:	701a      	strb	r2, [r3, #0]
						selector2yAntiguo = 0;
 800186c:	4b3c      	ldr	r3, [pc, #240]	@ (8001960 <main+0x8e0>)
 800186e:	2200      	movs	r2, #0
 8001870:	701a      	strb	r2, [r3, #0]
 8001872:	e015      	b.n	80018a0 <main+0x820>
					}else if (selector2xAntiguo == 2 && selector2yAntiguo == 2){//SI LA CASILLA ANTERIOR EN LA QUE ESTABA EL SELECTOR ERA LA (2,2)
 8001874:	4b39      	ldr	r3, [pc, #228]	@ (800195c <main+0x8dc>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b02      	cmp	r3, #2
 800187a:	d111      	bne.n	80018a0 <main+0x820>
 800187c:	4b38      	ldr	r3, [pc, #224]	@ (8001960 <main+0x8e0>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b02      	cmp	r3, #2
 8001882:	d10d      	bne.n	80018a0 <main+0x820>
						LCD_Bitmap(172, 127, 45, 45, selector);					//REGRESARLA A SU COLOR ORIGINAL
 8001884:	4b2d      	ldr	r3, [pc, #180]	@ (800193c <main+0x8bc>)
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	232d      	movs	r3, #45	@ 0x2d
 800188a:	222d      	movs	r2, #45	@ 0x2d
 800188c:	217f      	movs	r1, #127	@ 0x7f
 800188e:	20ac      	movs	r0, #172	@ 0xac
 8001890:	f7ff faa0 	bl	8000dd4 <LCD_Bitmap>
						selector2xAntiguo = 0;
 8001894:	4b31      	ldr	r3, [pc, #196]	@ (800195c <main+0x8dc>)
 8001896:	2200      	movs	r2, #0
 8001898:	701a      	strb	r2, [r3, #0]
						selector2yAntiguo = 0;
 800189a:	4b31      	ldr	r3, [pc, #196]	@ (8001960 <main+0x8e0>)
 800189c:	2200      	movs	r2, #0
 800189e:	701a      	strb	r2, [r3, #0]
					}
					if (chselect2 == 1){
 80018a0:	4b30      	ldr	r3, [pc, #192]	@ (8001964 <main+0x8e4>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d10f      	bne.n	80018c8 <main+0x848>
						LCD_Bitmap(104, 127, 45, 45, selectorS);
 80018a8:	4b26      	ldr	r3, [pc, #152]	@ (8001944 <main+0x8c4>)
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	232d      	movs	r3, #45	@ 0x2d
 80018ae:	222d      	movs	r2, #45	@ 0x2d
 80018b0:	217f      	movs	r1, #127	@ 0x7f
 80018b2:	2068      	movs	r0, #104	@ 0x68
 80018b4:	f7ff fa8e 	bl	8000dd4 <LCD_Bitmap>
						ch2 = 8;										//J2 SELECCIONÓ A ELECMAN
 80018b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001968 <main+0x8e8>)
 80018ba:	2208      	movs	r2, #8
 80018bc:	701a      	strb	r2, [r3, #0]
						change2 = 0;
 80018be:	4b26      	ldr	r3, [pc, #152]	@ (8001958 <main+0x8d8>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	701a      	strb	r2, [r3, #0]
					if (chselect2 == 1){
 80018c4:	f000 bdd9 	b.w	800247a <main+0x13fa>
					}else{
						LCD_Bitmap(104, 127, 45, 45, selectorJ2);
 80018c8:	4b28      	ldr	r3, [pc, #160]	@ (800196c <main+0x8ec>)
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	232d      	movs	r3, #45	@ 0x2d
 80018ce:	222d      	movs	r2, #45	@ 0x2d
 80018d0:	217f      	movs	r1, #127	@ 0x7f
 80018d2:	2068      	movs	r0, #104	@ 0x68
 80018d4:	f7ff fa7e 	bl	8000dd4 <LCD_Bitmap>
						change2 = 0;
 80018d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001958 <main+0x8d8>)
 80018da:	2200      	movs	r2, #0
 80018dc:	701a      	strb	r2, [r3, #0]
					if (chselect2 == 1){
 80018de:	f000 bdcc 	b.w	800247a <main+0x13fa>
					}
				//CASILLA MARIO (2,1) J2
				}else if(selector2x == 2 && selector2y == 1 && change2 == 1){
 80018e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001950 <main+0x8d0>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d179      	bne.n	80019de <main+0x95e>
 80018ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001954 <main+0x8d4>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d175      	bne.n	80019de <main+0x95e>
 80018f2:	4b19      	ldr	r3, [pc, #100]	@ (8001958 <main+0x8d8>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d171      	bne.n	80019de <main+0x95e>
					if (selector2xAntiguo == 1 && selector2yAntiguo == 1){		//SI LA CASILLA ANTERIOR EN LA QUE ESTABA EL SELECTOR ERA LA (1,1)
 80018fa:	4b18      	ldr	r3, [pc, #96]	@ (800195c <main+0x8dc>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d136      	bne.n	8001970 <main+0x8f0>
 8001902:	4b17      	ldr	r3, [pc, #92]	@ (8001960 <main+0x8e0>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d132      	bne.n	8001970 <main+0x8f0>
						LCD_Bitmap(104, 59, 45, 45, selector);					//REGRESARLA A SU COLOR ORIGINAL
 800190a:	4b0c      	ldr	r3, [pc, #48]	@ (800193c <main+0x8bc>)
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	232d      	movs	r3, #45	@ 0x2d
 8001910:	222d      	movs	r2, #45	@ 0x2d
 8001912:	213b      	movs	r1, #59	@ 0x3b
 8001914:	2068      	movs	r0, #104	@ 0x68
 8001916:	f7ff fa5d 	bl	8000dd4 <LCD_Bitmap>
						selector2xAntiguo = 0;
 800191a:	4b10      	ldr	r3, [pc, #64]	@ (800195c <main+0x8dc>)
 800191c:	2200      	movs	r2, #0
 800191e:	701a      	strb	r2, [r3, #0]
						selector2yAntiguo = 0;
 8001920:	4b0f      	ldr	r3, [pc, #60]	@ (8001960 <main+0x8e0>)
 8001922:	2200      	movs	r2, #0
 8001924:	701a      	strb	r2, [r3, #0]
 8001926:	e039      	b.n	800199c <main+0x91c>
 8001928:	20012e2a 	.word	0x20012e2a
 800192c:	20012e2b 	.word	0x20012e2b
 8001930:	20012e2c 	.word	0x20012e2c
 8001934:	20014097 	.word	0x20014097
 8001938:	20014098 	.word	0x20014098
 800193c:	2000a01c 	.word	0x2000a01c
 8001940:	20014099 	.word	0x20014099
 8001944:	2000cf98 	.word	0x2000cf98
 8001948:	2001409a 	.word	0x2001409a
 800194c:	2000aff0 	.word	0x2000aff0
 8001950:	20012e2d 	.word	0x20012e2d
 8001954:	20012e2e 	.word	0x20012e2e
 8001958:	20012e2f 	.word	0x20012e2f
 800195c:	2001409b 	.word	0x2001409b
 8001960:	2001409c 	.word	0x2001409c
 8001964:	2001409d 	.word	0x2001409d
 8001968:	2001409e 	.word	0x2001409e
 800196c:	2000bfc4 	.word	0x2000bfc4
					}else if (selector2xAntiguo == 2 && selector2yAntiguo == 2){//SI LA CASILLA ANTERIOR EN LA QUE ESTABA EL SELECTOR ERA LA (2,2)
 8001970:	4b9e      	ldr	r3, [pc, #632]	@ (8001bec <main+0xb6c>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b02      	cmp	r3, #2
 8001976:	d111      	bne.n	800199c <main+0x91c>
 8001978:	4b9d      	ldr	r3, [pc, #628]	@ (8001bf0 <main+0xb70>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b02      	cmp	r3, #2
 800197e:	d10d      	bne.n	800199c <main+0x91c>
						LCD_Bitmap(172, 127, 45, 45, selector);					//REGRESARLA A SU COLOR ORIGINAL
 8001980:	4b9c      	ldr	r3, [pc, #624]	@ (8001bf4 <main+0xb74>)
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	232d      	movs	r3, #45	@ 0x2d
 8001986:	222d      	movs	r2, #45	@ 0x2d
 8001988:	217f      	movs	r1, #127	@ 0x7f
 800198a:	20ac      	movs	r0, #172	@ 0xac
 800198c:	f7ff fa22 	bl	8000dd4 <LCD_Bitmap>
						selector2xAntiguo = 0;
 8001990:	4b96      	ldr	r3, [pc, #600]	@ (8001bec <main+0xb6c>)
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
						selector2yAntiguo = 0;
 8001996:	4b96      	ldr	r3, [pc, #600]	@ (8001bf0 <main+0xb70>)
 8001998:	2200      	movs	r2, #0
 800199a:	701a      	strb	r2, [r3, #0]
					}
					if (chselect2 == 1){
 800199c:	4b96      	ldr	r3, [pc, #600]	@ (8001bf8 <main+0xb78>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d10f      	bne.n	80019c4 <main+0x944>
						LCD_Bitmap(172, 59, 45, 45, selectorS);
 80019a4:	4b95      	ldr	r3, [pc, #596]	@ (8001bfc <main+0xb7c>)
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	232d      	movs	r3, #45	@ 0x2d
 80019aa:	222d      	movs	r2, #45	@ 0x2d
 80019ac:	213b      	movs	r1, #59	@ 0x3b
 80019ae:	20ac      	movs	r0, #172	@ 0xac
 80019b0:	f7ff fa10 	bl	8000dd4 <LCD_Bitmap>
						ch2 = 9;										//J2 SELECCIONÓ A ELECMAN
 80019b4:	4b92      	ldr	r3, [pc, #584]	@ (8001c00 <main+0xb80>)
 80019b6:	2209      	movs	r2, #9
 80019b8:	701a      	strb	r2, [r3, #0]
						change2 = 0;
 80019ba:	4b92      	ldr	r3, [pc, #584]	@ (8001c04 <main+0xb84>)
 80019bc:	2200      	movs	r2, #0
 80019be:	701a      	strb	r2, [r3, #0]
					if (chselect2 == 1){
 80019c0:	f000 bd5b 	b.w	800247a <main+0x13fa>
					}else{
						LCD_Bitmap(172, 59, 45, 45, selectorJ2);
 80019c4:	4b90      	ldr	r3, [pc, #576]	@ (8001c08 <main+0xb88>)
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	232d      	movs	r3, #45	@ 0x2d
 80019ca:	222d      	movs	r2, #45	@ 0x2d
 80019cc:	213b      	movs	r1, #59	@ 0x3b
 80019ce:	20ac      	movs	r0, #172	@ 0xac
 80019d0:	f7ff fa00 	bl	8000dd4 <LCD_Bitmap>
						change2 = 0;
 80019d4:	4b8b      	ldr	r3, [pc, #556]	@ (8001c04 <main+0xb84>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	701a      	strb	r2, [r3, #0]
					if (chselect2 == 1){
 80019da:	f000 bd4e 	b.w	800247a <main+0x13fa>
					}
				//CASILLA ICEMAN (2,2) J2
				}else if(selector2x == 2 && selector2y == 2 && change2 == 1){
 80019de:	4b8b      	ldr	r3, [pc, #556]	@ (8001c0c <main+0xb8c>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	f47f ab95 	bne.w	8001112 <main+0x92>
 80019e8:	4b89      	ldr	r3, [pc, #548]	@ (8001c10 <main+0xb90>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	f47f ab90 	bne.w	8001112 <main+0x92>
 80019f2:	4b84      	ldr	r3, [pc, #528]	@ (8001c04 <main+0xb84>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	f47f ab8b 	bne.w	8001112 <main+0x92>
					if (selector2xAntiguo == 2 && selector2yAntiguo == 1){		//SI LA CASILLA ANTERIOR EN LA QUE ESTABA EL SELECTOR ERA LA (1,1)
 80019fc:	4b7b      	ldr	r3, [pc, #492]	@ (8001bec <main+0xb6c>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d112      	bne.n	8001a2a <main+0x9aa>
 8001a04:	4b7a      	ldr	r3, [pc, #488]	@ (8001bf0 <main+0xb70>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d10e      	bne.n	8001a2a <main+0x9aa>
						LCD_Bitmap(172, 59, 45, 45, selector);					//REGRESARLA A SU COLOR ORIGINAL
 8001a0c:	4b79      	ldr	r3, [pc, #484]	@ (8001bf4 <main+0xb74>)
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	232d      	movs	r3, #45	@ 0x2d
 8001a12:	222d      	movs	r2, #45	@ 0x2d
 8001a14:	213b      	movs	r1, #59	@ 0x3b
 8001a16:	20ac      	movs	r0, #172	@ 0xac
 8001a18:	f7ff f9dc 	bl	8000dd4 <LCD_Bitmap>
						selector2xAntiguo = 0;
 8001a1c:	4b73      	ldr	r3, [pc, #460]	@ (8001bec <main+0xb6c>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	701a      	strb	r2, [r3, #0]
						selector2yAntiguo = 0;
 8001a22:	4b73      	ldr	r3, [pc, #460]	@ (8001bf0 <main+0xb70>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]
 8001a28:	e015      	b.n	8001a56 <main+0x9d6>
					}else if (selector2xAntiguo == 1 && selector2yAntiguo == 2){//SI LA CASILLA ANTERIOR EN LA QUE ESTABA EL SELECTOR ERA LA (2,2)
 8001a2a:	4b70      	ldr	r3, [pc, #448]	@ (8001bec <main+0xb6c>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d111      	bne.n	8001a56 <main+0x9d6>
 8001a32:	4b6f      	ldr	r3, [pc, #444]	@ (8001bf0 <main+0xb70>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d10d      	bne.n	8001a56 <main+0x9d6>
						LCD_Bitmap(104, 127, 45, 45, selector);					//REGRESARLA A SU COLOR ORIGINAL
 8001a3a:	4b6e      	ldr	r3, [pc, #440]	@ (8001bf4 <main+0xb74>)
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	232d      	movs	r3, #45	@ 0x2d
 8001a40:	222d      	movs	r2, #45	@ 0x2d
 8001a42:	217f      	movs	r1, #127	@ 0x7f
 8001a44:	2068      	movs	r0, #104	@ 0x68
 8001a46:	f7ff f9c5 	bl	8000dd4 <LCD_Bitmap>
						selector2xAntiguo = 0;
 8001a4a:	4b68      	ldr	r3, [pc, #416]	@ (8001bec <main+0xb6c>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	701a      	strb	r2, [r3, #0]
						selector2yAntiguo = 0;
 8001a50:	4b67      	ldr	r3, [pc, #412]	@ (8001bf0 <main+0xb70>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	701a      	strb	r2, [r3, #0]
					}
					if (chselect2 == 1){
 8001a56:	4b68      	ldr	r3, [pc, #416]	@ (8001bf8 <main+0xb78>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d10f      	bne.n	8001a7e <main+0x9fe>
						LCD_Bitmap(172, 127, 45, 45, selectorS);
 8001a5e:	4b67      	ldr	r3, [pc, #412]	@ (8001bfc <main+0xb7c>)
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	232d      	movs	r3, #45	@ 0x2d
 8001a64:	222d      	movs	r2, #45	@ 0x2d
 8001a66:	217f      	movs	r1, #127	@ 0x7f
 8001a68:	20ac      	movs	r0, #172	@ 0xac
 8001a6a:	f7ff f9b3 	bl	8000dd4 <LCD_Bitmap>
						ch2 = 5;										//J2 SELECCIONÓ A ELECMAN
 8001a6e:	4b64      	ldr	r3, [pc, #400]	@ (8001c00 <main+0xb80>)
 8001a70:	2205      	movs	r2, #5
 8001a72:	701a      	strb	r2, [r3, #0]
						change2 = 0;
 8001a74:	4b63      	ldr	r3, [pc, #396]	@ (8001c04 <main+0xb84>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	701a      	strb	r2, [r3, #0]
 8001a7a:	f7ff bb4a 	b.w	8001112 <main+0x92>
					}else{
						LCD_Bitmap(172, 127, 45, 45, selectorJ2);
 8001a7e:	4b62      	ldr	r3, [pc, #392]	@ (8001c08 <main+0xb88>)
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	232d      	movs	r3, #45	@ 0x2d
 8001a84:	222d      	movs	r2, #45	@ 0x2d
 8001a86:	217f      	movs	r1, #127	@ 0x7f
 8001a88:	20ac      	movs	r0, #172	@ 0xac
 8001a8a:	f7ff f9a3 	bl	8000dd4 <LCD_Bitmap>
						change2 = 0;
 8001a8e:	4b5d      	ldr	r3, [pc, #372]	@ (8001c04 <main+0xb84>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	701a      	strb	r2, [r3, #0]
 8001a94:	f7ff bb3d 	b.w	8001112 <main+0x92>
					}
				}
		}
		else if(modo==3){
 8001a98:	4b5e      	ldr	r3, [pc, #376]	@ (8001c14 <main+0xb94>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b03      	cmp	r3, #3
 8001a9e:	d12e      	bne.n	8001afe <main+0xa7e>
					FillRect(0, 0, 320, 81, 0x039D);
 8001aa0:	f240 339d 	movw	r3, #925	@ 0x39d
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	2351      	movs	r3, #81	@ 0x51
 8001aa8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001aac:	2100      	movs	r1, #0
 8001aae:	2000      	movs	r0, #0
 8001ab0:	f7ff f84a 	bl	8000b48 <FillRect>
					//FillRect(0, 81, 320, 80, 0xF5E7);
					FillRect(0, 81, 320, 80, 0x19EB);
 8001ab4:	f641 13eb 	movw	r3, #6635	@ 0x19eb
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	2350      	movs	r3, #80	@ 0x50
 8001abc:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001ac0:	2151      	movs	r1, #81	@ 0x51
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	f7ff f840 	bl	8000b48 <FillRect>
					LCD_Print("VS.", 138, 111, 2, 0xFFFF, 0x19EB);		//LETRAS QUE DICEN "VS"
 8001ac8:	f641 13eb 	movw	r3, #6635	@ 0x19eb
 8001acc:	9301      	str	r3, [sp, #4]
 8001ace:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	226f      	movs	r2, #111	@ 0x6f
 8001ad8:	218a      	movs	r1, #138	@ 0x8a
 8001ada:	484f      	ldr	r0, [pc, #316]	@ (8001c18 <main+0xb98>)
 8001adc:	f7ff f88e 	bl	8000bfc <LCD_Print>
					//LCD_Print("VS.", 140, 111, 2, 0x9FFE, 0x039D);	//LETRAS QUE DICEN "VS"
					FillRect(0, 161, 320, 80, 0x039D);
 8001ae0:	f240 339d 	movw	r3, #925	@ 0x39d
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	2350      	movs	r3, #80	@ 0x50
 8001ae8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001aec:	21a1      	movs	r1, #161	@ 0xa1
 8001aee:	2000      	movs	r0, #0
 8001af0:	f7ff f82a 	bl	8000b48 <FillRect>
					modo = 4;
 8001af4:	4b47      	ldr	r3, [pc, #284]	@ (8001c14 <main+0xb94>)
 8001af6:	2204      	movs	r2, #4
 8001af8:	701a      	strb	r2, [r3, #0]
 8001afa:	f7ff bb0a 	b.w	8001112 <main+0x92>
		}
		else if(modo==4){
 8001afe:	4b45      	ldr	r3, [pc, #276]	@ (8001c14 <main+0xb94>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	f040 8253 	bne.w	8001fae <main+0xf2e>
			if(ch1 == 1){
 8001b08:	4b44      	ldr	r3, [pc, #272]	@ (8001c1c <main+0xb9c>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d134      	bne.n	8001b7a <main+0xafa>
				LCD_Sprite(80, 110, 25, 28, megamanB, 1, 1, 0, 0);	//1
 8001b10:	2300      	movs	r3, #0
 8001b12:	9304      	str	r3, [sp, #16]
 8001b14:	2300      	movs	r3, #0
 8001b16:	9303      	str	r3, [sp, #12]
 8001b18:	2301      	movs	r3, #1
 8001b1a:	9302      	str	r3, [sp, #8]
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	9301      	str	r3, [sp, #4]
 8001b20:	4b3f      	ldr	r3, [pc, #252]	@ (8001c20 <main+0xba0>)
 8001b22:	9300      	str	r3, [sp, #0]
 8001b24:	231c      	movs	r3, #28
 8001b26:	2219      	movs	r2, #25
 8001b28:	216e      	movs	r1, #110	@ 0x6e
 8001b2a:	2050      	movs	r0, #80	@ 0x50
 8001b2c:	f7ff f9ac 	bl	8000e88 <LCD_Sprite>
				//PARAMETROS DE MEGAMAN J1
				ch1 = 1;
 8001b30:	4b3a      	ldr	r3, [pc, #232]	@ (8001c1c <main+0xb9c>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	701a      	strb	r2, [r3, #0]
				x1 = 20;
 8001b36:	4b3b      	ldr	r3, [pc, #236]	@ (8001c24 <main+0xba4>)
 8001b38:	2214      	movs	r2, #20
 8001b3a:	601a      	str	r2, [r3, #0]
				y1 = 176;
 8001b3c:	4b3a      	ldr	r3, [pc, #232]	@ (8001c28 <main+0xba8>)
 8001b3e:	22b0      	movs	r2, #176	@ 0xb0
 8001b40:	601a      	str	r2, [r3, #0]
				y1Estandar = 176;
 8001b42:	4b3a      	ldr	r3, [pc, #232]	@ (8001c2c <main+0xbac>)
 8001b44:	22b0      	movs	r2, #176	@ 0xb0
 8001b46:	601a      	str	r2, [r3, #0]
				w1 = 32;
 8001b48:	4b39      	ldr	r3, [pc, #228]	@ (8001c30 <main+0xbb0>)
 8001b4a:	2220      	movs	r2, #32
 8001b4c:	601a      	str	r2, [r3, #0]
				h1 = 32;
 8001b4e:	4b39      	ldr	r3, [pc, #228]	@ (8001c34 <main+0xbb4>)
 8001b50:	2220      	movs	r2, #32
 8001b52:	601a      	str	r2, [r3, #0]
				column1 = 11;
 8001b54:	4b38      	ldr	r3, [pc, #224]	@ (8001c38 <main+0xbb8>)
 8001b56:	220b      	movs	r2, #11
 8001b58:	601a      	str	r2, [r3, #0]
				frame1 = 0;
 8001b5a:	4b38      	ldr	r3, [pc, #224]	@ (8001c3c <main+0xbbc>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
				flip1 = 1;
 8001b60:	4b37      	ldr	r3, [pc, #220]	@ (8001c40 <main+0xbc0>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	601a      	str	r2, [r3, #0]
				bulleth1 = 15;
 8001b66:	4b37      	ldr	r3, [pc, #220]	@ (8001c44 <main+0xbc4>)
 8001b68:	220f      	movs	r2, #15
 8001b6a:	601a      	str	r2, [r3, #0]
				bulletskin1 = 0;
 8001b6c:	4b36      	ldr	r3, [pc, #216]	@ (8001c48 <main+0xbc8>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
				daño1 = 1;
 8001b72:	4b36      	ldr	r3, [pc, #216]	@ (8001c4c <main+0xbcc>)
 8001b74:	2201      	movs	r2, #1
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	e0dd      	b.n	8001d36 <main+0xcb6>
			}else if (ch1 == 5){
 8001b7a:	4b28      	ldr	r3, [pc, #160]	@ (8001c1c <main+0xb9c>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b05      	cmp	r3, #5
 8001b80:	d168      	bne.n	8001c54 <main+0xbd4>
				LCD_Sprite(80, 110, 28, 28, icemanB, 1, 1, 1, 0);	//5
 8001b82:	2300      	movs	r3, #0
 8001b84:	9304      	str	r3, [sp, #16]
 8001b86:	2301      	movs	r3, #1
 8001b88:	9303      	str	r3, [sp, #12]
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	9302      	str	r3, [sp, #8]
 8001b8e:	2301      	movs	r3, #1
 8001b90:	9301      	str	r3, [sp, #4]
 8001b92:	4b2f      	ldr	r3, [pc, #188]	@ (8001c50 <main+0xbd0>)
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	231c      	movs	r3, #28
 8001b98:	221c      	movs	r2, #28
 8001b9a:	216e      	movs	r1, #110	@ 0x6e
 8001b9c:	2050      	movs	r0, #80	@ 0x50
 8001b9e:	f7ff f973 	bl	8000e88 <LCD_Sprite>
				//PARAMETROS DE ICEMAN
				ch1 = 5;
 8001ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c1c <main+0xb9c>)
 8001ba4:	2205      	movs	r2, #5
 8001ba6:	701a      	strb	r2, [r3, #0]
				x1 = 20;
 8001ba8:	4b1e      	ldr	r3, [pc, #120]	@ (8001c24 <main+0xba4>)
 8001baa:	2214      	movs	r2, #20
 8001bac:	601a      	str	r2, [r3, #0]
				y1 = 179;
 8001bae:	4b1e      	ldr	r3, [pc, #120]	@ (8001c28 <main+0xba8>)
 8001bb0:	22b3      	movs	r2, #179	@ 0xb3
 8001bb2:	601a      	str	r2, [r3, #0]
				y1Estandar = 179;
 8001bb4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c2c <main+0xbac>)
 8001bb6:	22b3      	movs	r2, #179	@ 0xb3
 8001bb8:	601a      	str	r2, [r3, #0]
				w1 = 34;
 8001bba:	4b1d      	ldr	r3, [pc, #116]	@ (8001c30 <main+0xbb0>)
 8001bbc:	2222      	movs	r2, #34	@ 0x22
 8001bbe:	601a      	str	r2, [r3, #0]
				h1 = 29;
 8001bc0:	4b1c      	ldr	r3, [pc, #112]	@ (8001c34 <main+0xbb4>)
 8001bc2:	221d      	movs	r2, #29
 8001bc4:	601a      	str	r2, [r3, #0]
				column1 = 11;
 8001bc6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c38 <main+0xbb8>)
 8001bc8:	220b      	movs	r2, #11
 8001bca:	601a      	str	r2, [r3, #0]
				frame1 = 0;
 8001bcc:	4b1b      	ldr	r3, [pc, #108]	@ (8001c3c <main+0xbbc>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
				flip1 = 1;
 8001bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8001c40 <main+0xbc0>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	601a      	str	r2, [r3, #0]
				bulleth1 = 10;
 8001bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8001c44 <main+0xbc4>)
 8001bda:	220a      	movs	r2, #10
 8001bdc:	601a      	str	r2, [r3, #0]
				bulletskin1 = 1;
 8001bde:	4b1a      	ldr	r3, [pc, #104]	@ (8001c48 <main+0xbc8>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	601a      	str	r2, [r3, #0]
				daño1 = 2;
 8001be4:	4b19      	ldr	r3, [pc, #100]	@ (8001c4c <main+0xbcc>)
 8001be6:	2202      	movs	r2, #2
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	e0a4      	b.n	8001d36 <main+0xcb6>
 8001bec:	2001409b 	.word	0x2001409b
 8001bf0:	2001409c 	.word	0x2001409c
 8001bf4:	2000a01c 	.word	0x2000a01c
 8001bf8:	2001409d 	.word	0x2001409d
 8001bfc:	2000cf98 	.word	0x2000cf98
 8001c00:	2001409e 	.word	0x2001409e
 8001c04:	20012e2f 	.word	0x20012e2f
 8001c08:	2000bfc4 	.word	0x2000bfc4
 8001c0c:	20012e2d 	.word	0x20012e2d
 8001c10:	20012e2e 	.word	0x20012e2e
 8001c14:	20014090 	.word	0x20014090
 8001c18:	08009664 	.word	0x08009664
 8001c1c:	2001409a 	.word	0x2001409a
 8001c20:	20000f30 	.word	0x20000f30
 8001c24:	200140a0 	.word	0x200140a0
 8001c28:	20012e34 	.word	0x20012e34
 8001c2c:	20012e30 	.word	0x20012e30
 8001c30:	200140a4 	.word	0x200140a4
 8001c34:	200140a8 	.word	0x200140a8
 8001c38:	200140ac 	.word	0x200140ac
 8001c3c:	20012e38 	.word	0x20012e38
 8001c40:	200140b0 	.word	0x200140b0
 8001c44:	200140cc 	.word	0x200140cc
 8001c48:	200140c8 	.word	0x200140c8
 8001c4c:	200140d0 	.word	0x200140d0
 8001c50:	200014a8 	.word	0x200014a8
			}else if (ch1 == 8){
 8001c54:	4b8f      	ldr	r3, [pc, #572]	@ (8001e94 <main+0xe14>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b08      	cmp	r3, #8
 8001c5a:	d134      	bne.n	8001cc6 <main+0xc46>
				LCD_Sprite(80, 110, 21, 28, rollB, 1, 1, 1, 0);		//8
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	9304      	str	r3, [sp, #16]
 8001c60:	2301      	movs	r3, #1
 8001c62:	9303      	str	r3, [sp, #12]
 8001c64:	2301      	movs	r3, #1
 8001c66:	9302      	str	r3, [sp, #8]
 8001c68:	2301      	movs	r3, #1
 8001c6a:	9301      	str	r3, [sp, #4]
 8001c6c:	4b8a      	ldr	r3, [pc, #552]	@ (8001e98 <main+0xe18>)
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	231c      	movs	r3, #28
 8001c72:	2215      	movs	r2, #21
 8001c74:	216e      	movs	r1, #110	@ 0x6e
 8001c76:	2050      	movs	r0, #80	@ 0x50
 8001c78:	f7ff f906 	bl	8000e88 <LCD_Sprite>
				//PARAMETROS DE ROLL J1
				ch1 = 8;
 8001c7c:	4b85      	ldr	r3, [pc, #532]	@ (8001e94 <main+0xe14>)
 8001c7e:	2208      	movs	r2, #8
 8001c80:	701a      	strb	r2, [r3, #0]
				x1 = 20;
 8001c82:	4b86      	ldr	r3, [pc, #536]	@ (8001e9c <main+0xe1c>)
 8001c84:	2214      	movs	r2, #20
 8001c86:	601a      	str	r2, [r3, #0]
				y1 = 177;
 8001c88:	4b85      	ldr	r3, [pc, #532]	@ (8001ea0 <main+0xe20>)
 8001c8a:	22b1      	movs	r2, #177	@ 0xb1
 8001c8c:	601a      	str	r2, [r3, #0]
				y1Estandar = 177;
 8001c8e:	4b85      	ldr	r3, [pc, #532]	@ (8001ea4 <main+0xe24>)
 8001c90:	22b1      	movs	r2, #177	@ 0xb1
 8001c92:	601a      	str	r2, [r3, #0]
				w1 = 31;
 8001c94:	4b84      	ldr	r3, [pc, #528]	@ (8001ea8 <main+0xe28>)
 8001c96:	221f      	movs	r2, #31
 8001c98:	601a      	str	r2, [r3, #0]
				h1 = 30;
 8001c9a:	4b84      	ldr	r3, [pc, #528]	@ (8001eac <main+0xe2c>)
 8001c9c:	221e      	movs	r2, #30
 8001c9e:	601a      	str	r2, [r3, #0]
				column1 = 11;
 8001ca0:	4b83      	ldr	r3, [pc, #524]	@ (8001eb0 <main+0xe30>)
 8001ca2:	220b      	movs	r2, #11
 8001ca4:	601a      	str	r2, [r3, #0]
				frame1 = 0;
 8001ca6:	4b83      	ldr	r3, [pc, #524]	@ (8001eb4 <main+0xe34>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
				flip1 = 1;
 8001cac:	4b82      	ldr	r3, [pc, #520]	@ (8001eb8 <main+0xe38>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	601a      	str	r2, [r3, #0]
				bulleth1 = 15;
 8001cb2:	4b82      	ldr	r3, [pc, #520]	@ (8001ebc <main+0xe3c>)
 8001cb4:	220f      	movs	r2, #15
 8001cb6:	601a      	str	r2, [r3, #0]
				bulletskin1 = 0;
 8001cb8:	4b81      	ldr	r3, [pc, #516]	@ (8001ec0 <main+0xe40>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
				daño1 = 1;
 8001cbe:	4b81      	ldr	r3, [pc, #516]	@ (8001ec4 <main+0xe44>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	e037      	b.n	8001d36 <main+0xcb6>
			}else if (ch1 == 9){
 8001cc6:	4b73      	ldr	r3, [pc, #460]	@ (8001e94 <main+0xe14>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b09      	cmp	r3, #9
 8001ccc:	d133      	bne.n	8001d36 <main+0xcb6>
				LCD_Sprite(80, 110, 20, 27, marioB, 1, 1, 1, 0);	//9
 8001cce:	2300      	movs	r3, #0
 8001cd0:	9304      	str	r3, [sp, #16]
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	9303      	str	r3, [sp, #12]
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	9302      	str	r3, [sp, #8]
 8001cda:	2301      	movs	r3, #1
 8001cdc:	9301      	str	r3, [sp, #4]
 8001cde:	4b7a      	ldr	r3, [pc, #488]	@ (8001ec8 <main+0xe48>)
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	231b      	movs	r3, #27
 8001ce4:	2214      	movs	r2, #20
 8001ce6:	216e      	movs	r1, #110	@ 0x6e
 8001ce8:	2050      	movs	r0, #80	@ 0x50
 8001cea:	f7ff f8cd 	bl	8000e88 <LCD_Sprite>
				//PARAMETROS DE MARIO J1
				ch1 = 9;
 8001cee:	4b69      	ldr	r3, [pc, #420]	@ (8001e94 <main+0xe14>)
 8001cf0:	2209      	movs	r2, #9
 8001cf2:	701a      	strb	r2, [r3, #0]
				x1 = 20;
 8001cf4:	4b69      	ldr	r3, [pc, #420]	@ (8001e9c <main+0xe1c>)
 8001cf6:	2214      	movs	r2, #20
 8001cf8:	601a      	str	r2, [r3, #0]
				y1 = 182;
 8001cfa:	4b69      	ldr	r3, [pc, #420]	@ (8001ea0 <main+0xe20>)
 8001cfc:	22b6      	movs	r2, #182	@ 0xb6
 8001cfe:	601a      	str	r2, [r3, #0]
				y1Estandar = 182;
 8001d00:	4b68      	ldr	r3, [pc, #416]	@ (8001ea4 <main+0xe24>)
 8001d02:	22b6      	movs	r2, #182	@ 0xb6
 8001d04:	601a      	str	r2, [r3, #0]
				w1 = 26;
 8001d06:	4b68      	ldr	r3, [pc, #416]	@ (8001ea8 <main+0xe28>)
 8001d08:	221a      	movs	r2, #26
 8001d0a:	601a      	str	r2, [r3, #0]
				h1 = 26;
 8001d0c:	4b67      	ldr	r3, [pc, #412]	@ (8001eac <main+0xe2c>)
 8001d0e:	221a      	movs	r2, #26
 8001d10:	601a      	str	r2, [r3, #0]
				column1 = 11;
 8001d12:	4b67      	ldr	r3, [pc, #412]	@ (8001eb0 <main+0xe30>)
 8001d14:	220b      	movs	r2, #11
 8001d16:	601a      	str	r2, [r3, #0]
				frame1 = 0;
 8001d18:	4b66      	ldr	r3, [pc, #408]	@ (8001eb4 <main+0xe34>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
				flip1 = 1;
 8001d1e:	4b66      	ldr	r3, [pc, #408]	@ (8001eb8 <main+0xe38>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	601a      	str	r2, [r3, #0]
				bulleth1 = 12;
 8001d24:	4b65      	ldr	r3, [pc, #404]	@ (8001ebc <main+0xe3c>)
 8001d26:	220c      	movs	r2, #12
 8001d28:	601a      	str	r2, [r3, #0]
				bulletskin1 = 2;
 8001d2a:	4b65      	ldr	r3, [pc, #404]	@ (8001ec0 <main+0xe40>)
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	601a      	str	r2, [r3, #0]
				daño1 = 1;
 8001d30:	4b64      	ldr	r3, [pc, #400]	@ (8001ec4 <main+0xe44>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	601a      	str	r2, [r3, #0]
			}
			if(ch2 == 1){
 8001d36:	4b65      	ldr	r3, [pc, #404]	@ (8001ecc <main+0xe4c>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d135      	bne.n	8001daa <main+0xd2a>
				LCD_Sprite(214, 110, 25, 28, megamanB, 1, 1, 1, 2);	//1
 8001d3e:	2302      	movs	r3, #2
 8001d40:	9304      	str	r3, [sp, #16]
 8001d42:	2301      	movs	r3, #1
 8001d44:	9303      	str	r3, [sp, #12]
 8001d46:	2301      	movs	r3, #1
 8001d48:	9302      	str	r3, [sp, #8]
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	9301      	str	r3, [sp, #4]
 8001d4e:	4b60      	ldr	r3, [pc, #384]	@ (8001ed0 <main+0xe50>)
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	231c      	movs	r3, #28
 8001d54:	2219      	movs	r2, #25
 8001d56:	216e      	movs	r1, #110	@ 0x6e
 8001d58:	20d6      	movs	r0, #214	@ 0xd6
 8001d5a:	f7ff f895 	bl	8000e88 <LCD_Sprite>
				//PARAMETROS DE MEGAMAN J2
				ch2 = 1;
 8001d5e:	4b5b      	ldr	r3, [pc, #364]	@ (8001ecc <main+0xe4c>)
 8001d60:	2201      	movs	r2, #1
 8001d62:	701a      	strb	r2, [r3, #0]
				x2 = 275;
 8001d64:	4b5b      	ldr	r3, [pc, #364]	@ (8001ed4 <main+0xe54>)
 8001d66:	f240 1213 	movw	r2, #275	@ 0x113
 8001d6a:	601a      	str	r2, [r3, #0]
				y2 = 176;
 8001d6c:	4b5a      	ldr	r3, [pc, #360]	@ (8001ed8 <main+0xe58>)
 8001d6e:	22b0      	movs	r2, #176	@ 0xb0
 8001d70:	601a      	str	r2, [r3, #0]
				y2Estandar = 176;
 8001d72:	4b5a      	ldr	r3, [pc, #360]	@ (8001edc <main+0xe5c>)
 8001d74:	22b0      	movs	r2, #176	@ 0xb0
 8001d76:	601a      	str	r2, [r3, #0]
				w2 = 32;
 8001d78:	4b59      	ldr	r3, [pc, #356]	@ (8001ee0 <main+0xe60>)
 8001d7a:	2220      	movs	r2, #32
 8001d7c:	601a      	str	r2, [r3, #0]
				h2 = 32;
 8001d7e:	4b59      	ldr	r3, [pc, #356]	@ (8001ee4 <main+0xe64>)
 8001d80:	2220      	movs	r2, #32
 8001d82:	601a      	str	r2, [r3, #0]
				column2 = 11;
 8001d84:	4b58      	ldr	r3, [pc, #352]	@ (8001ee8 <main+0xe68>)
 8001d86:	220b      	movs	r2, #11
 8001d88:	601a      	str	r2, [r3, #0]
				frame2 = 0;
 8001d8a:	4b58      	ldr	r3, [pc, #352]	@ (8001eec <main+0xe6c>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
				flip22 = 0;
 8001d90:	4b57      	ldr	r3, [pc, #348]	@ (8001ef0 <main+0xe70>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
				bulleth2 = 15;
 8001d96:	4b57      	ldr	r3, [pc, #348]	@ (8001ef4 <main+0xe74>)
 8001d98:	220f      	movs	r2, #15
 8001d9a:	601a      	str	r2, [r3, #0]
				bulletskin2 = 0;
 8001d9c:	4b56      	ldr	r3, [pc, #344]	@ (8001ef8 <main+0xe78>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
				daño2 = 1;
 8001da2:	4b56      	ldr	r3, [pc, #344]	@ (8001efc <main+0xe7c>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	e0e5      	b.n	8001f76 <main+0xef6>
			}else if (ch2 == 5){
 8001daa:	4b48      	ldr	r3, [pc, #288]	@ (8001ecc <main+0xe4c>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b05      	cmp	r3, #5
 8001db0:	d135      	bne.n	8001e1e <main+0xd9e>
				LCD_Sprite(214, 110, 28, 28, icemanB, 1, 1, 0, 0);	//5
 8001db2:	2300      	movs	r3, #0
 8001db4:	9304      	str	r3, [sp, #16]
 8001db6:	2300      	movs	r3, #0
 8001db8:	9303      	str	r3, [sp, #12]
 8001dba:	2301      	movs	r3, #1
 8001dbc:	9302      	str	r3, [sp, #8]
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	9301      	str	r3, [sp, #4]
 8001dc2:	4b4f      	ldr	r3, [pc, #316]	@ (8001f00 <main+0xe80>)
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	231c      	movs	r3, #28
 8001dc8:	221c      	movs	r2, #28
 8001dca:	216e      	movs	r1, #110	@ 0x6e
 8001dcc:	20d6      	movs	r0, #214	@ 0xd6
 8001dce:	f7ff f85b 	bl	8000e88 <LCD_Sprite>
				//PARAMETROS DE ICEMAN J2
				ch2 = 5;
 8001dd2:	4b3e      	ldr	r3, [pc, #248]	@ (8001ecc <main+0xe4c>)
 8001dd4:	2205      	movs	r2, #5
 8001dd6:	701a      	strb	r2, [r3, #0]
				x2 = 275;
 8001dd8:	4b3e      	ldr	r3, [pc, #248]	@ (8001ed4 <main+0xe54>)
 8001dda:	f240 1213 	movw	r2, #275	@ 0x113
 8001dde:	601a      	str	r2, [r3, #0]
				y2 = 179;
 8001de0:	4b3d      	ldr	r3, [pc, #244]	@ (8001ed8 <main+0xe58>)
 8001de2:	22b3      	movs	r2, #179	@ 0xb3
 8001de4:	601a      	str	r2, [r3, #0]
				y2Estandar = 179;
 8001de6:	4b3d      	ldr	r3, [pc, #244]	@ (8001edc <main+0xe5c>)
 8001de8:	22b3      	movs	r2, #179	@ 0xb3
 8001dea:	601a      	str	r2, [r3, #0]
				w2 = 34;
 8001dec:	4b3c      	ldr	r3, [pc, #240]	@ (8001ee0 <main+0xe60>)
 8001dee:	2222      	movs	r2, #34	@ 0x22
 8001df0:	601a      	str	r2, [r3, #0]
				h2 = 29;
 8001df2:	4b3c      	ldr	r3, [pc, #240]	@ (8001ee4 <main+0xe64>)
 8001df4:	221d      	movs	r2, #29
 8001df6:	601a      	str	r2, [r3, #0]
				column2 = 11;
 8001df8:	4b3b      	ldr	r3, [pc, #236]	@ (8001ee8 <main+0xe68>)
 8001dfa:	220b      	movs	r2, #11
 8001dfc:	601a      	str	r2, [r3, #0]
				frame2 = 0;
 8001dfe:	4b3b      	ldr	r3, [pc, #236]	@ (8001eec <main+0xe6c>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
				flip22 = 0;
 8001e04:	4b3a      	ldr	r3, [pc, #232]	@ (8001ef0 <main+0xe70>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
				bulleth2 = 10;
 8001e0a:	4b3a      	ldr	r3, [pc, #232]	@ (8001ef4 <main+0xe74>)
 8001e0c:	220a      	movs	r2, #10
 8001e0e:	601a      	str	r2, [r3, #0]
				bulletskin2 = 1;
 8001e10:	4b39      	ldr	r3, [pc, #228]	@ (8001ef8 <main+0xe78>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	601a      	str	r2, [r3, #0]
				daño2 = 2;
 8001e16:	4b39      	ldr	r3, [pc, #228]	@ (8001efc <main+0xe7c>)
 8001e18:	2202      	movs	r2, #2
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	e0ab      	b.n	8001f76 <main+0xef6>
			}else if (ch2 == 8){
 8001e1e:	4b2b      	ldr	r3, [pc, #172]	@ (8001ecc <main+0xe4c>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b08      	cmp	r3, #8
 8001e24:	d16e      	bne.n	8001f04 <main+0xe84>
				LCD_Sprite(214, 110, 21, 28, rollB, 1, 1, 0, 0);	//8
 8001e26:	2300      	movs	r3, #0
 8001e28:	9304      	str	r3, [sp, #16]
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	9303      	str	r3, [sp, #12]
 8001e2e:	2301      	movs	r3, #1
 8001e30:	9302      	str	r3, [sp, #8]
 8001e32:	2301      	movs	r3, #1
 8001e34:	9301      	str	r3, [sp, #4]
 8001e36:	4b18      	ldr	r3, [pc, #96]	@ (8001e98 <main+0xe18>)
 8001e38:	9300      	str	r3, [sp, #0]
 8001e3a:	231c      	movs	r3, #28
 8001e3c:	2215      	movs	r2, #21
 8001e3e:	216e      	movs	r1, #110	@ 0x6e
 8001e40:	20d6      	movs	r0, #214	@ 0xd6
 8001e42:	f7ff f821 	bl	8000e88 <LCD_Sprite>
				//PARAMETROS DE ROLL J2
				ch2 = 8;
 8001e46:	4b21      	ldr	r3, [pc, #132]	@ (8001ecc <main+0xe4c>)
 8001e48:	2208      	movs	r2, #8
 8001e4a:	701a      	strb	r2, [r3, #0]
				x2 = 275;
 8001e4c:	4b21      	ldr	r3, [pc, #132]	@ (8001ed4 <main+0xe54>)
 8001e4e:	f240 1213 	movw	r2, #275	@ 0x113
 8001e52:	601a      	str	r2, [r3, #0]
				y2 = 177;
 8001e54:	4b20      	ldr	r3, [pc, #128]	@ (8001ed8 <main+0xe58>)
 8001e56:	22b1      	movs	r2, #177	@ 0xb1
 8001e58:	601a      	str	r2, [r3, #0]
				y2Estandar = 177;
 8001e5a:	4b20      	ldr	r3, [pc, #128]	@ (8001edc <main+0xe5c>)
 8001e5c:	22b1      	movs	r2, #177	@ 0xb1
 8001e5e:	601a      	str	r2, [r3, #0]
				w2 = 31;
 8001e60:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee0 <main+0xe60>)
 8001e62:	221f      	movs	r2, #31
 8001e64:	601a      	str	r2, [r3, #0]
				h2 = 30;
 8001e66:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee4 <main+0xe64>)
 8001e68:	221e      	movs	r2, #30
 8001e6a:	601a      	str	r2, [r3, #0]
				column2 = 11;
 8001e6c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ee8 <main+0xe68>)
 8001e6e:	220b      	movs	r2, #11
 8001e70:	601a      	str	r2, [r3, #0]
				frame2 = 0;
 8001e72:	4b1e      	ldr	r3, [pc, #120]	@ (8001eec <main+0xe6c>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
				flip22 = 0;
 8001e78:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef0 <main+0xe70>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
				bulleth2 = 15;
 8001e7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef4 <main+0xe74>)
 8001e80:	220f      	movs	r2, #15
 8001e82:	601a      	str	r2, [r3, #0]
				bulletskin2 = 0;
 8001e84:	4b1c      	ldr	r3, [pc, #112]	@ (8001ef8 <main+0xe78>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
				daño2 = 1;
 8001e8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001efc <main+0xe7c>)
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	e071      	b.n	8001f76 <main+0xef6>
 8001e92:	bf00      	nop
 8001e94:	2001409a 	.word	0x2001409a
 8001e98:	20001ac8 	.word	0x20001ac8
 8001e9c:	200140a0 	.word	0x200140a0
 8001ea0:	20012e34 	.word	0x20012e34
 8001ea4:	20012e30 	.word	0x20012e30
 8001ea8:	200140a4 	.word	0x200140a4
 8001eac:	200140a8 	.word	0x200140a8
 8001eb0:	200140ac 	.word	0x200140ac
 8001eb4:	20012e38 	.word	0x20012e38
 8001eb8:	200140b0 	.word	0x200140b0
 8001ebc:	200140cc 	.word	0x200140cc
 8001ec0:	200140c8 	.word	0x200140c8
 8001ec4:	200140d0 	.word	0x200140d0
 8001ec8:	20001f60 	.word	0x20001f60
 8001ecc:	2001409e 	.word	0x2001409e
 8001ed0:	20000f30 	.word	0x20000f30
 8001ed4:	20012e4c 	.word	0x20012e4c
 8001ed8:	20012e54 	.word	0x20012e54
 8001edc:	20012e50 	.word	0x20012e50
 8001ee0:	20014104 	.word	0x20014104
 8001ee4:	20014110 	.word	0x20014110
 8001ee8:	20014108 	.word	0x20014108
 8001eec:	20012e58 	.word	0x20012e58
 8001ef0:	2001410c 	.word	0x2001410c
 8001ef4:	2001412c 	.word	0x2001412c
 8001ef8:	20014128 	.word	0x20014128
 8001efc:	20014130 	.word	0x20014130
 8001f00:	200014a8 	.word	0x200014a8
			}else if (ch2 == 9){
 8001f04:	4bb1      	ldr	r3, [pc, #708]	@ (80021cc <main+0x114c>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b09      	cmp	r3, #9
 8001f0a:	d134      	bne.n	8001f76 <main+0xef6>
				LCD_Sprite(214, 110, 20, 27, marioB, 1, 1, 0, 0);	//9
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	9304      	str	r3, [sp, #16]
 8001f10:	2300      	movs	r3, #0
 8001f12:	9303      	str	r3, [sp, #12]
 8001f14:	2301      	movs	r3, #1
 8001f16:	9302      	str	r3, [sp, #8]
 8001f18:	2301      	movs	r3, #1
 8001f1a:	9301      	str	r3, [sp, #4]
 8001f1c:	4bac      	ldr	r3, [pc, #688]	@ (80021d0 <main+0x1150>)
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	231b      	movs	r3, #27
 8001f22:	2214      	movs	r2, #20
 8001f24:	216e      	movs	r1, #110	@ 0x6e
 8001f26:	20d6      	movs	r0, #214	@ 0xd6
 8001f28:	f7fe ffae 	bl	8000e88 <LCD_Sprite>
				//PARAMETROS DE MARIO J2
				ch2 = 9;
 8001f2c:	4ba7      	ldr	r3, [pc, #668]	@ (80021cc <main+0x114c>)
 8001f2e:	2209      	movs	r2, #9
 8001f30:	701a      	strb	r2, [r3, #0]
				x2 = 275;
 8001f32:	4ba8      	ldr	r3, [pc, #672]	@ (80021d4 <main+0x1154>)
 8001f34:	f240 1213 	movw	r2, #275	@ 0x113
 8001f38:	601a      	str	r2, [r3, #0]
				y2 = 182;
 8001f3a:	4ba7      	ldr	r3, [pc, #668]	@ (80021d8 <main+0x1158>)
 8001f3c:	22b6      	movs	r2, #182	@ 0xb6
 8001f3e:	601a      	str	r2, [r3, #0]
				y2Estandar = 182;
 8001f40:	4ba6      	ldr	r3, [pc, #664]	@ (80021dc <main+0x115c>)
 8001f42:	22b6      	movs	r2, #182	@ 0xb6
 8001f44:	601a      	str	r2, [r3, #0]
				w2 = 26;
 8001f46:	4ba6      	ldr	r3, [pc, #664]	@ (80021e0 <main+0x1160>)
 8001f48:	221a      	movs	r2, #26
 8001f4a:	601a      	str	r2, [r3, #0]
				h2 = 26;
 8001f4c:	4ba5      	ldr	r3, [pc, #660]	@ (80021e4 <main+0x1164>)
 8001f4e:	221a      	movs	r2, #26
 8001f50:	601a      	str	r2, [r3, #0]
				column2 = 11;
 8001f52:	4ba5      	ldr	r3, [pc, #660]	@ (80021e8 <main+0x1168>)
 8001f54:	220b      	movs	r2, #11
 8001f56:	601a      	str	r2, [r3, #0]
				frame2 = 0;
 8001f58:	4ba4      	ldr	r3, [pc, #656]	@ (80021ec <main+0x116c>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
				flip22 = 0;
 8001f5e:	4ba4      	ldr	r3, [pc, #656]	@ (80021f0 <main+0x1170>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
				bulleth2 = 12;
 8001f64:	4ba3      	ldr	r3, [pc, #652]	@ (80021f4 <main+0x1174>)
 8001f66:	220c      	movs	r2, #12
 8001f68:	601a      	str	r2, [r3, #0]
				bulletskin2 = 2;
 8001f6a:	4ba3      	ldr	r3, [pc, #652]	@ (80021f8 <main+0x1178>)
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	601a      	str	r2, [r3, #0]
				daño2 = 1;
 8001f70:	4ba2      	ldr	r3, [pc, #648]	@ (80021fc <main+0x117c>)
 8001f72:	2201      	movs	r2, #1
 8001f74:	601a      	str	r2, [r3, #0]
			}
			FillRect(0, 135, 320, 5, 0x19EB);
 8001f76:	f641 13eb 	movw	r3, #6635	@ 0x19eb
 8001f7a:	9300      	str	r3, [sp, #0]
 8001f7c:	2305      	movs	r3, #5
 8001f7e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001f82:	2187      	movs	r1, #135	@ 0x87
 8001f84:	2000      	movs	r0, #0
 8001f86:	f7fe fddf 	bl	8000b48 <FillRect>
			transmit_uart3("2");
 8001f8a:	489d      	ldr	r0, [pc, #628]	@ (8002200 <main+0x1180>)
 8001f8c:	f001 fdf2 	bl	8003b74 <transmit_uart3>
			transmit_uart5("2");
 8001f90:	489b      	ldr	r0, [pc, #620]	@ (8002200 <main+0x1180>)
 8001f92:	f001 fe05 	bl	8003ba0 <transmit_uart5>
			HAL_Delay(6000);
 8001f96:	f241 7070 	movw	r0, #6000	@ 0x1770
 8001f9a:	f003 ff5d 	bl	8005e58 <HAL_Delay>
			transmit_uart5("8");
 8001f9e:	4899      	ldr	r0, [pc, #612]	@ (8002204 <main+0x1184>)
 8001fa0:	f001 fdfe 	bl	8003ba0 <transmit_uart5>
			modo = 5;
 8001fa4:	4b98      	ldr	r3, [pc, #608]	@ (8002208 <main+0x1188>)
 8001fa6:	2205      	movs	r2, #5
 8001fa8:	701a      	strb	r2, [r3, #0]
 8001faa:	f7ff b8b2 	b.w	8001112 <main+0x92>
		}
		else if(modo==5){
 8001fae:	4b96      	ldr	r3, [pc, #600]	@ (8002208 <main+0x1188>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2b05      	cmp	r3, #5
 8001fb4:	d131      	bne.n	800201a <main+0xf9a>
			LCD_Clear(0x2104);					//PINTAR TODA LA PANTALLA DE UN COLOR (EN 5R6G5B)
 8001fb6:	f242 1004 	movw	r0, #8452	@ 0x2104
 8001fba:	f7fe fd81 	bl	8000ac0 <LCD_Clear>
			LCD_Bitmap(0, 208, 64, 32, plataforma);
 8001fbe:	4b93      	ldr	r3, [pc, #588]	@ (800220c <main+0x118c>)
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	2320      	movs	r3, #32
 8001fc4:	2240      	movs	r2, #64	@ 0x40
 8001fc6:	21d0      	movs	r1, #208	@ 0xd0
 8001fc8:	2000      	movs	r0, #0
 8001fca:	f7fe ff03 	bl	8000dd4 <LCD_Bitmap>
			LCD_Bitmap(64, 208, 64, 32, plataforma);
 8001fce:	4b8f      	ldr	r3, [pc, #572]	@ (800220c <main+0x118c>)
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	2320      	movs	r3, #32
 8001fd4:	2240      	movs	r2, #64	@ 0x40
 8001fd6:	21d0      	movs	r1, #208	@ 0xd0
 8001fd8:	2040      	movs	r0, #64	@ 0x40
 8001fda:	f7fe fefb 	bl	8000dd4 <LCD_Bitmap>
			LCD_Bitmap(128, 208, 64, 32, plataforma);
 8001fde:	4b8b      	ldr	r3, [pc, #556]	@ (800220c <main+0x118c>)
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	2320      	movs	r3, #32
 8001fe4:	2240      	movs	r2, #64	@ 0x40
 8001fe6:	21d0      	movs	r1, #208	@ 0xd0
 8001fe8:	2080      	movs	r0, #128	@ 0x80
 8001fea:	f7fe fef3 	bl	8000dd4 <LCD_Bitmap>
			LCD_Bitmap(192, 208, 64, 32, plataforma);
 8001fee:	4b87      	ldr	r3, [pc, #540]	@ (800220c <main+0x118c>)
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	2320      	movs	r3, #32
 8001ff4:	2240      	movs	r2, #64	@ 0x40
 8001ff6:	21d0      	movs	r1, #208	@ 0xd0
 8001ff8:	20c0      	movs	r0, #192	@ 0xc0
 8001ffa:	f7fe feeb 	bl	8000dd4 <LCD_Bitmap>
			LCD_Bitmap(256, 208, 64, 32, plataforma);
 8001ffe:	4b83      	ldr	r3, [pc, #524]	@ (800220c <main+0x118c>)
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	2320      	movs	r3, #32
 8002004:	2240      	movs	r2, #64	@ 0x40
 8002006:	21d0      	movs	r1, #208	@ 0xd0
 8002008:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800200c:	f7fe fee2 	bl	8000dd4 <LCD_Bitmap>
			w1 = 32;
			h1 = 30;
			column1 = 11;
			frame1 = 0;*/

			modo=6;
 8002010:	4b7d      	ldr	r3, [pc, #500]	@ (8002208 <main+0x1188>)
 8002012:	2206      	movs	r2, #6
 8002014:	701a      	strb	r2, [r3, #0]
 8002016:	f7ff b87c 	b.w	8001112 <main+0x92>
		}else if(modo==6){
 800201a:	4b7b      	ldr	r3, [pc, #492]	@ (8002208 <main+0x1188>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b06      	cmp	r3, #6
 8002020:	f040 8099 	bne.w	8002156 <main+0x10d6>
			transmit_uart3("3");
 8002024:	487a      	ldr	r0, [pc, #488]	@ (8002210 <main+0x1190>)
 8002026:	f001 fda5 	bl	8003b74 <transmit_uart3>
			transmit_uart5("3");
 800202a:	4879      	ldr	r0, [pc, #484]	@ (8002210 <main+0x1190>)
 800202c:	f001 fdb8 	bl	8003ba0 <transmit_uart5>
			Jugador1();
 8002030:	1d3b      	adds	r3, r7, #4
 8002032:	469c      	mov	ip, r3
 8002034:	f000 fd94 	bl	8002b60 <Jugador1.0>
			mover_balaJ1();
 8002038:	1d3b      	adds	r3, r7, #4
 800203a:	469c      	mov	ip, r3
 800203c:	f000 fbc8 	bl	80027d0 <mover_balaJ1.2>
			Jugador2();
 8002040:	1d3b      	adds	r3, r7, #4
 8002042:	469c      	mov	ip, r3
 8002044:	f001 f8b2 	bl	80031ac <Jugador2.5>
			mover_balaJ2();
 8002048:	1d3b      	adds	r3, r7, #4
 800204a:	469c      	mov	ip, r3
 800204c:	f000 fca6 	bl	800299c <mover_balaJ2.7>
			//check_konami_code(option[0]);
			if(konami1 == 1 || konami2 == 1){
 8002050:	4b70      	ldr	r3, [pc, #448]	@ (8002214 <main+0x1194>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d004      	beq.n	8002062 <main+0xfe2>
 8002058:	4b6f      	ldr	r3, [pc, #444]	@ (8002218 <main+0x1198>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2b01      	cmp	r3, #1
 800205e:	f47f a858 	bne.w	8001112 <main+0x92>
				LCD_Print("Pablo ponganos", 50, 100, 2, 0xFF0000, 0x2104);
 8002062:	f242 1304 	movw	r3, #8452	@ 0x2104
 8002066:	9301      	str	r3, [sp, #4]
 8002068:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
 800206c:	9300      	str	r3, [sp, #0]
 800206e:	2302      	movs	r3, #2
 8002070:	2264      	movs	r2, #100	@ 0x64
 8002072:	2132      	movs	r1, #50	@ 0x32
 8002074:	4869      	ldr	r0, [pc, #420]	@ (800221c <main+0x119c>)
 8002076:	f7fe fdc1 	bl	8000bfc <LCD_Print>
				LCD_Print("100", 115, 130, 2, 0xFF0000, 0x2104);
 800207a:	f242 1304 	movw	r3, #8452	@ 0x2104
 800207e:	9301      	str	r3, [sp, #4]
 8002080:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
 8002084:	9300      	str	r3, [sp, #0]
 8002086:	2302      	movs	r3, #2
 8002088:	2282      	movs	r2, #130	@ 0x82
 800208a:	2173      	movs	r1, #115	@ 0x73
 800208c:	4864      	ldr	r0, [pc, #400]	@ (8002220 <main+0x11a0>)
 800208e:	f7fe fdb5 	bl	8000bfc <LCD_Print>
				FillRect(x1, y1, w1, h1, 0x2104);
 8002092:	4b64      	ldr	r3, [pc, #400]	@ (8002224 <main+0x11a4>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	4b63      	ldr	r3, [pc, #396]	@ (8002228 <main+0x11a8>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4619      	mov	r1, r3
 800209e:	4b63      	ldr	r3, [pc, #396]	@ (800222c <main+0x11ac>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	461a      	mov	r2, r3
 80020a4:	4b62      	ldr	r3, [pc, #392]	@ (8002230 <main+0x11b0>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	461c      	mov	r4, r3
 80020aa:	f242 1304 	movw	r3, #8452	@ 0x2104
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	4623      	mov	r3, r4
 80020b2:	f7fe fd49 	bl	8000b48 <FillRect>
				FillRect(x2, y2, w2, h2, 0x2104);
 80020b6:	4b47      	ldr	r3, [pc, #284]	@ (80021d4 <main+0x1154>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	4b46      	ldr	r3, [pc, #280]	@ (80021d8 <main+0x1158>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4619      	mov	r1, r3
 80020c2:	4b47      	ldr	r3, [pc, #284]	@ (80021e0 <main+0x1160>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	461a      	mov	r2, r3
 80020c8:	4b46      	ldr	r3, [pc, #280]	@ (80021e4 <main+0x1164>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	461c      	mov	r4, r3
 80020ce:	f242 1304 	movw	r3, #8452	@ 0x2104
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	4623      	mov	r3, r4
 80020d6:	f7fe fd37 	bl	8000b48 <FillRect>
				LCD_Bitmap(94, 149, 132, 58, PABLOEASTEREGG);
 80020da:	4b56      	ldr	r3, [pc, #344]	@ (8002234 <main+0x11b4>)
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	233a      	movs	r3, #58	@ 0x3a
 80020e0:	2284      	movs	r2, #132	@ 0x84
 80020e2:	2195      	movs	r1, #149	@ 0x95
 80020e4:	205e      	movs	r0, #94	@ 0x5e
 80020e6:	f7fe fe75 	bl	8000dd4 <LCD_Bitmap>
				HAL_Delay(10000);
 80020ea:	f242 7010 	movw	r0, #10000	@ 0x2710
 80020ee:	f003 feb3 	bl	8005e58 <HAL_Delay>
				LCD_Print("              ", 50, 100, 2, 0xFF0000, 0x2104);		//BORRAR LETRAS
 80020f2:	f242 1304 	movw	r3, #8452	@ 0x2104
 80020f6:	9301      	str	r3, [sp, #4]
 80020f8:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	2302      	movs	r3, #2
 8002100:	2264      	movs	r2, #100	@ 0x64
 8002102:	2132      	movs	r1, #50	@ 0x32
 8002104:	484c      	ldr	r0, [pc, #304]	@ (8002238 <main+0x11b8>)
 8002106:	f7fe fd79 	bl	8000bfc <LCD_Print>
				LCD_Print("   ", 115, 130, 3, 0xFF0000, 0x2104);				//BORRAR LETRAS
 800210a:	f242 1304 	movw	r3, #8452	@ 0x2104
 800210e:	9301      	str	r3, [sp, #4]
 8002110:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	2303      	movs	r3, #3
 8002118:	2282      	movs	r2, #130	@ 0x82
 800211a:	2173      	movs	r1, #115	@ 0x73
 800211c:	4847      	ldr	r0, [pc, #284]	@ (800223c <main+0x11bc>)
 800211e:	f7fe fd6d 	bl	8000bfc <LCD_Print>
				FillRect(94, 149, 132, 58, 0x2104);
 8002122:	f242 1304 	movw	r3, #8452	@ 0x2104
 8002126:	9300      	str	r3, [sp, #0]
 8002128:	233a      	movs	r3, #58	@ 0x3a
 800212a:	2284      	movs	r2, #132	@ 0x84
 800212c:	2195      	movs	r1, #149	@ 0x95
 800212e:	205e      	movs	r0, #94	@ 0x5e
 8002130:	f7fe fd0a 	bl	8000b48 <FillRect>
				konami1 = 0;
 8002134:	4b37      	ldr	r3, [pc, #220]	@ (8002214 <main+0x1194>)
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
				konami2 = 0;
 800213a:	4b37      	ldr	r3, [pc, #220]	@ (8002218 <main+0x1198>)
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
				modo = 6;
 8002140:	4b31      	ldr	r3, [pc, #196]	@ (8002208 <main+0x1188>)
 8002142:	2206      	movs	r2, #6
 8002144:	701a      	strb	r2, [r3, #0]
				current_index1 = 0;  // Reiniciar el índice
 8002146:	4b3e      	ldr	r3, [pc, #248]	@ (8002240 <main+0x11c0>)
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
				current_index2 = 0;  // Reiniciar el índice
 800214c:	4b3d      	ldr	r3, [pc, #244]	@ (8002244 <main+0x11c4>)
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	f7fe bfde 	b.w	8001112 <main+0x92>
			}
		}else if(modo==7){
 8002156:	4b2c      	ldr	r3, [pc, #176]	@ (8002208 <main+0x1188>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b07      	cmp	r3, #7
 800215c:	d17e      	bne.n	800225c <main+0x11dc>
			if (winner1 == 1 && winner2 == 0){
 800215e:	4b3a      	ldr	r3, [pc, #232]	@ (8002248 <main+0x11c8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d113      	bne.n	800218e <main+0x110e>
 8002166:	4b39      	ldr	r3, [pc, #228]	@ (800224c <main+0x11cc>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10f      	bne.n	800218e <main+0x110e>
				transmit_uart3("4");
 800216e:	4838      	ldr	r0, [pc, #224]	@ (8002250 <main+0x11d0>)
 8002170:	f001 fd00 	bl	8003b74 <transmit_uart3>
				LCD_Print("PLAYER 1 WINS!", 55, 100, 2, 0xFFFF, 0xF000); // Mensaje en rojo
 8002174:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8002178:	9301      	str	r3, [sp, #4]
 800217a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	2302      	movs	r3, #2
 8002182:	2264      	movs	r2, #100	@ 0x64
 8002184:	2137      	movs	r1, #55	@ 0x37
 8002186:	4833      	ldr	r0, [pc, #204]	@ (8002254 <main+0x11d4>)
 8002188:	f7fe fd38 	bl	8000bfc <LCD_Print>
 800218c:	e015      	b.n	80021ba <main+0x113a>

			}else if (winner1 == 0 && winner2 == 1){
 800218e:	4b2e      	ldr	r3, [pc, #184]	@ (8002248 <main+0x11c8>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d111      	bne.n	80021ba <main+0x113a>
 8002196:	4b2d      	ldr	r3, [pc, #180]	@ (800224c <main+0x11cc>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d10d      	bne.n	80021ba <main+0x113a>
				transmit_uart3("4");
 800219e:	482c      	ldr	r0, [pc, #176]	@ (8002250 <main+0x11d0>)
 80021a0:	f001 fce8 	bl	8003b74 <transmit_uart3>
				LCD_Print("PLAYER 2 WINS!", 55, 100, 2, 0xFFFF, 0x0015); // Mensaje en rojo
 80021a4:	2315      	movs	r3, #21
 80021a6:	9301      	str	r3, [sp, #4]
 80021a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	2302      	movs	r3, #2
 80021b0:	2264      	movs	r2, #100	@ 0x64
 80021b2:	2137      	movs	r1, #55	@ 0x37
 80021b4:	4828      	ldr	r0, [pc, #160]	@ (8002258 <main+0x11d8>)
 80021b6:	f7fe fd21 	bl	8000bfc <LCD_Print>
			}
			HAL_Delay(3000);
 80021ba:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80021be:	f003 fe4b 	bl	8005e58 <HAL_Delay>
			modo = 8;
 80021c2:	4b11      	ldr	r3, [pc, #68]	@ (8002208 <main+0x1188>)
 80021c4:	2208      	movs	r2, #8
 80021c6:	701a      	strb	r2, [r3, #0]
 80021c8:	f7fe bfa3 	b.w	8001112 <main+0x92>
 80021cc:	2001409e 	.word	0x2001409e
 80021d0:	20001f60 	.word	0x20001f60
 80021d4:	20012e4c 	.word	0x20012e4c
 80021d8:	20012e54 	.word	0x20012e54
 80021dc:	20012e50 	.word	0x20012e50
 80021e0:	20014104 	.word	0x20014104
 80021e4:	20014110 	.word	0x20014110
 80021e8:	20014108 	.word	0x20014108
 80021ec:	20012e58 	.word	0x20012e58
 80021f0:	2001410c 	.word	0x2001410c
 80021f4:	2001412c 	.word	0x2001412c
 80021f8:	20014128 	.word	0x20014128
 80021fc:	20014130 	.word	0x20014130
 8002200:	08009688 	.word	0x08009688
 8002204:	0800968c 	.word	0x0800968c
 8002208:	20014090 	.word	0x20014090
 800220c:	20002398 	.word	0x20002398
 8002210:	08009690 	.word	0x08009690
 8002214:	20014170 	.word	0x20014170
 8002218:	20014180 	.word	0x20014180
 800221c:	08009694 	.word	0x08009694
 8002220:	080096a4 	.word	0x080096a4
 8002224:	200140a0 	.word	0x200140a0
 8002228:	20012e34 	.word	0x20012e34
 800222c:	200140a4 	.word	0x200140a4
 8002230:	200140a8 	.word	0x200140a8
 8002234:	0800a768 	.word	0x0800a768
 8002238:	080096a8 	.word	0x080096a8
 800223c:	080096b8 	.word	0x080096b8
 8002240:	20014164 	.word	0x20014164
 8002244:	20014174 	.word	0x20014174
 8002248:	200140d4 	.word	0x200140d4
 800224c:	20014134 	.word	0x20014134
 8002250:	080096bc 	.word	0x080096bc
 8002254:	080096c0 	.word	0x080096c0
 8002258:	080096d0 	.word	0x080096d0
		}else if(modo==8){
 800225c:	4b88      	ldr	r3, [pc, #544]	@ (8002480 <main+0x1400>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	2b08      	cmp	r3, #8
 8002262:	f040 80e5 	bne.w	8002430 <main+0x13b0>
			LCD_Print("PRESIONA START", 55, 100, 2, 0xFFFF, 0x039D); // Mensaje en rojo
 8002266:	f240 339d 	movw	r3, #925	@ 0x39d
 800226a:	9301      	str	r3, [sp, #4]
 800226c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	2302      	movs	r3, #2
 8002274:	2264      	movs	r2, #100	@ 0x64
 8002276:	2137      	movs	r1, #55	@ 0x37
 8002278:	4882      	ldr	r0, [pc, #520]	@ (8002484 <main+0x1404>)
 800227a:	f7fe fcbf 	bl	8000bfc <LCD_Print>
			LCD_Print("PARA REINICIAR", 55, 125, 2, 0xFFFF, 0x039D); // Mensaje en rojo
 800227e:	f240 339d 	movw	r3, #925	@ 0x39d
 8002282:	9301      	str	r3, [sp, #4]
 8002284:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002288:	9300      	str	r3, [sp, #0]
 800228a:	2302      	movs	r3, #2
 800228c:	227d      	movs	r2, #125	@ 0x7d
 800228e:	2137      	movs	r1, #55	@ 0x37
 8002290:	487d      	ldr	r0, [pc, #500]	@ (8002488 <main+0x1408>)
 8002292:	f7fe fcb3 	bl	8000bfc <LCD_Print>
			if (start == 1){
 8002296:	4b7d      	ldr	r3, [pc, #500]	@ (800248c <main+0x140c>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	2b01      	cmp	r3, #1
 800229c:	f47e af39 	bne.w	8001112 <main+0x92>
				caminarD = 0;
 80022a0:	4b7b      	ldr	r3, [pc, #492]	@ (8002490 <main+0x1410>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	701a      	strb	r2, [r3, #0]
				caminarI = 0;
 80022a6:	4b7b      	ldr	r3, [pc, #492]	@ (8002494 <main+0x1414>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	701a      	strb	r2, [r3, #0]
				caminarD2 = 0;
 80022ac:	4b7a      	ldr	r3, [pc, #488]	@ (8002498 <main+0x1418>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	701a      	strb	r2, [r3, #0]
				caminarI2 = 0;
 80022b2:	4b7a      	ldr	r3, [pc, #488]	@ (800249c <main+0x141c>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	701a      	strb	r2, [r3, #0]
				start = 0;
 80022b8:	4b74      	ldr	r3, [pc, #464]	@ (800248c <main+0x140c>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	701a      	strb	r2, [r3, #0]
				startcounter = 0;
 80022be:	4b78      	ldr	r3, [pc, #480]	@ (80024a0 <main+0x1420>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	701a      	strb	r2, [r3, #0]
				//********SELECCIÓN DE PERSONAJES********
				//JUGADOR 1
				selector1x = 1;
 80022c4:	4b77      	ldr	r3, [pc, #476]	@ (80024a4 <main+0x1424>)
 80022c6:	2201      	movs	r2, #1
 80022c8:	701a      	strb	r2, [r3, #0]
				selector1y = 1;
 80022ca:	4b77      	ldr	r3, [pc, #476]	@ (80024a8 <main+0x1428>)
 80022cc:	2201      	movs	r2, #1
 80022ce:	701a      	strb	r2, [r3, #0]
				selector1xAntiguo = 0;
 80022d0:	4b76      	ldr	r3, [pc, #472]	@ (80024ac <main+0x142c>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	701a      	strb	r2, [r3, #0]
				selector1yAntiguo = 0;
 80022d6:	4b76      	ldr	r3, [pc, #472]	@ (80024b0 <main+0x1430>)
 80022d8:	2200      	movs	r2, #0
 80022da:	701a      	strb	r2, [r3, #0]
				change1 = 1;
 80022dc:	4b75      	ldr	r3, [pc, #468]	@ (80024b4 <main+0x1434>)
 80022de:	2201      	movs	r2, #1
 80022e0:	701a      	strb	r2, [r3, #0]
				chselect1 = 0;
 80022e2:	4b75      	ldr	r3, [pc, #468]	@ (80024b8 <main+0x1438>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	701a      	strb	r2, [r3, #0]
				ch1 = 0;
 80022e8:	4b74      	ldr	r3, [pc, #464]	@ (80024bc <main+0x143c>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	701a      	strb	r2, [r3, #0]
				//JUGADOR 2
				selector2x = 2;
 80022ee:	4b74      	ldr	r3, [pc, #464]	@ (80024c0 <main+0x1440>)
 80022f0:	2202      	movs	r2, #2
 80022f2:	701a      	strb	r2, [r3, #0]
				selector2y = 1;
 80022f4:	4b73      	ldr	r3, [pc, #460]	@ (80024c4 <main+0x1444>)
 80022f6:	2201      	movs	r2, #1
 80022f8:	701a      	strb	r2, [r3, #0]
				selector2xAntiguo = 0;
 80022fa:	4b73      	ldr	r3, [pc, #460]	@ (80024c8 <main+0x1448>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	701a      	strb	r2, [r3, #0]
				selector2yAntiguo = 0;
 8002300:	4b72      	ldr	r3, [pc, #456]	@ (80024cc <main+0x144c>)
 8002302:	2200      	movs	r2, #0
 8002304:	701a      	strb	r2, [r3, #0]
				change2 = 1;
 8002306:	4b72      	ldr	r3, [pc, #456]	@ (80024d0 <main+0x1450>)
 8002308:	2201      	movs	r2, #1
 800230a:	701a      	strb	r2, [r3, #0]
				chselect2 = 0;
 800230c:	4b71      	ldr	r3, [pc, #452]	@ (80024d4 <main+0x1454>)
 800230e:	2200      	movs	r2, #0
 8002310:	701a      	strb	r2, [r3, #0]
				ch2 = 0;
 8002312:	4b71      	ldr	r3, [pc, #452]	@ (80024d8 <main+0x1458>)
 8002314:	2200      	movs	r2, #0
 8002316:	701a      	strb	r2, [r3, #0]
				//****************PARAMETROS**************
				//JUGADOR 1
				x1 = 0;
 8002318:	4b70      	ldr	r3, [pc, #448]	@ (80024dc <main+0x145c>)
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
				y1Estandar = 183;
 800231e:	4b70      	ldr	r3, [pc, #448]	@ (80024e0 <main+0x1460>)
 8002320:	22b7      	movs	r2, #183	@ 0xb7
 8002322:	601a      	str	r2, [r3, #0]
				y1 = 183;
 8002324:	4b6f      	ldr	r3, [pc, #444]	@ (80024e4 <main+0x1464>)
 8002326:	22b7      	movs	r2, #183	@ 0xb7
 8002328:	601a      	str	r2, [r3, #0]
				w1 = 0;
 800232a:	4b6f      	ldr	r3, [pc, #444]	@ (80024e8 <main+0x1468>)
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
				h1 = 0;
 8002330:	4b6e      	ldr	r3, [pc, #440]	@ (80024ec <main+0x146c>)
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
				column1 = 0;
 8002336:	4b6e      	ldr	r3, [pc, #440]	@ (80024f0 <main+0x1470>)
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
				frame1 = 1;
 800233c:	4b6d      	ldr	r3, [pc, #436]	@ (80024f4 <main+0x1474>)
 800233e:	2201      	movs	r2, #1
 8002340:	601a      	str	r2, [r3, #0]
				flip1 = 0;
 8002342:	4b6d      	ldr	r3, [pc, #436]	@ (80024f8 <main+0x1478>)
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
				vY1 = 0;
 8002348:	4b6c      	ldr	r3, [pc, #432]	@ (80024fc <main+0x147c>)
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]
				jump1 = 0;
 800234e:	4b6c      	ldr	r3, [pc, #432]	@ (8002500 <main+0x1480>)
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
				jumpcount1 = 0;
 8002354:	4b6b      	ldr	r3, [pc, #428]	@ (8002504 <main+0x1484>)
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
				falling1 = 1;
 800235a:	4b6b      	ldr	r3, [pc, #428]	@ (8002508 <main+0x1488>)
 800235c:	2201      	movs	r2, #1
 800235e:	601a      	str	r2, [r3, #0]
				running1 = 0;
 8002360:	4b6a      	ldr	r3, [pc, #424]	@ (800250c <main+0x148c>)
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]
				shooting1 = 0;
 8002366:	4b6a      	ldr	r3, [pc, #424]	@ (8002510 <main+0x1490>)
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
				//
				bulletskin1=0;
 800236c:	4b69      	ldr	r3, [pc, #420]	@ (8002514 <main+0x1494>)
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
				bulleth1=0;
 8002372:	4b69      	ldr	r3, [pc, #420]	@ (8002518 <main+0x1498>)
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
				daño1 =0;
 8002378:	4b68      	ldr	r3, [pc, #416]	@ (800251c <main+0x149c>)
 800237a:	2200      	movs	r2, #0
 800237c:	601a      	str	r2, [r3, #0]
				vidas1 = 5; // Inicializa las vidas
 800237e:	4b68      	ldr	r3, [pc, #416]	@ (8002520 <main+0x14a0>)
 8002380:	2205      	movs	r2, #5
 8002382:	601a      	str	r2, [r3, #0]
				winner1 = 0;
 8002384:	4b67      	ldr	r3, [pc, #412]	@ (8002524 <main+0x14a4>)
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
				//BALAS J1
				bala = 0;
 800238a:	4b67      	ldr	r3, [pc, #412]	@ (8002528 <main+0x14a8>)
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
				bala_x = -1;  // Posición inicial de la bala fuera de la pantalla
 8002390:	4b66      	ldr	r3, [pc, #408]	@ (800252c <main+0x14ac>)
 8002392:	f04f 32ff 	mov.w	r2, #4294967295
 8002396:	601a      	str	r2, [r3, #0]
				bala_y = 180; // Altura inicial de la bala
 8002398:	4b65      	ldr	r3, [pc, #404]	@ (8002530 <main+0x14b0>)
 800239a:	22b4      	movs	r2, #180	@ 0xb4
 800239c:	601a      	str	r2, [r3, #0]
				//JUGADOR 2
				x2 = 290;
 800239e:	4b65      	ldr	r3, [pc, #404]	@ (8002534 <main+0x14b4>)
 80023a0:	f44f 7291 	mov.w	r2, #290	@ 0x122
 80023a4:	601a      	str	r2, [r3, #0]
				y2Estandar = 183;
 80023a6:	4b64      	ldr	r3, [pc, #400]	@ (8002538 <main+0x14b8>)
 80023a8:	22b7      	movs	r2, #183	@ 0xb7
 80023aa:	601a      	str	r2, [r3, #0]
				y2 = 183;
 80023ac:	4b63      	ldr	r3, [pc, #396]	@ (800253c <main+0x14bc>)
 80023ae:	22b7      	movs	r2, #183	@ 0xb7
 80023b0:	601a      	str	r2, [r3, #0]
				w2 = 0;
 80023b2:	4b63      	ldr	r3, [pc, #396]	@ (8002540 <main+0x14c0>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
				column2 = 0;
 80023b8:	4b62      	ldr	r3, [pc, #392]	@ (8002544 <main+0x14c4>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	601a      	str	r2, [r3, #0]
				frame2 = 1;
 80023be:	4b62      	ldr	r3, [pc, #392]	@ (8002548 <main+0x14c8>)
 80023c0:	2201      	movs	r2, #1
 80023c2:	601a      	str	r2, [r3, #0]
				flip22 = 0;
 80023c4:	4b61      	ldr	r3, [pc, #388]	@ (800254c <main+0x14cc>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
				h2 = 0;
 80023ca:	4b61      	ldr	r3, [pc, #388]	@ (8002550 <main+0x14d0>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
				vY2 = 0;
 80023d0:	4b60      	ldr	r3, [pc, #384]	@ (8002554 <main+0x14d4>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]
				jump2 = 0;
 80023d6:	4b60      	ldr	r3, [pc, #384]	@ (8002558 <main+0x14d8>)
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
				jumpcount2 = 0;
 80023dc:	4b5f      	ldr	r3, [pc, #380]	@ (800255c <main+0x14dc>)
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]
				falling2 = 1;
 80023e2:	4b5f      	ldr	r3, [pc, #380]	@ (8002560 <main+0x14e0>)
 80023e4:	2201      	movs	r2, #1
 80023e6:	601a      	str	r2, [r3, #0]
				running2 = 0;
 80023e8:	4b5e      	ldr	r3, [pc, #376]	@ (8002564 <main+0x14e4>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
				shooting2 = 0;
 80023ee:	4b5e      	ldr	r3, [pc, #376]	@ (8002568 <main+0x14e8>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
				//
				bulletskin2=0;
 80023f4:	4b5d      	ldr	r3, [pc, #372]	@ (800256c <main+0x14ec>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]
				bulleth2=0;
 80023fa:	4b5d      	ldr	r3, [pc, #372]	@ (8002570 <main+0x14f0>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
				daño2 = 0;
 8002400:	4b5c      	ldr	r3, [pc, #368]	@ (8002574 <main+0x14f4>)
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
				vidas2 =5;
 8002406:	4b5c      	ldr	r3, [pc, #368]	@ (8002578 <main+0x14f8>)
 8002408:	2205      	movs	r2, #5
 800240a:	601a      	str	r2, [r3, #0]
				winner2 = 0;
 800240c:	4b5b      	ldr	r3, [pc, #364]	@ (800257c <main+0x14fc>)
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
				//BALAS J2
				bala2 = 0;
 8002412:	4b5b      	ldr	r3, [pc, #364]	@ (8002580 <main+0x1500>)
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
				bala_x2 = -1;  // Posición inicial de la bala fuera de la pantalla
 8002418:	4b5a      	ldr	r3, [pc, #360]	@ (8002584 <main+0x1504>)
 800241a:	f04f 32ff 	mov.w	r2, #4294967295
 800241e:	601a      	str	r2, [r3, #0]
				bala_y2 = 180; // Altura inicial de la bala
 8002420:	4b59      	ldr	r3, [pc, #356]	@ (8002588 <main+0x1508>)
 8002422:	22b4      	movs	r2, #180	@ 0xb4
 8002424:	601a      	str	r2, [r3, #0]
				modo = 1;
 8002426:	4b16      	ldr	r3, [pc, #88]	@ (8002480 <main+0x1400>)
 8002428:	2201      	movs	r2, #1
 800242a:	701a      	strb	r2, [r3, #0]
 800242c:	f7fe be71 	b.w	8001112 <main+0x92>
			}
		}else if(modo==9){
 8002430:	4b13      	ldr	r3, [pc, #76]	@ (8002480 <main+0x1400>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b09      	cmp	r3, #9
 8002436:	f47e ae6c 	bne.w	8001112 <main+0x92>
			LCD_Clear(0x0000);	//PINTAR TODA LA PANTALLA DE NEGRO
 800243a:	2000      	movs	r0, #0
 800243c:	f7fe fb40 	bl	8000ac0 <LCD_Clear>
			LCD_Bitmap(69, 35, 182, 75, Titulo);
 8002440:	4b52      	ldr	r3, [pc, #328]	@ (800258c <main+0x150c>)
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	234b      	movs	r3, #75	@ 0x4b
 8002446:	22b6      	movs	r2, #182	@ 0xb6
 8002448:	2123      	movs	r1, #35	@ 0x23
 800244a:	2045      	movs	r0, #69	@ 0x45
 800244c:	f7fe fcc2 	bl	8000dd4 <LCD_Bitmap>
			LCD_Bitmap(38, 199, 243, 39, Referencias);
 8002450:	4b4f      	ldr	r3, [pc, #316]	@ (8002590 <main+0x1510>)
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	2327      	movs	r3, #39	@ 0x27
 8002456:	22f3      	movs	r2, #243	@ 0xf3
 8002458:	21c7      	movs	r1, #199	@ 0xc7
 800245a:	2026      	movs	r0, #38	@ 0x26
 800245c:	f7fe fcba 	bl	8000dd4 <LCD_Bitmap>
			/*if (load_image_from_sd_to_play("referencias.bin")) {
				LCD_Bitmap(38, 199, 243, 39, image);
			}*/
			HAL_Delay(500);
 8002460:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002464:	f003 fcf8 	bl	8005e58 <HAL_Delay>
			start = 0;
 8002468:	4b08      	ldr	r3, [pc, #32]	@ (800248c <main+0x140c>)
 800246a:	2200      	movs	r2, #0
 800246c:	701a      	strb	r2, [r3, #0]
			startcounter = 0;
 800246e:	4b0c      	ldr	r3, [pc, #48]	@ (80024a0 <main+0x1420>)
 8002470:	2200      	movs	r2, #0
 8002472:	701a      	strb	r2, [r3, #0]
			modo = 0;
 8002474:	4b02      	ldr	r3, [pc, #8]	@ (8002480 <main+0x1400>)
 8002476:	2200      	movs	r2, #0
 8002478:	701a      	strb	r2, [r3, #0]
		if(modo==0){
 800247a:	f7fe be4a 	b.w	8001112 <main+0x92>
 800247e:	bf00      	nop
 8002480:	20014090 	.word	0x20014090
 8002484:	080096e0 	.word	0x080096e0
 8002488:	080096f0 	.word	0x080096f0
 800248c:	20014095 	.word	0x20014095
 8002490:	20014091 	.word	0x20014091
 8002494:	20014092 	.word	0x20014092
 8002498:	20014093 	.word	0x20014093
 800249c:	20014094 	.word	0x20014094
 80024a0:	20014096 	.word	0x20014096
 80024a4:	20012e2a 	.word	0x20012e2a
 80024a8:	20012e2b 	.word	0x20012e2b
 80024ac:	20014097 	.word	0x20014097
 80024b0:	20014098 	.word	0x20014098
 80024b4:	20012e2c 	.word	0x20012e2c
 80024b8:	20014099 	.word	0x20014099
 80024bc:	2001409a 	.word	0x2001409a
 80024c0:	20012e2d 	.word	0x20012e2d
 80024c4:	20012e2e 	.word	0x20012e2e
 80024c8:	2001409b 	.word	0x2001409b
 80024cc:	2001409c 	.word	0x2001409c
 80024d0:	20012e2f 	.word	0x20012e2f
 80024d4:	2001409d 	.word	0x2001409d
 80024d8:	2001409e 	.word	0x2001409e
 80024dc:	200140a0 	.word	0x200140a0
 80024e0:	20012e30 	.word	0x20012e30
 80024e4:	20012e34 	.word	0x20012e34
 80024e8:	200140a4 	.word	0x200140a4
 80024ec:	200140a8 	.word	0x200140a8
 80024f0:	200140ac 	.word	0x200140ac
 80024f4:	20012e38 	.word	0x20012e38
 80024f8:	200140b0 	.word	0x200140b0
 80024fc:	200140b4 	.word	0x200140b4
 8002500:	200140b8 	.word	0x200140b8
 8002504:	200140bc 	.word	0x200140bc
 8002508:	20012e3c 	.word	0x20012e3c
 800250c:	200140c0 	.word	0x200140c0
 8002510:	200140c4 	.word	0x200140c4
 8002514:	200140c8 	.word	0x200140c8
 8002518:	200140cc 	.word	0x200140cc
 800251c:	200140d0 	.word	0x200140d0
 8002520:	20012e40 	.word	0x20012e40
 8002524:	200140d4 	.word	0x200140d4
 8002528:	200140d8 	.word	0x200140d8
 800252c:	20012e44 	.word	0x20012e44
 8002530:	20012e48 	.word	0x20012e48
 8002534:	20012e4c 	.word	0x20012e4c
 8002538:	20012e50 	.word	0x20012e50
 800253c:	20012e54 	.word	0x20012e54
 8002540:	20014104 	.word	0x20014104
 8002544:	20014108 	.word	0x20014108
 8002548:	20012e58 	.word	0x20012e58
 800254c:	2001410c 	.word	0x2001410c
 8002550:	20014110 	.word	0x20014110
 8002554:	20014114 	.word	0x20014114
 8002558:	20014118 	.word	0x20014118
 800255c:	2001411c 	.word	0x2001411c
 8002560:	20012e5c 	.word	0x20012e5c
 8002564:	20014120 	.word	0x20014120
 8002568:	20014124 	.word	0x20014124
 800256c:	20014128 	.word	0x20014128
 8002570:	2001412c 	.word	0x2001412c
 8002574:	20014130 	.word	0x20014130
 8002578:	20012e60 	.word	0x20012e60
 800257c:	20014134 	.word	0x20014134
 8002580:	20014138 	.word	0x20014138
 8002584:	20012e64 	.word	0x20012e64
 8002588:	20012e68 	.word	0x20012e68
 800258c:	20003578 	.word	0x20003578
 8002590:	2000e420 	.word	0x2000e420

08002594 <disparar_balaJ2.6>:
void disparar_balaJ2() {
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	f8c7 c004 	str.w	ip, [r7, #4]
		for (int i = 0; i < MAX_BULLETS2; i++) {
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	e02e      	b.n	8002602 <disparar_balaJ2.6+0x6e>
			if (bullet_state2[i] == 0) { // Encuentra una bala inactiva
 80025a4:	4a1c      	ldr	r2, [pc, #112]	@ (8002618 <disparar_balaJ2.6+0x84>)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	4413      	add	r3, r2
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d125      	bne.n	80025fc <disparar_balaJ2.6+0x68>
				bullet_x2[i] = flip22_[i] == 1 ? x2 + 26 : x2 -10; // Inicializa la posición
 80025b0:	4a1a      	ldr	r2, [pc, #104]	@ (800261c <disparar_balaJ2.6+0x88>)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d103      	bne.n	80025c4 <disparar_balaJ2.6+0x30>
 80025bc:	4b18      	ldr	r3, [pc, #96]	@ (8002620 <disparar_balaJ2.6+0x8c>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	331a      	adds	r3, #26
 80025c2:	e002      	b.n	80025ca <disparar_balaJ2.6+0x36>
 80025c4:	4b16      	ldr	r3, [pc, #88]	@ (8002620 <disparar_balaJ2.6+0x8c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	3b0a      	subs	r3, #10
 80025ca:	4916      	ldr	r1, [pc, #88]	@ (8002624 <disparar_balaJ2.6+0x90>)
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
				bullet_y2[i] = y2+bulleth2; // Asigna la posición Y inicial si es necesario
 80025d2:	4b15      	ldr	r3, [pc, #84]	@ (8002628 <disparar_balaJ2.6+0x94>)
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	4b15      	ldr	r3, [pc, #84]	@ (800262c <disparar_balaJ2.6+0x98>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	441a      	add	r2, r3
 80025dc:	4914      	ldr	r1, [pc, #80]	@ (8002630 <disparar_balaJ2.6+0x9c>)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				bullet_state2[i] = 1; // Marca la bala como activa
 80025e4:	4a0c      	ldr	r2, [pc, #48]	@ (8002618 <disparar_balaJ2.6+0x84>)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	4413      	add	r3, r2
 80025ea:	2201      	movs	r2, #1
 80025ec:	701a      	strb	r2, [r3, #0]
				flip22_[i]= flip22;
 80025ee:	4b11      	ldr	r3, [pc, #68]	@ (8002634 <disparar_balaJ2.6+0xa0>)
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	490a      	ldr	r1, [pc, #40]	@ (800261c <disparar_balaJ2.6+0x88>)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				break; // Sal de la búsqueda
 80025fa:	e006      	b.n	800260a <disparar_balaJ2.6+0x76>
		for (int i = 0; i < MAX_BULLETS2; i++) {
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	3301      	adds	r3, #1
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2b02      	cmp	r3, #2
 8002606:	ddcd      	ble.n	80025a4 <disparar_balaJ2.6+0x10>
	}
 8002608:	bf00      	nop
 800260a:	bf00      	nop
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	2001413c 	.word	0x2001413c
 800261c:	20014158 	.word	0x20014158
 8002620:	20012e4c 	.word	0x20012e4c
 8002624:	20014140 	.word	0x20014140
 8002628:	20012e54 	.word	0x20012e54
 800262c:	2001412c 	.word	0x2001412c
 8002630:	2001414c 	.word	0x2001414c
 8002634:	2001410c 	.word	0x2001410c

08002638 <detectar_colisionJ1.3>:
int detectar_colisionJ1(int bullet_x, int bullet_y, int disparo_x, int disparo_y, int disparo_width, int disparo_height) {
 8002638:	b480      	push	{r7}
 800263a:	b087      	sub	sp, #28
 800263c:	af00      	add	r7, sp, #0
 800263e:	6178      	str	r0, [r7, #20]
 8002640:	6139      	str	r1, [r7, #16]
 8002642:	60fa      	str	r2, [r7, #12]
 8002644:	60bb      	str	r3, [r7, #8]
 8002646:	f8c7 c004 	str.w	ip, [r7, #4]
	if (bullet_x >= disparo_x && bullet_x <= (disparo_x + disparo_width) &&
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	429a      	cmp	r2, r3
 8002650:	db25      	blt.n	800269e <detectar_colisionJ1.3+0x66>
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	6a3b      	ldr	r3, [r7, #32]
 8002656:	4413      	add	r3, r2
 8002658:	697a      	ldr	r2, [r7, #20]
 800265a:	429a      	cmp	r2, r3
 800265c:	dc1f      	bgt.n	800269e <detectar_colisionJ1.3+0x66>
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	429a      	cmp	r2, r3
 8002664:	db1b      	blt.n	800269e <detectar_colisionJ1.3+0x66>
		bullet_y >= disparo_y && bullet_y <= (disparo_y + disparo_height)) {
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266a:	4413      	add	r3, r2
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	429a      	cmp	r2, r3
 8002670:	dc15      	bgt.n	800269e <detectar_colisionJ1.3+0x66>
		vidas1 = vidas1-daño1;
 8002672:	4b0e      	ldr	r3, [pc, #56]	@ (80026ac <detectar_colisionJ1.3+0x74>)
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	4b0e      	ldr	r3, [pc, #56]	@ (80026b0 <detectar_colisionJ1.3+0x78>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	4a0b      	ldr	r2, [pc, #44]	@ (80026ac <detectar_colisionJ1.3+0x74>)
 800267e:	6013      	str	r3, [r2, #0]
		frame2 = 10;
 8002680:	4b0c      	ldr	r3, [pc, #48]	@ (80026b4 <detectar_colisionJ1.3+0x7c>)
 8002682:	220a      	movs	r2, #10
 8002684:	601a      	str	r2, [r3, #0]
		if (vidas1 <= 0) {
 8002686:	4b09      	ldr	r3, [pc, #36]	@ (80026ac <detectar_colisionJ1.3+0x74>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	dc05      	bgt.n	800269a <detectar_colisionJ1.3+0x62>
			winner1 = 1;
 800268e:	4b0a      	ldr	r3, [pc, #40]	@ (80026b8 <detectar_colisionJ1.3+0x80>)
 8002690:	2201      	movs	r2, #1
 8002692:	601a      	str	r2, [r3, #0]
			modo = 7;
 8002694:	4b09      	ldr	r3, [pc, #36]	@ (80026bc <detectar_colisionJ1.3+0x84>)
 8002696:	2207      	movs	r2, #7
 8002698:	701a      	strb	r2, [r3, #0]
		return 1; // Colisión detectada
 800269a:	2301      	movs	r3, #1
 800269c:	e000      	b.n	80026a0 <detectar_colisionJ1.3+0x68>
	return 0; // No hay colisión
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	371c      	adds	r7, #28
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	20012e40 	.word	0x20012e40
 80026b0:	200140d0 	.word	0x200140d0
 80026b4:	20012e58 	.word	0x20012e58
 80026b8:	200140d4 	.word	0x200140d4
 80026bc:	20014090 	.word	0x20014090

080026c0 <detectar_colisionJ2.8>:
int detectar_colisionJ2(int bullet_x, int bullet_y, int disparo_x, int disparo_y, int disparo_width, int disparo_height) {
 80026c0:	b480      	push	{r7}
 80026c2:	b087      	sub	sp, #28
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6178      	str	r0, [r7, #20]
 80026c8:	6139      	str	r1, [r7, #16]
 80026ca:	60fa      	str	r2, [r7, #12]
 80026cc:	60bb      	str	r3, [r7, #8]
 80026ce:	f8c7 c004 	str.w	ip, [r7, #4]
	if (bullet_x >= disparo_x && bullet_x <= (disparo_x + disparo_width) &&
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	db25      	blt.n	8002726 <detectar_colisionJ2.8+0x66>
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	4413      	add	r3, r2
 80026e0:	697a      	ldr	r2, [r7, #20]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	dc1f      	bgt.n	8002726 <detectar_colisionJ2.8+0x66>
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	db1b      	blt.n	8002726 <detectar_colisionJ2.8+0x66>
		bullet_y >= disparo_y && bullet_y <= (disparo_y + disparo_height)) {
 80026ee:	68ba      	ldr	r2, [r7, #8]
 80026f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f2:	4413      	add	r3, r2
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	dc15      	bgt.n	8002726 <detectar_colisionJ2.8+0x66>
		vidas2 = vidas2-daño2;
 80026fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002734 <detectar_colisionJ2.8+0x74>)
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002738 <detectar_colisionJ2.8+0x78>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	4a0b      	ldr	r2, [pc, #44]	@ (8002734 <detectar_colisionJ2.8+0x74>)
 8002706:	6013      	str	r3, [r2, #0]
		frame1 = 10;
 8002708:	4b0c      	ldr	r3, [pc, #48]	@ (800273c <detectar_colisionJ2.8+0x7c>)
 800270a:	220a      	movs	r2, #10
 800270c:	601a      	str	r2, [r3, #0]
		if (vidas2 <= 0) {
 800270e:	4b09      	ldr	r3, [pc, #36]	@ (8002734 <detectar_colisionJ2.8+0x74>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	dc05      	bgt.n	8002722 <detectar_colisionJ2.8+0x62>
			winner2 = 1;
 8002716:	4b0a      	ldr	r3, [pc, #40]	@ (8002740 <detectar_colisionJ2.8+0x80>)
 8002718:	2201      	movs	r2, #1
 800271a:	601a      	str	r2, [r3, #0]
			modo = 7;
 800271c:	4b09      	ldr	r3, [pc, #36]	@ (8002744 <detectar_colisionJ2.8+0x84>)
 800271e:	2207      	movs	r2, #7
 8002720:	701a      	strb	r2, [r3, #0]
		return 1; // Colisión detectada
 8002722:	2301      	movs	r3, #1
 8002724:	e000      	b.n	8002728 <detectar_colisionJ2.8+0x68>
	return 0; // No hay colisión
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	371c      	adds	r7, #28
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	20012e60 	.word	0x20012e60
 8002738:	20014130 	.word	0x20014130
 800273c:	20012e38 	.word	0x20012e38
 8002740:	20014134 	.word	0x20014134
 8002744:	20014090 	.word	0x20014090

08002748 <mostrar_vidasJ1.9>:
void mostrar_vidasJ1() {
 8002748:	b580      	push	{r7, lr}
 800274a:	b08a      	sub	sp, #40	@ 0x28
 800274c:	af02      	add	r7, sp, #8
 800274e:	f8c7 c004 	str.w	ip, [r7, #4]
	sprintf(buffer, "Vidas: %d", vidas2); // Formatea el mensaje
 8002752:	4b0c      	ldr	r3, [pc, #48]	@ (8002784 <mostrar_vidasJ1.9+0x3c>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	f107 030c 	add.w	r3, r7, #12
 800275a:	490b      	ldr	r1, [pc, #44]	@ (8002788 <mostrar_vidasJ1.9+0x40>)
 800275c:	4618      	mov	r0, r3
 800275e:	f006 fad1 	bl	8008d04 <siprintf>
	LCD_Print(buffer, 20, 7, 1, 0xFFFFFF, 0x2104); // Muestra las vidas en blanco
 8002762:	f107 000c 	add.w	r0, r7, #12
 8002766:	f242 1304 	movw	r3, #8452	@ 0x2104
 800276a:	9301      	str	r3, [sp, #4]
 800276c:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	2301      	movs	r3, #1
 8002774:	2207      	movs	r2, #7
 8002776:	2114      	movs	r1, #20
 8002778:	f7fe fa40 	bl	8000bfc <LCD_Print>
}
 800277c:	bf00      	nop
 800277e:	3720      	adds	r7, #32
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	20012e60 	.word	0x20012e60
 8002788:	08009700 	.word	0x08009700

0800278c <mostrar_vidasJ2.4>:
void mostrar_vidasJ2() {
 800278c:	b580      	push	{r7, lr}
 800278e:	b08a      	sub	sp, #40	@ 0x28
 8002790:	af02      	add	r7, sp, #8
 8002792:	f8c7 c004 	str.w	ip, [r7, #4]
	sprintf(buffer, "Vidas: %d", vidas1); // Formatea el mensaje
 8002796:	4b0c      	ldr	r3, [pc, #48]	@ (80027c8 <mostrar_vidasJ2.4+0x3c>)
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	f107 030c 	add.w	r3, r7, #12
 800279e:	490b      	ldr	r1, [pc, #44]	@ (80027cc <mostrar_vidasJ2.4+0x40>)
 80027a0:	4618      	mov	r0, r3
 80027a2:	f006 faaf 	bl	8008d04 <siprintf>
	LCD_Print(buffer, 240, 7, 1, 0xFFFFFF, 0x2104); // Muestra las vidas en blanco
 80027a6:	f107 000c 	add.w	r0, r7, #12
 80027aa:	f242 1304 	movw	r3, #8452	@ 0x2104
 80027ae:	9301      	str	r3, [sp, #4]
 80027b0:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 80027b4:	9300      	str	r3, [sp, #0]
 80027b6:	2301      	movs	r3, #1
 80027b8:	2207      	movs	r2, #7
 80027ba:	21f0      	movs	r1, #240	@ 0xf0
 80027bc:	f7fe fa1e 	bl	8000bfc <LCD_Print>
}
 80027c0:	bf00      	nop
 80027c2:	3720      	adds	r7, #32
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	20012e40 	.word	0x20012e40
 80027cc:	08009700 	.word	0x08009700

080027d0 <mover_balaJ1.2>:
void mover_balaJ1() {
 80027d0:	b5b0      	push	{r4, r5, r7, lr}
 80027d2:	b08a      	sub	sp, #40	@ 0x28
 80027d4:	af06      	add	r7, sp, #24
 80027d6:	4664      	mov	r4, ip
 80027d8:	f8c7 c004 	str.w	ip, [r7, #4]
		for (int i = 0; i < MAX_BULLETS; i++) {
 80027dc:	2300      	movs	r3, #0
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	e0c0      	b.n	8002964 <mover_balaJ1.2+0x194>
			if (bullet_state[i] == 1) { // Si la bala está activa
 80027e2:	4a65      	ldr	r2, [pc, #404]	@ (8002978 <mover_balaJ1.2+0x1a8>)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4413      	add	r3, r2
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	f040 80b7 	bne.w	800295e <mover_balaJ1.2+0x18e>
				if (flip1_[i] == 1) {
 80027f0:	4a62      	ldr	r2, [pc, #392]	@ (800297c <mover_balaJ1.2+0x1ac>)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d112      	bne.n	8002822 <mover_balaJ1.2+0x52>
					FillRect(bullet_x[i] - 5, bullet_y[i], 11, 9, 0x2104);
 80027fc:	4a60      	ldr	r2, [pc, #384]	@ (8002980 <mover_balaJ1.2+0x1b0>)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002804:	3b05      	subs	r3, #5
 8002806:	4618      	mov	r0, r3
 8002808:	4a5e      	ldr	r2, [pc, #376]	@ (8002984 <mover_balaJ1.2+0x1b4>)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002810:	4619      	mov	r1, r3
 8002812:	f242 1304 	movw	r3, #8452	@ 0x2104
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	2309      	movs	r3, #9
 800281a:	220b      	movs	r2, #11
 800281c:	f7fe f994 	bl	8000b48 <FillRect>
 8002820:	e015      	b.n	800284e <mover_balaJ1.2+0x7e>
				} else if (flip1 == 0){
 8002822:	4b59      	ldr	r3, [pc, #356]	@ (8002988 <mover_balaJ1.2+0x1b8>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d111      	bne.n	800284e <mover_balaJ1.2+0x7e>
					FillRect(bullet_x[i] + 5, bullet_y[i], 11, 9, 0x2104);
 800282a:	4a55      	ldr	r2, [pc, #340]	@ (8002980 <mover_balaJ1.2+0x1b0>)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002832:	3305      	adds	r3, #5
 8002834:	4618      	mov	r0, r3
 8002836:	4a53      	ldr	r2, [pc, #332]	@ (8002984 <mover_balaJ1.2+0x1b4>)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800283e:	4619      	mov	r1, r3
 8002840:	f242 1304 	movw	r3, #8452	@ 0x2104
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	2309      	movs	r3, #9
 8002848:	220b      	movs	r2, #11
 800284a:	f7fe f97d 	bl	8000b48 <FillRect>
				if (flip1_[i] == 1) {
 800284e:	4a4b      	ldr	r2, [pc, #300]	@ (800297c <mover_balaJ1.2+0x1ac>)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d109      	bne.n	800286e <mover_balaJ1.2+0x9e>
					bullet_x[i] += 5;  // Mover hacia la derecha
 800285a:	4a49      	ldr	r2, [pc, #292]	@ (8002980 <mover_balaJ1.2+0x1b0>)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002862:	1d5a      	adds	r2, r3, #5
 8002864:	4946      	ldr	r1, [pc, #280]	@ (8002980 <mover_balaJ1.2+0x1b0>)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800286c:	e008      	b.n	8002880 <mover_balaJ1.2+0xb0>
					bullet_x[i] -= 5;  // Mover hacia la izquierda
 800286e:	4a44      	ldr	r2, [pc, #272]	@ (8002980 <mover_balaJ1.2+0x1b0>)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002876:	1f5a      	subs	r2, r3, #5
 8002878:	4941      	ldr	r1, [pc, #260]	@ (8002980 <mover_balaJ1.2+0x1b0>)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			   if (detectar_colisionJ1(bullet_x[i], bullet_y[i], x2, y2, 24, 24)) {
 8002880:	4a3f      	ldr	r2, [pc, #252]	@ (8002980 <mover_balaJ1.2+0x1b0>)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002888:	4a3e      	ldr	r2, [pc, #248]	@ (8002984 <mover_balaJ1.2+0x1b4>)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002890:	4b3e      	ldr	r3, [pc, #248]	@ (800298c <mover_balaJ1.2+0x1bc>)
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	4b3e      	ldr	r3, [pc, #248]	@ (8002990 <mover_balaJ1.2+0x1c0>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2518      	movs	r5, #24
 800289a:	9501      	str	r5, [sp, #4]
 800289c:	2518      	movs	r5, #24
 800289e:	9500      	str	r5, [sp, #0]
 80028a0:	46a4      	mov	ip, r4
 80028a2:	f7ff fec9 	bl	8002638 <detectar_colisionJ1.3>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d025      	beq.n	80028f8 <mover_balaJ1.2+0x128>
				   mostrar_vidasJ2();
 80028ac:	46a4      	mov	ip, r4
 80028ae:	f7ff ff6d 	bl	800278c <mostrar_vidasJ2.4>
					 FillRect(bullet_x[i] - 3, bullet_y[i], 10, 8, 0x2104); // Borrar la bala
 80028b2:	4a33      	ldr	r2, [pc, #204]	@ (8002980 <mover_balaJ1.2+0x1b0>)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ba:	3b03      	subs	r3, #3
 80028bc:	4618      	mov	r0, r3
 80028be:	4a31      	ldr	r2, [pc, #196]	@ (8002984 <mover_balaJ1.2+0x1b4>)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028c6:	4619      	mov	r1, r3
 80028c8:	f242 1304 	movw	r3, #8452	@ 0x2104
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	2308      	movs	r3, #8
 80028d0:	220a      	movs	r2, #10
 80028d2:	f7fe f939 	bl	8000b48 <FillRect>
					 bullet_state[i] = 0; // Desactivar la bala
 80028d6:	4a28      	ldr	r2, [pc, #160]	@ (8002978 <mover_balaJ1.2+0x1a8>)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4413      	add	r3, r2
 80028dc:	2200      	movs	r2, #0
 80028de:	701a      	strb	r2, [r3, #0]
					 bullet_x[i] = -1; // Reiniciar la posición
 80028e0:	4a27      	ldr	r2, [pc, #156]	@ (8002980 <mover_balaJ1.2+0x1b0>)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f04f 31ff 	mov.w	r1, #4294967295
 80028e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					 bullet_y[i] = -1; // Reiniciar la posición
 80028ec:	4a25      	ldr	r2, [pc, #148]	@ (8002984 <mover_balaJ1.2+0x1b4>)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f04f 31ff 	mov.w	r1, #4294967295
 80028f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				if (bullet_x[i] < -8 || bullet_x[i] > 320) {
 80028f8:	4a21      	ldr	r2, [pc, #132]	@ (8002980 <mover_balaJ1.2+0x1b0>)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002900:	f113 0f08 	cmn.w	r3, #8
 8002904:	db06      	blt.n	8002914 <mover_balaJ1.2+0x144>
 8002906:	4a1e      	ldr	r2, [pc, #120]	@ (8002980 <mover_balaJ1.2+0x1b0>)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800290e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002912:	dd0b      	ble.n	800292c <mover_balaJ1.2+0x15c>
					bullet_x[i] = -1; // Reinicia la posición
 8002914:	4a1a      	ldr	r2, [pc, #104]	@ (8002980 <mover_balaJ1.2+0x1b0>)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f04f 31ff 	mov.w	r1, #4294967295
 800291c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					bullet_state[i] = 0; // Marca la bala como inactiva
 8002920:	4a15      	ldr	r2, [pc, #84]	@ (8002978 <mover_balaJ1.2+0x1a8>)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	4413      	add	r3, r2
 8002926:	2200      	movs	r2, #0
 8002928:	701a      	strb	r2, [r3, #0]
 800292a:	e018      	b.n	800295e <mover_balaJ1.2+0x18e>
					LCD_Sprite(bullet_x[i], bullet_y[i], 10, 8, Bala, 3, bulletskin1, flip1, 0);
 800292c:	4a14      	ldr	r2, [pc, #80]	@ (8002980 <mover_balaJ1.2+0x1b0>)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002934:	4a13      	ldr	r2, [pc, #76]	@ (8002984 <mover_balaJ1.2+0x1b4>)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800293c:	4b15      	ldr	r3, [pc, #84]	@ (8002994 <mover_balaJ1.2+0x1c4>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a11      	ldr	r2, [pc, #68]	@ (8002988 <mover_balaJ1.2+0x1b8>)
 8002942:	6812      	ldr	r2, [r2, #0]
 8002944:	b2d2      	uxtb	r2, r2
 8002946:	2500      	movs	r5, #0
 8002948:	9504      	str	r5, [sp, #16]
 800294a:	9203      	str	r2, [sp, #12]
 800294c:	9302      	str	r3, [sp, #8]
 800294e:	2303      	movs	r3, #3
 8002950:	9301      	str	r3, [sp, #4]
 8002952:	4b11      	ldr	r3, [pc, #68]	@ (8002998 <mover_balaJ1.2+0x1c8>)
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	2308      	movs	r3, #8
 8002958:	220a      	movs	r2, #10
 800295a:	f7fe fa95 	bl	8000e88 <LCD_Sprite>
		for (int i = 0; i < MAX_BULLETS; i++) {
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	3301      	adds	r3, #1
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2b02      	cmp	r3, #2
 8002968:	f77f af3b 	ble.w	80027e2 <mover_balaJ1.2+0x12>
	}
 800296c:	bf00      	nop
 800296e:	bf00      	nop
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bdb0      	pop	{r4, r5, r7, pc}
 8002976:	bf00      	nop
 8002978:	200140dc 	.word	0x200140dc
 800297c:	200140f8 	.word	0x200140f8
 8002980:	200140e0 	.word	0x200140e0
 8002984:	200140ec 	.word	0x200140ec
 8002988:	200140b0 	.word	0x200140b0
 800298c:	20012e4c 	.word	0x20012e4c
 8002990:	20012e54 	.word	0x20012e54
 8002994:	200140c8 	.word	0x200140c8
 8002998:	20003398 	.word	0x20003398

0800299c <mover_balaJ2.7>:
void mover_balaJ2() {
 800299c:	b5b0      	push	{r4, r5, r7, lr}
 800299e:	b08a      	sub	sp, #40	@ 0x28
 80029a0:	af06      	add	r7, sp, #24
 80029a2:	4664      	mov	r4, ip
 80029a4:	f8c7 c004 	str.w	ip, [r7, #4]
		for (int i = 0; i < MAX_BULLETS2; i++) {
 80029a8:	2300      	movs	r3, #0
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	e0bc      	b.n	8002b28 <mover_balaJ2.7+0x18c>
			if (bullet_state2[i] == 1) { // Si la bala está activa
 80029ae:	4a63      	ldr	r2, [pc, #396]	@ (8002b3c <mover_balaJ2.7+0x1a0>)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4413      	add	r3, r2
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	f040 80b3 	bne.w	8002b22 <mover_balaJ2.7+0x186>
				if (flip22_[i] == 1) {
 80029bc:	4a60      	ldr	r2, [pc, #384]	@ (8002b40 <mover_balaJ2.7+0x1a4>)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d112      	bne.n	80029ee <mover_balaJ2.7+0x52>
					FillRect(bullet_x2[i] - 5, bullet_y2[i], 11, 9, 0x2104);
 80029c8:	4a5e      	ldr	r2, [pc, #376]	@ (8002b44 <mover_balaJ2.7+0x1a8>)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029d0:	3b05      	subs	r3, #5
 80029d2:	4618      	mov	r0, r3
 80029d4:	4a5c      	ldr	r2, [pc, #368]	@ (8002b48 <mover_balaJ2.7+0x1ac>)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029dc:	4619      	mov	r1, r3
 80029de:	f242 1304 	movw	r3, #8452	@ 0x2104
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	2309      	movs	r3, #9
 80029e6:	220b      	movs	r2, #11
 80029e8:	f7fe f8ae 	bl	8000b48 <FillRect>
 80029ec:	e011      	b.n	8002a12 <mover_balaJ2.7+0x76>
					FillRect(bullet_x2[i] + 5, bullet_y2[i], 11, 9, 0x2104);
 80029ee:	4a55      	ldr	r2, [pc, #340]	@ (8002b44 <mover_balaJ2.7+0x1a8>)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f6:	3305      	adds	r3, #5
 80029f8:	4618      	mov	r0, r3
 80029fa:	4a53      	ldr	r2, [pc, #332]	@ (8002b48 <mover_balaJ2.7+0x1ac>)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a02:	4619      	mov	r1, r3
 8002a04:	f242 1304 	movw	r3, #8452	@ 0x2104
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	2309      	movs	r3, #9
 8002a0c:	220b      	movs	r2, #11
 8002a0e:	f7fe f89b 	bl	8000b48 <FillRect>
				if (flip22_[i] == 1) {
 8002a12:	4a4b      	ldr	r2, [pc, #300]	@ (8002b40 <mover_balaJ2.7+0x1a4>)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d109      	bne.n	8002a32 <mover_balaJ2.7+0x96>
					bullet_x2[i] += 5;  // Mover hacia la derecha
 8002a1e:	4a49      	ldr	r2, [pc, #292]	@ (8002b44 <mover_balaJ2.7+0x1a8>)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a26:	1d5a      	adds	r2, r3, #5
 8002a28:	4946      	ldr	r1, [pc, #280]	@ (8002b44 <mover_balaJ2.7+0x1a8>)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002a30:	e008      	b.n	8002a44 <mover_balaJ2.7+0xa8>
					bullet_x2[i] -= 5;  // Mover hacia la izquierda
 8002a32:	4a44      	ldr	r2, [pc, #272]	@ (8002b44 <mover_balaJ2.7+0x1a8>)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a3a:	1f5a      	subs	r2, r3, #5
 8002a3c:	4941      	ldr	r1, [pc, #260]	@ (8002b44 <mover_balaJ2.7+0x1a8>)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			   if (detectar_colisionJ2(bullet_x2[i], bullet_y2[i], x1, y1, 24, 24)) {
 8002a44:	4a3f      	ldr	r2, [pc, #252]	@ (8002b44 <mover_balaJ2.7+0x1a8>)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002a4c:	4a3e      	ldr	r2, [pc, #248]	@ (8002b48 <mover_balaJ2.7+0x1ac>)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002a54:	4b3d      	ldr	r3, [pc, #244]	@ (8002b4c <mover_balaJ2.7+0x1b0>)
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	4b3d      	ldr	r3, [pc, #244]	@ (8002b50 <mover_balaJ2.7+0x1b4>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2518      	movs	r5, #24
 8002a5e:	9501      	str	r5, [sp, #4]
 8002a60:	2518      	movs	r5, #24
 8002a62:	9500      	str	r5, [sp, #0]
 8002a64:	46a4      	mov	ip, r4
 8002a66:	f7ff fe2b 	bl	80026c0 <detectar_colisionJ2.8>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d025      	beq.n	8002abc <mover_balaJ2.7+0x120>
				   mostrar_vidasJ1();
 8002a70:	46a4      	mov	ip, r4
 8002a72:	f7ff fe69 	bl	8002748 <mostrar_vidasJ1.9>
					 FillRect(bullet_x2[i] - 2, bullet_y2[i], 10, 8, 0x2104); // Borrar la bala
 8002a76:	4a33      	ldr	r2, [pc, #204]	@ (8002b44 <mover_balaJ2.7+0x1a8>)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a7e:	3b02      	subs	r3, #2
 8002a80:	4618      	mov	r0, r3
 8002a82:	4a31      	ldr	r2, [pc, #196]	@ (8002b48 <mover_balaJ2.7+0x1ac>)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	f242 1304 	movw	r3, #8452	@ 0x2104
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	2308      	movs	r3, #8
 8002a94:	220a      	movs	r2, #10
 8002a96:	f7fe f857 	bl	8000b48 <FillRect>
					 bullet_state2[i] = 0; // Desactivar la bala
 8002a9a:	4a28      	ldr	r2, [pc, #160]	@ (8002b3c <mover_balaJ2.7+0x1a0>)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	701a      	strb	r2, [r3, #0]
					 bullet_x2[i] = -1; // Reiniciar la posición
 8002aa4:	4a27      	ldr	r2, [pc, #156]	@ (8002b44 <mover_balaJ2.7+0x1a8>)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8002aac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					 bullet_y2[i] = -1; // Reiniciar la posición
 8002ab0:	4a25      	ldr	r2, [pc, #148]	@ (8002b48 <mover_balaJ2.7+0x1ac>)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ab8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				if (bullet_x2[i] < -8 || bullet_x2[i] > 320) {
 8002abc:	4a21      	ldr	r2, [pc, #132]	@ (8002b44 <mover_balaJ2.7+0x1a8>)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ac4:	f113 0f08 	cmn.w	r3, #8
 8002ac8:	db06      	blt.n	8002ad8 <mover_balaJ2.7+0x13c>
 8002aca:	4a1e      	ldr	r2, [pc, #120]	@ (8002b44 <mover_balaJ2.7+0x1a8>)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ad2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002ad6:	dd0b      	ble.n	8002af0 <mover_balaJ2.7+0x154>
					bullet_x2[i] = -1; // Reinicia la posición
 8002ad8:	4a1a      	ldr	r2, [pc, #104]	@ (8002b44 <mover_balaJ2.7+0x1a8>)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ae0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					bullet_state2[i] = 0; // Marca la bala como inactiva
 8002ae4:	4a15      	ldr	r2, [pc, #84]	@ (8002b3c <mover_balaJ2.7+0x1a0>)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	4413      	add	r3, r2
 8002aea:	2200      	movs	r2, #0
 8002aec:	701a      	strb	r2, [r3, #0]
 8002aee:	e018      	b.n	8002b22 <mover_balaJ2.7+0x186>
					LCD_Sprite(bullet_x2[i], bullet_y2[i], 10, 8, Bala, 3, bulletskin2, flip22, 0);
 8002af0:	4a14      	ldr	r2, [pc, #80]	@ (8002b44 <mover_balaJ2.7+0x1a8>)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002af8:	4a13      	ldr	r2, [pc, #76]	@ (8002b48 <mover_balaJ2.7+0x1ac>)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002b00:	4b14      	ldr	r3, [pc, #80]	@ (8002b54 <mover_balaJ2.7+0x1b8>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a14      	ldr	r2, [pc, #80]	@ (8002b58 <mover_balaJ2.7+0x1bc>)
 8002b06:	6812      	ldr	r2, [r2, #0]
 8002b08:	b2d2      	uxtb	r2, r2
 8002b0a:	2500      	movs	r5, #0
 8002b0c:	9504      	str	r5, [sp, #16]
 8002b0e:	9203      	str	r2, [sp, #12]
 8002b10:	9302      	str	r3, [sp, #8]
 8002b12:	2303      	movs	r3, #3
 8002b14:	9301      	str	r3, [sp, #4]
 8002b16:	4b11      	ldr	r3, [pc, #68]	@ (8002b5c <mover_balaJ2.7+0x1c0>)
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	2308      	movs	r3, #8
 8002b1c:	220a      	movs	r2, #10
 8002b1e:	f7fe f9b3 	bl	8000e88 <LCD_Sprite>
		for (int i = 0; i < MAX_BULLETS2; i++) {
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	3301      	adds	r3, #1
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	f77f af3f 	ble.w	80029ae <mover_balaJ2.7+0x12>
	}
 8002b30:	bf00      	nop
 8002b32:	bf00      	nop
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bdb0      	pop	{r4, r5, r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	2001413c 	.word	0x2001413c
 8002b40:	20014158 	.word	0x20014158
 8002b44:	20014140 	.word	0x20014140
 8002b48:	2001414c 	.word	0x2001414c
 8002b4c:	200140a0 	.word	0x200140a0
 8002b50:	20012e34 	.word	0x20012e34
 8002b54:	20014128 	.word	0x20014128
 8002b58:	2001410c 	.word	0x2001410c
 8002b5c:	20003398 	.word	0x20003398

08002b60 <Jugador1.0>:
void Jugador1(){
 8002b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b64:	b088      	sub	sp, #32
 8002b66:	af06      	add	r7, sp, #24
 8002b68:	46e0      	mov	r8, ip
 8002b6a:	f8c7 c004 	str.w	ip, [r7, #4]
	HAL_Delay(5);
 8002b6e:	2005      	movs	r0, #5
 8002b70:	f003 f972 	bl	8005e58 <HAL_Delay>
	if(ch1 == 1){
 8002b74:	4b93      	ldr	r3, [pc, #588]	@ (8002dc4 <Jugador1.0+0x264>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	f040 80a4 	bne.w	8002cc6 <Jugador1.0+0x166>
		LCD_Sprite(x1, y1, w1, h1, megamanA, column1, frame1, flip1, 0);
 8002b7e:	4b92      	ldr	r3, [pc, #584]	@ (8002dc8 <Jugador1.0+0x268>)
 8002b80:	6818      	ldr	r0, [r3, #0]
 8002b82:	4b92      	ldr	r3, [pc, #584]	@ (8002dcc <Jugador1.0+0x26c>)
 8002b84:	681d      	ldr	r5, [r3, #0]
 8002b86:	4b92      	ldr	r3, [pc, #584]	@ (8002dd0 <Jugador1.0+0x270>)
 8002b88:	681e      	ldr	r6, [r3, #0]
 8002b8a:	4b92      	ldr	r3, [pc, #584]	@ (8002dd4 <Jugador1.0+0x274>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	603b      	str	r3, [r7, #0]
 8002b90:	4b91      	ldr	r3, [pc, #580]	@ (8002dd8 <Jugador1.0+0x278>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a91      	ldr	r2, [pc, #580]	@ (8002ddc <Jugador1.0+0x27c>)
 8002b96:	6812      	ldr	r2, [r2, #0]
 8002b98:	4991      	ldr	r1, [pc, #580]	@ (8002de0 <Jugador1.0+0x280>)
 8002b9a:	6809      	ldr	r1, [r1, #0]
 8002b9c:	b2c9      	uxtb	r1, r1
 8002b9e:	2400      	movs	r4, #0
 8002ba0:	9404      	str	r4, [sp, #16]
 8002ba2:	9103      	str	r1, [sp, #12]
 8002ba4:	9202      	str	r2, [sp, #8]
 8002ba6:	9301      	str	r3, [sp, #4]
 8002ba8:	4b8e      	ldr	r3, [pc, #568]	@ (8002de4 <Jugador1.0+0x284>)
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	4632      	mov	r2, r6
 8002bb0:	4629      	mov	r1, r5
 8002bb2:	f7fe f969 	bl	8000e88 <LCD_Sprite>
		y1 = y1+vY1;
 8002bb6:	4b85      	ldr	r3, [pc, #532]	@ (8002dcc <Jugador1.0+0x26c>)
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	4b8b      	ldr	r3, [pc, #556]	@ (8002de8 <Jugador1.0+0x288>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	4a82      	ldr	r2, [pc, #520]	@ (8002dcc <Jugador1.0+0x26c>)
 8002bc2:	6013      	str	r3, [r2, #0]
		if(jump1 == 1){
 8002bc4:	4b89      	ldr	r3, [pc, #548]	@ (8002dec <Jugador1.0+0x28c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d146      	bne.n	8002c5a <Jugador1.0+0xfa>
			vY1++;
 8002bcc:	4b86      	ldr	r3, [pc, #536]	@ (8002de8 <Jugador1.0+0x288>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	4a85      	ldr	r2, [pc, #532]	@ (8002de8 <Jugador1.0+0x288>)
 8002bd4:	6013      	str	r3, [r2, #0]
			if (falling1 == 0){
 8002bd6:	4b86      	ldr	r3, [pc, #536]	@ (8002df0 <Jugador1.0+0x290>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10e      	bne.n	8002bfc <Jugador1.0+0x9c>
				FillRect(x1, y1+31, 33, 9, 0x2104);
 8002bde:	4b7a      	ldr	r3, [pc, #488]	@ (8002dc8 <Jugador1.0+0x268>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	4b79      	ldr	r3, [pc, #484]	@ (8002dcc <Jugador1.0+0x26c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	331f      	adds	r3, #31
 8002bea:	4619      	mov	r1, r3
 8002bec:	f242 1304 	movw	r3, #8452	@ 0x2104
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	2309      	movs	r3, #9
 8002bf4:	2221      	movs	r2, #33	@ 0x21
 8002bf6:	f7fd ffa7 	bl	8000b48 <FillRect>
 8002bfa:	e011      	b.n	8002c20 <Jugador1.0+0xc0>
			}else if (falling1 == 1){
 8002bfc:	4b7c      	ldr	r3, [pc, #496]	@ (8002df0 <Jugador1.0+0x290>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d10d      	bne.n	8002c20 <Jugador1.0+0xc0>
				FillRect(x1, y1-24, 33, 25, 0x2104);
 8002c04:	4b70      	ldr	r3, [pc, #448]	@ (8002dc8 <Jugador1.0+0x268>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	4b70      	ldr	r3, [pc, #448]	@ (8002dcc <Jugador1.0+0x26c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	3b18      	subs	r3, #24
 8002c10:	4619      	mov	r1, r3
 8002c12:	f242 1304 	movw	r3, #8452	@ 0x2104
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	2319      	movs	r3, #25
 8002c1a:	2221      	movs	r2, #33	@ 0x21
 8002c1c:	f7fd ff94 	bl	8000b48 <FillRect>
			if(vY1 == 0){
 8002c20:	4b71      	ldr	r3, [pc, #452]	@ (8002de8 <Jugador1.0+0x288>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d102      	bne.n	8002c2e <Jugador1.0+0xce>
				falling1 = 1;
 8002c28:	4b71      	ldr	r3, [pc, #452]	@ (8002df0 <Jugador1.0+0x290>)
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	601a      	str	r2, [r3, #0]
			if(y1 >= y1Estandar){
 8002c2e:	4b67      	ldr	r3, [pc, #412]	@ (8002dcc <Jugador1.0+0x26c>)
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	4b70      	ldr	r3, [pc, #448]	@ (8002df4 <Jugador1.0+0x294>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	db0f      	blt.n	8002c5a <Jugador1.0+0xfa>
				vY1 = 0;
 8002c3a:	4b6b      	ldr	r3, [pc, #428]	@ (8002de8 <Jugador1.0+0x288>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
				jump1 = 0;
 8002c40:	4b6a      	ldr	r3, [pc, #424]	@ (8002dec <Jugador1.0+0x28c>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	601a      	str	r2, [r3, #0]
				y1 = y1Estandar;
 8002c46:	4b6b      	ldr	r3, [pc, #428]	@ (8002df4 <Jugador1.0+0x294>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a60      	ldr	r2, [pc, #384]	@ (8002dcc <Jugador1.0+0x26c>)
 8002c4c:	6013      	str	r3, [r2, #0]
				frame1 = 0;
 8002c4e:	4b63      	ldr	r3, [pc, #396]	@ (8002ddc <Jugador1.0+0x27c>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
				jumpcount1 = 0;
 8002c54:	4b68      	ldr	r3, [pc, #416]	@ (8002df8 <Jugador1.0+0x298>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	601a      	str	r2, [r3, #0]
		if(caminarD == 1){
 8002c5a:	4b68      	ldr	r3, [pc, #416]	@ (8002dfc <Jugador1.0+0x29c>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d110      	bne.n	8002c84 <Jugador1.0+0x124>
			FillRect(x1-7, y1, 7, 32, 0x2104);	//2104
 8002c62:	4b59      	ldr	r3, [pc, #356]	@ (8002dc8 <Jugador1.0+0x268>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	3b07      	subs	r3, #7
 8002c68:	4618      	mov	r0, r3
 8002c6a:	4b58      	ldr	r3, [pc, #352]	@ (8002dcc <Jugador1.0+0x26c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4619      	mov	r1, r3
 8002c70:	f242 1304 	movw	r3, #8452	@ 0x2104
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	2320      	movs	r3, #32
 8002c78:	2207      	movs	r2, #7
 8002c7a:	f7fd ff65 	bl	8000b48 <FillRect>
			caminarD = 0;
 8002c7e:	4b5f      	ldr	r3, [pc, #380]	@ (8002dfc <Jugador1.0+0x29c>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	701a      	strb	r2, [r3, #0]
		if(caminarI == 1){
 8002c84:	4b5e      	ldr	r3, [pc, #376]	@ (8002e00 <Jugador1.0+0x2a0>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d110      	bne.n	8002cae <Jugador1.0+0x14e>
			FillRect(x1+33, y1, 7, 32, 0x2104);
 8002c8c:	4b4e      	ldr	r3, [pc, #312]	@ (8002dc8 <Jugador1.0+0x268>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	3321      	adds	r3, #33	@ 0x21
 8002c92:	4618      	mov	r0, r3
 8002c94:	4b4d      	ldr	r3, [pc, #308]	@ (8002dcc <Jugador1.0+0x26c>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4619      	mov	r1, r3
 8002c9a:	f242 1304 	movw	r3, #8452	@ 0x2104
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	2320      	movs	r3, #32
 8002ca2:	2207      	movs	r2, #7
 8002ca4:	f7fd ff50 	bl	8000b48 <FillRect>
			caminarI = 0;
 8002ca8:	4b55      	ldr	r3, [pc, #340]	@ (8002e00 <Jugador1.0+0x2a0>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	701a      	strb	r2, [r3, #0]
		if (bala == 1) {
 8002cae:	4b55      	ldr	r3, [pc, #340]	@ (8002e04 <Jugador1.0+0x2a4>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	f040 825f 	bne.w	8003176 <Jugador1.0+0x616>
			disparar_balaJ1(); // Llama a la función para disparar
 8002cb8:	46c4      	mov	ip, r8
 8002cba:	f7fe f991 	bl	8000fe0 <disparar_balaJ1.1>
			bala = 0;
 8002cbe:	4b51      	ldr	r3, [pc, #324]	@ (8002e04 <Jugador1.0+0x2a4>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]
}
 8002cc4:	e257      	b.n	8003176 <Jugador1.0+0x616>
	}else if (ch1 == 5){
 8002cc6:	4b3f      	ldr	r3, [pc, #252]	@ (8002dc4 <Jugador1.0+0x264>)
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	2b05      	cmp	r3, #5
 8002ccc:	f040 80dc 	bne.w	8002e88 <Jugador1.0+0x328>
		LCD_Sprite(x1, y1, w1, h1, icemanA, column1, frame1, flip1, 0);
 8002cd0:	4b3d      	ldr	r3, [pc, #244]	@ (8002dc8 <Jugador1.0+0x268>)
 8002cd2:	6818      	ldr	r0, [r3, #0]
 8002cd4:	4b3d      	ldr	r3, [pc, #244]	@ (8002dcc <Jugador1.0+0x26c>)
 8002cd6:	681d      	ldr	r5, [r3, #0]
 8002cd8:	4b3d      	ldr	r3, [pc, #244]	@ (8002dd0 <Jugador1.0+0x270>)
 8002cda:	681e      	ldr	r6, [r3, #0]
 8002cdc:	4b3d      	ldr	r3, [pc, #244]	@ (8002dd4 <Jugador1.0+0x274>)
 8002cde:	681c      	ldr	r4, [r3, #0]
 8002ce0:	4b3d      	ldr	r3, [pc, #244]	@ (8002dd8 <Jugador1.0+0x278>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	603b      	str	r3, [r7, #0]
 8002ce6:	4a3d      	ldr	r2, [pc, #244]	@ (8002ddc <Jugador1.0+0x27c>)
 8002ce8:	6812      	ldr	r2, [r2, #0]
 8002cea:	493d      	ldr	r1, [pc, #244]	@ (8002de0 <Jugador1.0+0x280>)
 8002cec:	6809      	ldr	r1, [r1, #0]
 8002cee:	b2c9      	uxtb	r1, r1
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	9304      	str	r3, [sp, #16]
 8002cf4:	9103      	str	r1, [sp, #12]
 8002cf6:	9202      	str	r2, [sp, #8]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	9301      	str	r3, [sp, #4]
 8002cfc:	4b42      	ldr	r3, [pc, #264]	@ (8002e08 <Jugador1.0+0x2a8>)
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	4623      	mov	r3, r4
 8002d02:	4632      	mov	r2, r6
 8002d04:	4629      	mov	r1, r5
 8002d06:	f7fe f8bf 	bl	8000e88 <LCD_Sprite>
		y1 = y1+vY1;
 8002d0a:	4b30      	ldr	r3, [pc, #192]	@ (8002dcc <Jugador1.0+0x26c>)
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	4b36      	ldr	r3, [pc, #216]	@ (8002de8 <Jugador1.0+0x288>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4413      	add	r3, r2
 8002d14:	4a2d      	ldr	r2, [pc, #180]	@ (8002dcc <Jugador1.0+0x26c>)
 8002d16:	6013      	str	r3, [r2, #0]
		if(jump1 == 1){
 8002d18:	4b34      	ldr	r3, [pc, #208]	@ (8002dec <Jugador1.0+0x28c>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d17d      	bne.n	8002e1c <Jugador1.0+0x2bc>
			vY1++;
 8002d20:	4b31      	ldr	r3, [pc, #196]	@ (8002de8 <Jugador1.0+0x288>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	3301      	adds	r3, #1
 8002d26:	4a30      	ldr	r2, [pc, #192]	@ (8002de8 <Jugador1.0+0x288>)
 8002d28:	6013      	str	r3, [r2, #0]
			if (falling1 == 0){
 8002d2a:	4b31      	ldr	r3, [pc, #196]	@ (8002df0 <Jugador1.0+0x290>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10e      	bne.n	8002d50 <Jugador1.0+0x1f0>
				FillRect(x1, y1+28, 35, 9, 0x2104);
 8002d32:	4b25      	ldr	r3, [pc, #148]	@ (8002dc8 <Jugador1.0+0x268>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	4b24      	ldr	r3, [pc, #144]	@ (8002dcc <Jugador1.0+0x26c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	331c      	adds	r3, #28
 8002d3e:	4619      	mov	r1, r3
 8002d40:	f242 1304 	movw	r3, #8452	@ 0x2104
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	2309      	movs	r3, #9
 8002d48:	2223      	movs	r2, #35	@ 0x23
 8002d4a:	f7fd fefd 	bl	8000b48 <FillRect>
 8002d4e:	e011      	b.n	8002d74 <Jugador1.0+0x214>
			}else if (falling1 == 1){
 8002d50:	4b27      	ldr	r3, [pc, #156]	@ (8002df0 <Jugador1.0+0x290>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d10d      	bne.n	8002d74 <Jugador1.0+0x214>
				FillRect(x1, y1-24, 35, 25, 0x2104);
 8002d58:	4b1b      	ldr	r3, [pc, #108]	@ (8002dc8 <Jugador1.0+0x268>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	4b1b      	ldr	r3, [pc, #108]	@ (8002dcc <Jugador1.0+0x26c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	3b18      	subs	r3, #24
 8002d64:	4619      	mov	r1, r3
 8002d66:	f242 1304 	movw	r3, #8452	@ 0x2104
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	2319      	movs	r3, #25
 8002d6e:	2223      	movs	r2, #35	@ 0x23
 8002d70:	f7fd feea 	bl	8000b48 <FillRect>
			if(vY1 == 0){
 8002d74:	4b1c      	ldr	r3, [pc, #112]	@ (8002de8 <Jugador1.0+0x288>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d102      	bne.n	8002d82 <Jugador1.0+0x222>
				falling1 = 1;
 8002d7c:	4b1c      	ldr	r3, [pc, #112]	@ (8002df0 <Jugador1.0+0x290>)
 8002d7e:	2201      	movs	r2, #1
 8002d80:	601a      	str	r2, [r3, #0]
			if(y1 >= y1Estandar){
 8002d82:	4b12      	ldr	r3, [pc, #72]	@ (8002dcc <Jugador1.0+0x26c>)
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	4b1b      	ldr	r3, [pc, #108]	@ (8002df4 <Jugador1.0+0x294>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	db46      	blt.n	8002e1c <Jugador1.0+0x2bc>
				vY1 = 0;
 8002d8e:	4b16      	ldr	r3, [pc, #88]	@ (8002de8 <Jugador1.0+0x288>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
				jump1 = 0;
 8002d94:	4b15      	ldr	r3, [pc, #84]	@ (8002dec <Jugador1.0+0x28c>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	601a      	str	r2, [r3, #0]
				y1 = y1Estandar;
 8002d9a:	4b16      	ldr	r3, [pc, #88]	@ (8002df4 <Jugador1.0+0x294>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a0b      	ldr	r2, [pc, #44]	@ (8002dcc <Jugador1.0+0x26c>)
 8002da0:	6013      	str	r3, [r2, #0]
				if (shooting1 == 1){
 8002da2:	4b1a      	ldr	r3, [pc, #104]	@ (8002e0c <Jugador1.0+0x2ac>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d103      	bne.n	8002db2 <Jugador1.0+0x252>
					frame1 = 5;
 8002daa:	4b0c      	ldr	r3, [pc, #48]	@ (8002ddc <Jugador1.0+0x27c>)
 8002dac:	2205      	movs	r2, #5
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	e031      	b.n	8002e16 <Jugador1.0+0x2b6>
				}else if (shooting1 == 2){
 8002db2:	4b16      	ldr	r3, [pc, #88]	@ (8002e0c <Jugador1.0+0x2ac>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d12a      	bne.n	8002e10 <Jugador1.0+0x2b0>
					frame1 = 6;
 8002dba:	4b08      	ldr	r3, [pc, #32]	@ (8002ddc <Jugador1.0+0x27c>)
 8002dbc:	2206      	movs	r2, #6
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	e029      	b.n	8002e16 <Jugador1.0+0x2b6>
 8002dc2:	bf00      	nop
 8002dc4:	2001409a 	.word	0x2001409a
 8002dc8:	200140a0 	.word	0x200140a0
 8002dcc:	20012e34 	.word	0x20012e34
 8002dd0:	200140a4 	.word	0x200140a4
 8002dd4:	200140a8 	.word	0x200140a8
 8002dd8:	200140ac 	.word	0x200140ac
 8002ddc:	20012e38 	.word	0x20012e38
 8002de0:	200140b0 	.word	0x200140b0
 8002de4:	0800e338 	.word	0x0800e338
 8002de8:	200140b4 	.word	0x200140b4
 8002dec:	200140b8 	.word	0x200140b8
 8002df0:	20012e3c 	.word	0x20012e3c
 8002df4:	20012e30 	.word	0x20012e30
 8002df8:	200140bc 	.word	0x200140bc
 8002dfc:	20014091 	.word	0x20014091
 8002e00:	20014092 	.word	0x20014092
 8002e04:	200140d8 	.word	0x200140d8
 8002e08:	0801c53c 	.word	0x0801c53c
 8002e0c:	200140c4 	.word	0x200140c4
					frame1 = 0;
 8002e10:	4b95      	ldr	r3, [pc, #596]	@ (8003068 <Jugador1.0+0x508>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]
				jumpcount1 = 0;
 8002e16:	4b95      	ldr	r3, [pc, #596]	@ (800306c <Jugador1.0+0x50c>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
		if(caminarD == 1){
 8002e1c:	4b94      	ldr	r3, [pc, #592]	@ (8003070 <Jugador1.0+0x510>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d110      	bne.n	8002e46 <Jugador1.0+0x2e6>
			FillRect(x1-7, y1, 7, 29, 0x2104);	//2104
 8002e24:	4b93      	ldr	r3, [pc, #588]	@ (8003074 <Jugador1.0+0x514>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	3b07      	subs	r3, #7
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	4b92      	ldr	r3, [pc, #584]	@ (8003078 <Jugador1.0+0x518>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4619      	mov	r1, r3
 8002e32:	f242 1304 	movw	r3, #8452	@ 0x2104
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	231d      	movs	r3, #29
 8002e3a:	2207      	movs	r2, #7
 8002e3c:	f7fd fe84 	bl	8000b48 <FillRect>
			caminarD = 0;
 8002e40:	4b8b      	ldr	r3, [pc, #556]	@ (8003070 <Jugador1.0+0x510>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	701a      	strb	r2, [r3, #0]
		if(caminarI == 1){
 8002e46:	4b8d      	ldr	r3, [pc, #564]	@ (800307c <Jugador1.0+0x51c>)
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d110      	bne.n	8002e70 <Jugador1.0+0x310>
			FillRect(x1+33, y1, 7, 29, 0x2104);
 8002e4e:	4b89      	ldr	r3, [pc, #548]	@ (8003074 <Jugador1.0+0x514>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	3321      	adds	r3, #33	@ 0x21
 8002e54:	4618      	mov	r0, r3
 8002e56:	4b88      	ldr	r3, [pc, #544]	@ (8003078 <Jugador1.0+0x518>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	f242 1304 	movw	r3, #8452	@ 0x2104
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	231d      	movs	r3, #29
 8002e64:	2207      	movs	r2, #7
 8002e66:	f7fd fe6f 	bl	8000b48 <FillRect>
			caminarI = 0;
 8002e6a:	4b84      	ldr	r3, [pc, #528]	@ (800307c <Jugador1.0+0x51c>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	701a      	strb	r2, [r3, #0]
		if (bala == 1) {
 8002e70:	4b83      	ldr	r3, [pc, #524]	@ (8003080 <Jugador1.0+0x520>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	f040 817e 	bne.w	8003176 <Jugador1.0+0x616>
			disparar_balaJ1(); // Llama a la función para disparar
 8002e7a:	46c4      	mov	ip, r8
 8002e7c:	f7fe f8b0 	bl	8000fe0 <disparar_balaJ1.1>
			bala = 0;
 8002e80:	4b7f      	ldr	r3, [pc, #508]	@ (8003080 <Jugador1.0+0x520>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	601a      	str	r2, [r3, #0]
}
 8002e86:	e176      	b.n	8003176 <Jugador1.0+0x616>
	}else if (ch1 == 8){
 8002e88:	4b7e      	ldr	r3, [pc, #504]	@ (8003084 <Jugador1.0+0x524>)
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b08      	cmp	r3, #8
 8002e8e:	f040 80a5 	bne.w	8002fdc <Jugador1.0+0x47c>
		LCD_Sprite(x1, y1, w1, h1, rollA, column1, frame1, flip1, 0);
 8002e92:	4b78      	ldr	r3, [pc, #480]	@ (8003074 <Jugador1.0+0x514>)
 8002e94:	6818      	ldr	r0, [r3, #0]
 8002e96:	4b78      	ldr	r3, [pc, #480]	@ (8003078 <Jugador1.0+0x518>)
 8002e98:	681d      	ldr	r5, [r3, #0]
 8002e9a:	4b7b      	ldr	r3, [pc, #492]	@ (8003088 <Jugador1.0+0x528>)
 8002e9c:	681e      	ldr	r6, [r3, #0]
 8002e9e:	4b7b      	ldr	r3, [pc, #492]	@ (800308c <Jugador1.0+0x52c>)
 8002ea0:	681c      	ldr	r4, [r3, #0]
 8002ea2:	4b7b      	ldr	r3, [pc, #492]	@ (8003090 <Jugador1.0+0x530>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	603b      	str	r3, [r7, #0]
 8002ea8:	4a6f      	ldr	r2, [pc, #444]	@ (8003068 <Jugador1.0+0x508>)
 8002eaa:	6812      	ldr	r2, [r2, #0]
 8002eac:	4979      	ldr	r1, [pc, #484]	@ (8003094 <Jugador1.0+0x534>)
 8002eae:	6809      	ldr	r1, [r1, #0]
 8002eb0:	b2c9      	uxtb	r1, r1
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	9304      	str	r3, [sp, #16]
 8002eb6:	9103      	str	r1, [sp, #12]
 8002eb8:	9202      	str	r2, [sp, #8]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	9301      	str	r3, [sp, #4]
 8002ebe:	4b76      	ldr	r3, [pc, #472]	@ (8003098 <Jugador1.0+0x538>)
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	4623      	mov	r3, r4
 8002ec4:	4632      	mov	r2, r6
 8002ec6:	4629      	mov	r1, r5
 8002ec8:	f7fd ffde 	bl	8000e88 <LCD_Sprite>
		y1 = y1+vY1;
 8002ecc:	4b6a      	ldr	r3, [pc, #424]	@ (8003078 <Jugador1.0+0x518>)
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	4b72      	ldr	r3, [pc, #456]	@ (800309c <Jugador1.0+0x53c>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	4a68      	ldr	r2, [pc, #416]	@ (8003078 <Jugador1.0+0x518>)
 8002ed8:	6013      	str	r3, [r2, #0]
		if(jump1 == 1){
 8002eda:	4b71      	ldr	r3, [pc, #452]	@ (80030a0 <Jugador1.0+0x540>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d146      	bne.n	8002f70 <Jugador1.0+0x410>
			vY1++;
 8002ee2:	4b6e      	ldr	r3, [pc, #440]	@ (800309c <Jugador1.0+0x53c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	4a6c      	ldr	r2, [pc, #432]	@ (800309c <Jugador1.0+0x53c>)
 8002eea:	6013      	str	r3, [r2, #0]
			if (falling1 == 0){
 8002eec:	4b6d      	ldr	r3, [pc, #436]	@ (80030a4 <Jugador1.0+0x544>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10e      	bne.n	8002f12 <Jugador1.0+0x3b2>
				FillRect(x1, y1+30, 33, 9, 0x2104);
 8002ef4:	4b5f      	ldr	r3, [pc, #380]	@ (8003074 <Jugador1.0+0x514>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	4b5f      	ldr	r3, [pc, #380]	@ (8003078 <Jugador1.0+0x518>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	331e      	adds	r3, #30
 8002f00:	4619      	mov	r1, r3
 8002f02:	f242 1304 	movw	r3, #8452	@ 0x2104
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	2309      	movs	r3, #9
 8002f0a:	2221      	movs	r2, #33	@ 0x21
 8002f0c:	f7fd fe1c 	bl	8000b48 <FillRect>
 8002f10:	e011      	b.n	8002f36 <Jugador1.0+0x3d6>
			}else if (falling1 == 1){
 8002f12:	4b64      	ldr	r3, [pc, #400]	@ (80030a4 <Jugador1.0+0x544>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d10d      	bne.n	8002f36 <Jugador1.0+0x3d6>
				FillRect(x1, y1-24, 33, 25, 0x2104);
 8002f1a:	4b56      	ldr	r3, [pc, #344]	@ (8003074 <Jugador1.0+0x514>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	4b55      	ldr	r3, [pc, #340]	@ (8003078 <Jugador1.0+0x518>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	3b18      	subs	r3, #24
 8002f26:	4619      	mov	r1, r3
 8002f28:	f242 1304 	movw	r3, #8452	@ 0x2104
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	2319      	movs	r3, #25
 8002f30:	2221      	movs	r2, #33	@ 0x21
 8002f32:	f7fd fe09 	bl	8000b48 <FillRect>
			if(vY1 == 0){
 8002f36:	4b59      	ldr	r3, [pc, #356]	@ (800309c <Jugador1.0+0x53c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d102      	bne.n	8002f44 <Jugador1.0+0x3e4>
				falling1 = 1;
 8002f3e:	4b59      	ldr	r3, [pc, #356]	@ (80030a4 <Jugador1.0+0x544>)
 8002f40:	2201      	movs	r2, #1
 8002f42:	601a      	str	r2, [r3, #0]
			if(y1 >= y1Estandar){
 8002f44:	4b4c      	ldr	r3, [pc, #304]	@ (8003078 <Jugador1.0+0x518>)
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	4b57      	ldr	r3, [pc, #348]	@ (80030a8 <Jugador1.0+0x548>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	db0f      	blt.n	8002f70 <Jugador1.0+0x410>
				vY1 = 0;
 8002f50:	4b52      	ldr	r3, [pc, #328]	@ (800309c <Jugador1.0+0x53c>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	601a      	str	r2, [r3, #0]
				jump1 = 0;
 8002f56:	4b52      	ldr	r3, [pc, #328]	@ (80030a0 <Jugador1.0+0x540>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
				y1 = y1Estandar;
 8002f5c:	4b52      	ldr	r3, [pc, #328]	@ (80030a8 <Jugador1.0+0x548>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a45      	ldr	r2, [pc, #276]	@ (8003078 <Jugador1.0+0x518>)
 8002f62:	6013      	str	r3, [r2, #0]
				frame1 = 0;
 8002f64:	4b40      	ldr	r3, [pc, #256]	@ (8003068 <Jugador1.0+0x508>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	601a      	str	r2, [r3, #0]
				jumpcount1 = 0;
 8002f6a:	4b40      	ldr	r3, [pc, #256]	@ (800306c <Jugador1.0+0x50c>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]
		if(caminarD == 1){
 8002f70:	4b3f      	ldr	r3, [pc, #252]	@ (8003070 <Jugador1.0+0x510>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d110      	bne.n	8002f9a <Jugador1.0+0x43a>
			FillRect(x1-7, y1, 7, 30, 0x2104);	//2104
 8002f78:	4b3e      	ldr	r3, [pc, #248]	@ (8003074 <Jugador1.0+0x514>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	3b07      	subs	r3, #7
 8002f7e:	4618      	mov	r0, r3
 8002f80:	4b3d      	ldr	r3, [pc, #244]	@ (8003078 <Jugador1.0+0x518>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4619      	mov	r1, r3
 8002f86:	f242 1304 	movw	r3, #8452	@ 0x2104
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	231e      	movs	r3, #30
 8002f8e:	2207      	movs	r2, #7
 8002f90:	f7fd fdda 	bl	8000b48 <FillRect>
			caminarD = 0;
 8002f94:	4b36      	ldr	r3, [pc, #216]	@ (8003070 <Jugador1.0+0x510>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	701a      	strb	r2, [r3, #0]
		if(caminarI == 1){
 8002f9a:	4b38      	ldr	r3, [pc, #224]	@ (800307c <Jugador1.0+0x51c>)
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d110      	bne.n	8002fc4 <Jugador1.0+0x464>
			FillRect(x1+33, y1, 7, 30, 0x2104);
 8002fa2:	4b34      	ldr	r3, [pc, #208]	@ (8003074 <Jugador1.0+0x514>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	3321      	adds	r3, #33	@ 0x21
 8002fa8:	4618      	mov	r0, r3
 8002faa:	4b33      	ldr	r3, [pc, #204]	@ (8003078 <Jugador1.0+0x518>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4619      	mov	r1, r3
 8002fb0:	f242 1304 	movw	r3, #8452	@ 0x2104
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	231e      	movs	r3, #30
 8002fb8:	2207      	movs	r2, #7
 8002fba:	f7fd fdc5 	bl	8000b48 <FillRect>
			caminarI = 0;
 8002fbe:	4b2f      	ldr	r3, [pc, #188]	@ (800307c <Jugador1.0+0x51c>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	701a      	strb	r2, [r3, #0]
		if (bala == 1) {
 8002fc4:	4b2e      	ldr	r3, [pc, #184]	@ (8003080 <Jugador1.0+0x520>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	f040 80d4 	bne.w	8003176 <Jugador1.0+0x616>
			disparar_balaJ1(); // Llama a la función para disparar
 8002fce:	46c4      	mov	ip, r8
 8002fd0:	f7fe f806 	bl	8000fe0 <disparar_balaJ1.1>
			bala = 0;
 8002fd4:	4b2a      	ldr	r3, [pc, #168]	@ (8003080 <Jugador1.0+0x520>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	601a      	str	r2, [r3, #0]
}
 8002fda:	e0cc      	b.n	8003176 <Jugador1.0+0x616>
	}else if (ch1 == 9){
 8002fdc:	4b29      	ldr	r3, [pc, #164]	@ (8003084 <Jugador1.0+0x524>)
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	2b09      	cmp	r3, #9
 8002fe2:	f040 80c8 	bne.w	8003176 <Jugador1.0+0x616>
		LCD_Sprite(x1, y1, w1, h1, marioA, column1, frame1, flip1, 0);
 8002fe6:	4b23      	ldr	r3, [pc, #140]	@ (8003074 <Jugador1.0+0x514>)
 8002fe8:	6818      	ldr	r0, [r3, #0]
 8002fea:	4b23      	ldr	r3, [pc, #140]	@ (8003078 <Jugador1.0+0x518>)
 8002fec:	681d      	ldr	r5, [r3, #0]
 8002fee:	4b26      	ldr	r3, [pc, #152]	@ (8003088 <Jugador1.0+0x528>)
 8002ff0:	681e      	ldr	r6, [r3, #0]
 8002ff2:	4b26      	ldr	r3, [pc, #152]	@ (800308c <Jugador1.0+0x52c>)
 8002ff4:	681c      	ldr	r4, [r3, #0]
 8002ff6:	4b26      	ldr	r3, [pc, #152]	@ (8003090 <Jugador1.0+0x530>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	603b      	str	r3, [r7, #0]
 8002ffc:	4a1a      	ldr	r2, [pc, #104]	@ (8003068 <Jugador1.0+0x508>)
 8002ffe:	6812      	ldr	r2, [r2, #0]
 8003000:	4924      	ldr	r1, [pc, #144]	@ (8003094 <Jugador1.0+0x534>)
 8003002:	6809      	ldr	r1, [r1, #0]
 8003004:	b2c9      	uxtb	r1, r1
 8003006:	2300      	movs	r3, #0
 8003008:	9304      	str	r3, [sp, #16]
 800300a:	9103      	str	r1, [sp, #12]
 800300c:	9202      	str	r2, [sp, #8]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	9301      	str	r3, [sp, #4]
 8003012:	4b26      	ldr	r3, [pc, #152]	@ (80030ac <Jugador1.0+0x54c>)
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	4623      	mov	r3, r4
 8003018:	4632      	mov	r2, r6
 800301a:	4629      	mov	r1, r5
 800301c:	f7fd ff34 	bl	8000e88 <LCD_Sprite>
		y1 = y1+vY1;
 8003020:	4b15      	ldr	r3, [pc, #84]	@ (8003078 <Jugador1.0+0x518>)
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	4b1d      	ldr	r3, [pc, #116]	@ (800309c <Jugador1.0+0x53c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4413      	add	r3, r2
 800302a:	4a13      	ldr	r2, [pc, #76]	@ (8003078 <Jugador1.0+0x518>)
 800302c:	6013      	str	r3, [r2, #0]
		if(jump1 == 1){
 800302e:	4b1c      	ldr	r3, [pc, #112]	@ (80030a0 <Jugador1.0+0x540>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d16b      	bne.n	800310e <Jugador1.0+0x5ae>
			vY1++;
 8003036:	4b19      	ldr	r3, [pc, #100]	@ (800309c <Jugador1.0+0x53c>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	3301      	adds	r3, #1
 800303c:	4a17      	ldr	r2, [pc, #92]	@ (800309c <Jugador1.0+0x53c>)
 800303e:	6013      	str	r3, [r2, #0]
			if (falling1 == 0){
 8003040:	4b18      	ldr	r3, [pc, #96]	@ (80030a4 <Jugador1.0+0x544>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d133      	bne.n	80030b0 <Jugador1.0+0x550>
				FillRect(x1, y1+25, 26, 9, 0x2104);
 8003048:	4b0a      	ldr	r3, [pc, #40]	@ (8003074 <Jugador1.0+0x514>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	4b0a      	ldr	r3, [pc, #40]	@ (8003078 <Jugador1.0+0x518>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	3319      	adds	r3, #25
 8003054:	4619      	mov	r1, r3
 8003056:	f242 1304 	movw	r3, #8452	@ 0x2104
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	2309      	movs	r3, #9
 800305e:	221a      	movs	r2, #26
 8003060:	f7fd fd72 	bl	8000b48 <FillRect>
 8003064:	e036      	b.n	80030d4 <Jugador1.0+0x574>
 8003066:	bf00      	nop
 8003068:	20012e38 	.word	0x20012e38
 800306c:	200140bc 	.word	0x200140bc
 8003070:	20014091 	.word	0x20014091
 8003074:	200140a0 	.word	0x200140a0
 8003078:	20012e34 	.word	0x20012e34
 800307c:	20014092 	.word	0x20014092
 8003080:	200140d8 	.word	0x200140d8
 8003084:	2001409a 	.word	0x2001409a
 8003088:	200140a4 	.word	0x200140a4
 800308c:	200140a8 	.word	0x200140a8
 8003090:	200140ac 	.word	0x200140ac
 8003094:	200140b0 	.word	0x200140b0
 8003098:	08013b38 	.word	0x08013b38
 800309c:	200140b4 	.word	0x200140b4
 80030a0:	200140b8 	.word	0x200140b8
 80030a4:	20012e3c 	.word	0x20012e3c
 80030a8:	20012e30 	.word	0x20012e30
 80030ac:	08018b24 	.word	0x08018b24
			}else if (falling1 == 1){
 80030b0:	4b33      	ldr	r3, [pc, #204]	@ (8003180 <Jugador1.0+0x620>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d10d      	bne.n	80030d4 <Jugador1.0+0x574>
				FillRect(x1, y1-24, 26, 25, 0x2104);
 80030b8:	4b32      	ldr	r3, [pc, #200]	@ (8003184 <Jugador1.0+0x624>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4618      	mov	r0, r3
 80030be:	4b32      	ldr	r3, [pc, #200]	@ (8003188 <Jugador1.0+0x628>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	3b18      	subs	r3, #24
 80030c4:	4619      	mov	r1, r3
 80030c6:	f242 1304 	movw	r3, #8452	@ 0x2104
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	2319      	movs	r3, #25
 80030ce:	221a      	movs	r2, #26
 80030d0:	f7fd fd3a 	bl	8000b48 <FillRect>
			if(vY1 == 0){
 80030d4:	4b2d      	ldr	r3, [pc, #180]	@ (800318c <Jugador1.0+0x62c>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d102      	bne.n	80030e2 <Jugador1.0+0x582>
				falling1 = 1;
 80030dc:	4b28      	ldr	r3, [pc, #160]	@ (8003180 <Jugador1.0+0x620>)
 80030de:	2201      	movs	r2, #1
 80030e0:	601a      	str	r2, [r3, #0]
			if(y1 >= y1Estandar){
 80030e2:	4b29      	ldr	r3, [pc, #164]	@ (8003188 <Jugador1.0+0x628>)
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	4b2a      	ldr	r3, [pc, #168]	@ (8003190 <Jugador1.0+0x630>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	db0f      	blt.n	800310e <Jugador1.0+0x5ae>
				vY1 = 0;
 80030ee:	4b27      	ldr	r3, [pc, #156]	@ (800318c <Jugador1.0+0x62c>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]
				jump1 = 0;
 80030f4:	4b27      	ldr	r3, [pc, #156]	@ (8003194 <Jugador1.0+0x634>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	601a      	str	r2, [r3, #0]
				y1 = y1Estandar;
 80030fa:	4b25      	ldr	r3, [pc, #148]	@ (8003190 <Jugador1.0+0x630>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a22      	ldr	r2, [pc, #136]	@ (8003188 <Jugador1.0+0x628>)
 8003100:	6013      	str	r3, [r2, #0]
				frame1 = 0;
 8003102:	4b25      	ldr	r3, [pc, #148]	@ (8003198 <Jugador1.0+0x638>)
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]
				jumpcount1 = 0;
 8003108:	4b24      	ldr	r3, [pc, #144]	@ (800319c <Jugador1.0+0x63c>)
 800310a:	2200      	movs	r2, #0
 800310c:	601a      	str	r2, [r3, #0]
		if(caminarD == 1){
 800310e:	4b24      	ldr	r3, [pc, #144]	@ (80031a0 <Jugador1.0+0x640>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d110      	bne.n	8003138 <Jugador1.0+0x5d8>
			FillRect(x1-7, y1, 7, 26, 0x2104);	//2104
 8003116:	4b1b      	ldr	r3, [pc, #108]	@ (8003184 <Jugador1.0+0x624>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	3b07      	subs	r3, #7
 800311c:	4618      	mov	r0, r3
 800311e:	4b1a      	ldr	r3, [pc, #104]	@ (8003188 <Jugador1.0+0x628>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4619      	mov	r1, r3
 8003124:	f242 1304 	movw	r3, #8452	@ 0x2104
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	231a      	movs	r3, #26
 800312c:	2207      	movs	r2, #7
 800312e:	f7fd fd0b 	bl	8000b48 <FillRect>
			caminarD = 0;
 8003132:	4b1b      	ldr	r3, [pc, #108]	@ (80031a0 <Jugador1.0+0x640>)
 8003134:	2200      	movs	r2, #0
 8003136:	701a      	strb	r2, [r3, #0]
		if(caminarI == 1){
 8003138:	4b1a      	ldr	r3, [pc, #104]	@ (80031a4 <Jugador1.0+0x644>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d110      	bne.n	8003162 <Jugador1.0+0x602>
			FillRect(x1+33, y1, 7, 26, 0x2104);
 8003140:	4b10      	ldr	r3, [pc, #64]	@ (8003184 <Jugador1.0+0x624>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	3321      	adds	r3, #33	@ 0x21
 8003146:	4618      	mov	r0, r3
 8003148:	4b0f      	ldr	r3, [pc, #60]	@ (8003188 <Jugador1.0+0x628>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4619      	mov	r1, r3
 800314e:	f242 1304 	movw	r3, #8452	@ 0x2104
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	231a      	movs	r3, #26
 8003156:	2207      	movs	r2, #7
 8003158:	f7fd fcf6 	bl	8000b48 <FillRect>
			caminarI = 0;
 800315c:	4b11      	ldr	r3, [pc, #68]	@ (80031a4 <Jugador1.0+0x644>)
 800315e:	2200      	movs	r2, #0
 8003160:	701a      	strb	r2, [r3, #0]
		if (bala == 1) {
 8003162:	4b11      	ldr	r3, [pc, #68]	@ (80031a8 <Jugador1.0+0x648>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d105      	bne.n	8003176 <Jugador1.0+0x616>
			disparar_balaJ1(); // Llama a la función para disparar
 800316a:	46c4      	mov	ip, r8
 800316c:	f7fd ff38 	bl	8000fe0 <disparar_balaJ1.1>
			bala = 0;
 8003170:	4b0d      	ldr	r3, [pc, #52]	@ (80031a8 <Jugador1.0+0x648>)
 8003172:	2200      	movs	r2, #0
 8003174:	601a      	str	r2, [r3, #0]
}
 8003176:	bf00      	nop
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003180:	20012e3c 	.word	0x20012e3c
 8003184:	200140a0 	.word	0x200140a0
 8003188:	20012e34 	.word	0x20012e34
 800318c:	200140b4 	.word	0x200140b4
 8003190:	20012e30 	.word	0x20012e30
 8003194:	200140b8 	.word	0x200140b8
 8003198:	20012e38 	.word	0x20012e38
 800319c:	200140bc 	.word	0x200140bc
 80031a0:	20014091 	.word	0x20014091
 80031a4:	20014092 	.word	0x20014092
 80031a8:	200140d8 	.word	0x200140d8

080031ac <Jugador2.5>:
void Jugador2(){
 80031ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031b0:	b088      	sub	sp, #32
 80031b2:	af06      	add	r7, sp, #24
 80031b4:	46e0      	mov	r8, ip
 80031b6:	f8c7 c004 	str.w	ip, [r7, #4]
	HAL_Delay(5);
 80031ba:	2005      	movs	r0, #5
 80031bc:	f002 fe4c 	bl	8005e58 <HAL_Delay>
	if(ch2 == 1){
 80031c0:	4b93      	ldr	r3, [pc, #588]	@ (8003410 <Jugador2.5+0x264>)
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	f040 80a4 	bne.w	8003312 <Jugador2.5+0x166>
		LCD_Sprite(x2, y2, w2, h2, megamanA, column2, frame2, flip22, 0);
 80031ca:	4b92      	ldr	r3, [pc, #584]	@ (8003414 <Jugador2.5+0x268>)
 80031cc:	6818      	ldr	r0, [r3, #0]
 80031ce:	4b92      	ldr	r3, [pc, #584]	@ (8003418 <Jugador2.5+0x26c>)
 80031d0:	681d      	ldr	r5, [r3, #0]
 80031d2:	4b92      	ldr	r3, [pc, #584]	@ (800341c <Jugador2.5+0x270>)
 80031d4:	681e      	ldr	r6, [r3, #0]
 80031d6:	4b92      	ldr	r3, [pc, #584]	@ (8003420 <Jugador2.5+0x274>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	603b      	str	r3, [r7, #0]
 80031dc:	4b91      	ldr	r3, [pc, #580]	@ (8003424 <Jugador2.5+0x278>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a91      	ldr	r2, [pc, #580]	@ (8003428 <Jugador2.5+0x27c>)
 80031e2:	6812      	ldr	r2, [r2, #0]
 80031e4:	4991      	ldr	r1, [pc, #580]	@ (800342c <Jugador2.5+0x280>)
 80031e6:	6809      	ldr	r1, [r1, #0]
 80031e8:	b2c9      	uxtb	r1, r1
 80031ea:	2400      	movs	r4, #0
 80031ec:	9404      	str	r4, [sp, #16]
 80031ee:	9103      	str	r1, [sp, #12]
 80031f0:	9202      	str	r2, [sp, #8]
 80031f2:	9301      	str	r3, [sp, #4]
 80031f4:	4b8e      	ldr	r3, [pc, #568]	@ (8003430 <Jugador2.5+0x284>)
 80031f6:	9300      	str	r3, [sp, #0]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	4632      	mov	r2, r6
 80031fc:	4629      	mov	r1, r5
 80031fe:	f7fd fe43 	bl	8000e88 <LCD_Sprite>
		y2 = y2+vY2;
 8003202:	4b85      	ldr	r3, [pc, #532]	@ (8003418 <Jugador2.5+0x26c>)
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	4b8b      	ldr	r3, [pc, #556]	@ (8003434 <Jugador2.5+0x288>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4413      	add	r3, r2
 800320c:	4a82      	ldr	r2, [pc, #520]	@ (8003418 <Jugador2.5+0x26c>)
 800320e:	6013      	str	r3, [r2, #0]
		if(jump2 == 1){
 8003210:	4b89      	ldr	r3, [pc, #548]	@ (8003438 <Jugador2.5+0x28c>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d146      	bne.n	80032a6 <Jugador2.5+0xfa>
			vY2++;
 8003218:	4b86      	ldr	r3, [pc, #536]	@ (8003434 <Jugador2.5+0x288>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	3301      	adds	r3, #1
 800321e:	4a85      	ldr	r2, [pc, #532]	@ (8003434 <Jugador2.5+0x288>)
 8003220:	6013      	str	r3, [r2, #0]
			if (falling2 == 0){
 8003222:	4b86      	ldr	r3, [pc, #536]	@ (800343c <Jugador2.5+0x290>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10e      	bne.n	8003248 <Jugador2.5+0x9c>
				FillRect(x2, y2+31, 33, 9, 0x2104);
 800322a:	4b7a      	ldr	r3, [pc, #488]	@ (8003414 <Jugador2.5+0x268>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	4b79      	ldr	r3, [pc, #484]	@ (8003418 <Jugador2.5+0x26c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	331f      	adds	r3, #31
 8003236:	4619      	mov	r1, r3
 8003238:	f242 1304 	movw	r3, #8452	@ 0x2104
 800323c:	9300      	str	r3, [sp, #0]
 800323e:	2309      	movs	r3, #9
 8003240:	2221      	movs	r2, #33	@ 0x21
 8003242:	f7fd fc81 	bl	8000b48 <FillRect>
 8003246:	e011      	b.n	800326c <Jugador2.5+0xc0>
			}else if (falling2 == 1){
 8003248:	4b7c      	ldr	r3, [pc, #496]	@ (800343c <Jugador2.5+0x290>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d10d      	bne.n	800326c <Jugador2.5+0xc0>
				FillRect(x2, y2-24, 33, 25, 0x2104);
 8003250:	4b70      	ldr	r3, [pc, #448]	@ (8003414 <Jugador2.5+0x268>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4618      	mov	r0, r3
 8003256:	4b70      	ldr	r3, [pc, #448]	@ (8003418 <Jugador2.5+0x26c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	3b18      	subs	r3, #24
 800325c:	4619      	mov	r1, r3
 800325e:	f242 1304 	movw	r3, #8452	@ 0x2104
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	2319      	movs	r3, #25
 8003266:	2221      	movs	r2, #33	@ 0x21
 8003268:	f7fd fc6e 	bl	8000b48 <FillRect>
			if(vY2 == 0){
 800326c:	4b71      	ldr	r3, [pc, #452]	@ (8003434 <Jugador2.5+0x288>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d102      	bne.n	800327a <Jugador2.5+0xce>
				falling2 = 1;
 8003274:	4b71      	ldr	r3, [pc, #452]	@ (800343c <Jugador2.5+0x290>)
 8003276:	2201      	movs	r2, #1
 8003278:	601a      	str	r2, [r3, #0]
			if(y2 >= y2Estandar){
 800327a:	4b67      	ldr	r3, [pc, #412]	@ (8003418 <Jugador2.5+0x26c>)
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	4b70      	ldr	r3, [pc, #448]	@ (8003440 <Jugador2.5+0x294>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	429a      	cmp	r2, r3
 8003284:	db0f      	blt.n	80032a6 <Jugador2.5+0xfa>
				vY2 = 0;
 8003286:	4b6b      	ldr	r3, [pc, #428]	@ (8003434 <Jugador2.5+0x288>)
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
				jump2 = 0;
 800328c:	4b6a      	ldr	r3, [pc, #424]	@ (8003438 <Jugador2.5+0x28c>)
 800328e:	2200      	movs	r2, #0
 8003290:	601a      	str	r2, [r3, #0]
				y2 = y2Estandar;
 8003292:	4b6b      	ldr	r3, [pc, #428]	@ (8003440 <Jugador2.5+0x294>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a60      	ldr	r2, [pc, #384]	@ (8003418 <Jugador2.5+0x26c>)
 8003298:	6013      	str	r3, [r2, #0]
				frame2 = 0;
 800329a:	4b63      	ldr	r3, [pc, #396]	@ (8003428 <Jugador2.5+0x27c>)
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]
				jumpcount2 = 0;
 80032a0:	4b68      	ldr	r3, [pc, #416]	@ (8003444 <Jugador2.5+0x298>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	601a      	str	r2, [r3, #0]
		if(caminarD2 == 1){
 80032a6:	4b68      	ldr	r3, [pc, #416]	@ (8003448 <Jugador2.5+0x29c>)
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d110      	bne.n	80032d0 <Jugador2.5+0x124>
			FillRect(x2-7, y2, 7, 32, 0x2104);	//2104
 80032ae:	4b59      	ldr	r3, [pc, #356]	@ (8003414 <Jugador2.5+0x268>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	3b07      	subs	r3, #7
 80032b4:	4618      	mov	r0, r3
 80032b6:	4b58      	ldr	r3, [pc, #352]	@ (8003418 <Jugador2.5+0x26c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4619      	mov	r1, r3
 80032bc:	f242 1304 	movw	r3, #8452	@ 0x2104
 80032c0:	9300      	str	r3, [sp, #0]
 80032c2:	2320      	movs	r3, #32
 80032c4:	2207      	movs	r2, #7
 80032c6:	f7fd fc3f 	bl	8000b48 <FillRect>
			caminarD2 = 0;
 80032ca:	4b5f      	ldr	r3, [pc, #380]	@ (8003448 <Jugador2.5+0x29c>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	701a      	strb	r2, [r3, #0]
		if(caminarI2 == 1){
 80032d0:	4b5e      	ldr	r3, [pc, #376]	@ (800344c <Jugador2.5+0x2a0>)
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d110      	bne.n	80032fa <Jugador2.5+0x14e>
			FillRect(x2+33, y2, 7, 32, 0x2104);
 80032d8:	4b4e      	ldr	r3, [pc, #312]	@ (8003414 <Jugador2.5+0x268>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	3321      	adds	r3, #33	@ 0x21
 80032de:	4618      	mov	r0, r3
 80032e0:	4b4d      	ldr	r3, [pc, #308]	@ (8003418 <Jugador2.5+0x26c>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4619      	mov	r1, r3
 80032e6:	f242 1304 	movw	r3, #8452	@ 0x2104
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	2320      	movs	r3, #32
 80032ee:	2207      	movs	r2, #7
 80032f0:	f7fd fc2a 	bl	8000b48 <FillRect>
			caminarI2 = 0;
 80032f4:	4b55      	ldr	r3, [pc, #340]	@ (800344c <Jugador2.5+0x2a0>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	701a      	strb	r2, [r3, #0]
		if (bala2 == 1) {
 80032fa:	4b55      	ldr	r3, [pc, #340]	@ (8003450 <Jugador2.5+0x2a4>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	f040 8261 	bne.w	80037c6 <Jugador2.5+0x61a>
			disparar_balaJ2(); // Llama a la función para disparar
 8003304:	46c4      	mov	ip, r8
 8003306:	f7ff f945 	bl	8002594 <disparar_balaJ2.6>
			bala2 = 0;
 800330a:	4b51      	ldr	r3, [pc, #324]	@ (8003450 <Jugador2.5+0x2a4>)
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]
}
 8003310:	e259      	b.n	80037c6 <Jugador2.5+0x61a>
	}else if (ch2 == 5){
 8003312:	4b3f      	ldr	r3, [pc, #252]	@ (8003410 <Jugador2.5+0x264>)
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	2b05      	cmp	r3, #5
 8003318:	f040 80dc 	bne.w	80034d4 <Jugador2.5+0x328>
		LCD_Sprite(x2, y2, w2, h2, icemanA, column2, frame2, flip22, 0);
 800331c:	4b3d      	ldr	r3, [pc, #244]	@ (8003414 <Jugador2.5+0x268>)
 800331e:	6818      	ldr	r0, [r3, #0]
 8003320:	4b3d      	ldr	r3, [pc, #244]	@ (8003418 <Jugador2.5+0x26c>)
 8003322:	681d      	ldr	r5, [r3, #0]
 8003324:	4b3d      	ldr	r3, [pc, #244]	@ (800341c <Jugador2.5+0x270>)
 8003326:	681e      	ldr	r6, [r3, #0]
 8003328:	4b3d      	ldr	r3, [pc, #244]	@ (8003420 <Jugador2.5+0x274>)
 800332a:	681c      	ldr	r4, [r3, #0]
 800332c:	4b3d      	ldr	r3, [pc, #244]	@ (8003424 <Jugador2.5+0x278>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	603b      	str	r3, [r7, #0]
 8003332:	4a3d      	ldr	r2, [pc, #244]	@ (8003428 <Jugador2.5+0x27c>)
 8003334:	6812      	ldr	r2, [r2, #0]
 8003336:	493d      	ldr	r1, [pc, #244]	@ (800342c <Jugador2.5+0x280>)
 8003338:	6809      	ldr	r1, [r1, #0]
 800333a:	b2c9      	uxtb	r1, r1
 800333c:	2300      	movs	r3, #0
 800333e:	9304      	str	r3, [sp, #16]
 8003340:	9103      	str	r1, [sp, #12]
 8003342:	9202      	str	r2, [sp, #8]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	9301      	str	r3, [sp, #4]
 8003348:	4b42      	ldr	r3, [pc, #264]	@ (8003454 <Jugador2.5+0x2a8>)
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	4623      	mov	r3, r4
 800334e:	4632      	mov	r2, r6
 8003350:	4629      	mov	r1, r5
 8003352:	f7fd fd99 	bl	8000e88 <LCD_Sprite>
		y2 = y2+vY2;
 8003356:	4b30      	ldr	r3, [pc, #192]	@ (8003418 <Jugador2.5+0x26c>)
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	4b36      	ldr	r3, [pc, #216]	@ (8003434 <Jugador2.5+0x288>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4413      	add	r3, r2
 8003360:	4a2d      	ldr	r2, [pc, #180]	@ (8003418 <Jugador2.5+0x26c>)
 8003362:	6013      	str	r3, [r2, #0]
		if(jump2 == 1){
 8003364:	4b34      	ldr	r3, [pc, #208]	@ (8003438 <Jugador2.5+0x28c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d17d      	bne.n	8003468 <Jugador2.5+0x2bc>
			vY2++;
 800336c:	4b31      	ldr	r3, [pc, #196]	@ (8003434 <Jugador2.5+0x288>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	3301      	adds	r3, #1
 8003372:	4a30      	ldr	r2, [pc, #192]	@ (8003434 <Jugador2.5+0x288>)
 8003374:	6013      	str	r3, [r2, #0]
			if (falling2 == 0){
 8003376:	4b31      	ldr	r3, [pc, #196]	@ (800343c <Jugador2.5+0x290>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10e      	bne.n	800339c <Jugador2.5+0x1f0>
				FillRect(x2, y2+28, 35, 9, 0x2104);
 800337e:	4b25      	ldr	r3, [pc, #148]	@ (8003414 <Jugador2.5+0x268>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	4b24      	ldr	r3, [pc, #144]	@ (8003418 <Jugador2.5+0x26c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	331c      	adds	r3, #28
 800338a:	4619      	mov	r1, r3
 800338c:	f242 1304 	movw	r3, #8452	@ 0x2104
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	2309      	movs	r3, #9
 8003394:	2223      	movs	r2, #35	@ 0x23
 8003396:	f7fd fbd7 	bl	8000b48 <FillRect>
 800339a:	e011      	b.n	80033c0 <Jugador2.5+0x214>
			}else if (falling2 == 1){
 800339c:	4b27      	ldr	r3, [pc, #156]	@ (800343c <Jugador2.5+0x290>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d10d      	bne.n	80033c0 <Jugador2.5+0x214>
				FillRect(x2, y2-24, 35, 25, 0x2104);
 80033a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003414 <Jugador2.5+0x268>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003418 <Jugador2.5+0x26c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	3b18      	subs	r3, #24
 80033b0:	4619      	mov	r1, r3
 80033b2:	f242 1304 	movw	r3, #8452	@ 0x2104
 80033b6:	9300      	str	r3, [sp, #0]
 80033b8:	2319      	movs	r3, #25
 80033ba:	2223      	movs	r2, #35	@ 0x23
 80033bc:	f7fd fbc4 	bl	8000b48 <FillRect>
			if(vY2 == 0){
 80033c0:	4b1c      	ldr	r3, [pc, #112]	@ (8003434 <Jugador2.5+0x288>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d102      	bne.n	80033ce <Jugador2.5+0x222>
				falling2 = 1;
 80033c8:	4b1c      	ldr	r3, [pc, #112]	@ (800343c <Jugador2.5+0x290>)
 80033ca:	2201      	movs	r2, #1
 80033cc:	601a      	str	r2, [r3, #0]
			if(y2 >= y2Estandar){
 80033ce:	4b12      	ldr	r3, [pc, #72]	@ (8003418 <Jugador2.5+0x26c>)
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003440 <Jugador2.5+0x294>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	db46      	blt.n	8003468 <Jugador2.5+0x2bc>
				vY2 = 0;
 80033da:	4b16      	ldr	r3, [pc, #88]	@ (8003434 <Jugador2.5+0x288>)
 80033dc:	2200      	movs	r2, #0
 80033de:	601a      	str	r2, [r3, #0]
				jump2 = 0;
 80033e0:	4b15      	ldr	r3, [pc, #84]	@ (8003438 <Jugador2.5+0x28c>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	601a      	str	r2, [r3, #0]
				y2 = y2Estandar;
 80033e6:	4b16      	ldr	r3, [pc, #88]	@ (8003440 <Jugador2.5+0x294>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a0b      	ldr	r2, [pc, #44]	@ (8003418 <Jugador2.5+0x26c>)
 80033ec:	6013      	str	r3, [r2, #0]
				if (shooting2 == 1){
 80033ee:	4b1a      	ldr	r3, [pc, #104]	@ (8003458 <Jugador2.5+0x2ac>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d103      	bne.n	80033fe <Jugador2.5+0x252>
					frame2 = 5;
 80033f6:	4b0c      	ldr	r3, [pc, #48]	@ (8003428 <Jugador2.5+0x27c>)
 80033f8:	2205      	movs	r2, #5
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	e031      	b.n	8003462 <Jugador2.5+0x2b6>
				}else if (shooting2 == 2){
 80033fe:	4b16      	ldr	r3, [pc, #88]	@ (8003458 <Jugador2.5+0x2ac>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2b02      	cmp	r3, #2
 8003404:	d12a      	bne.n	800345c <Jugador2.5+0x2b0>
					frame2 = 6;
 8003406:	4b08      	ldr	r3, [pc, #32]	@ (8003428 <Jugador2.5+0x27c>)
 8003408:	2206      	movs	r2, #6
 800340a:	601a      	str	r2, [r3, #0]
 800340c:	e029      	b.n	8003462 <Jugador2.5+0x2b6>
 800340e:	bf00      	nop
 8003410:	2001409e 	.word	0x2001409e
 8003414:	20012e4c 	.word	0x20012e4c
 8003418:	20012e54 	.word	0x20012e54
 800341c:	20014104 	.word	0x20014104
 8003420:	20014110 	.word	0x20014110
 8003424:	20014108 	.word	0x20014108
 8003428:	20012e58 	.word	0x20012e58
 800342c:	2001410c 	.word	0x2001410c
 8003430:	0800e338 	.word	0x0800e338
 8003434:	20014114 	.word	0x20014114
 8003438:	20014118 	.word	0x20014118
 800343c:	20012e5c 	.word	0x20012e5c
 8003440:	20012e50 	.word	0x20012e50
 8003444:	2001411c 	.word	0x2001411c
 8003448:	20014093 	.word	0x20014093
 800344c:	20014094 	.word	0x20014094
 8003450:	20014138 	.word	0x20014138
 8003454:	0801c53c 	.word	0x0801c53c
 8003458:	20014124 	.word	0x20014124
					frame2 = 0;
 800345c:	4b95      	ldr	r3, [pc, #596]	@ (80036b4 <Jugador2.5+0x508>)
 800345e:	2200      	movs	r2, #0
 8003460:	601a      	str	r2, [r3, #0]
				jumpcount2 = 0;
 8003462:	4b95      	ldr	r3, [pc, #596]	@ (80036b8 <Jugador2.5+0x50c>)
 8003464:	2200      	movs	r2, #0
 8003466:	601a      	str	r2, [r3, #0]
		if(caminarD2 == 1){
 8003468:	4b94      	ldr	r3, [pc, #592]	@ (80036bc <Jugador2.5+0x510>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d110      	bne.n	8003492 <Jugador2.5+0x2e6>
			FillRect(x2-7, y2, 7, 29, 0x2104);	//2104
 8003470:	4b93      	ldr	r3, [pc, #588]	@ (80036c0 <Jugador2.5+0x514>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	3b07      	subs	r3, #7
 8003476:	4618      	mov	r0, r3
 8003478:	4b92      	ldr	r3, [pc, #584]	@ (80036c4 <Jugador2.5+0x518>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4619      	mov	r1, r3
 800347e:	f242 1304 	movw	r3, #8452	@ 0x2104
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	231d      	movs	r3, #29
 8003486:	2207      	movs	r2, #7
 8003488:	f7fd fb5e 	bl	8000b48 <FillRect>
			caminarD2 = 0;
 800348c:	4b8b      	ldr	r3, [pc, #556]	@ (80036bc <Jugador2.5+0x510>)
 800348e:	2200      	movs	r2, #0
 8003490:	701a      	strb	r2, [r3, #0]
		if(caminarI2 == 1){
 8003492:	4b8d      	ldr	r3, [pc, #564]	@ (80036c8 <Jugador2.5+0x51c>)
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d110      	bne.n	80034bc <Jugador2.5+0x310>
			FillRect(x2+33, y2, 7, 29, 0x2104);
 800349a:	4b89      	ldr	r3, [pc, #548]	@ (80036c0 <Jugador2.5+0x514>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	3321      	adds	r3, #33	@ 0x21
 80034a0:	4618      	mov	r0, r3
 80034a2:	4b88      	ldr	r3, [pc, #544]	@ (80036c4 <Jugador2.5+0x518>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4619      	mov	r1, r3
 80034a8:	f242 1304 	movw	r3, #8452	@ 0x2104
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	231d      	movs	r3, #29
 80034b0:	2207      	movs	r2, #7
 80034b2:	f7fd fb49 	bl	8000b48 <FillRect>
			caminarI2 = 0;
 80034b6:	4b84      	ldr	r3, [pc, #528]	@ (80036c8 <Jugador2.5+0x51c>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	701a      	strb	r2, [r3, #0]
		if (bala2 == 1) {
 80034bc:	4b83      	ldr	r3, [pc, #524]	@ (80036cc <Jugador2.5+0x520>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	f040 8180 	bne.w	80037c6 <Jugador2.5+0x61a>
			disparar_balaJ2(); // Llama a la función para disparar
 80034c6:	46c4      	mov	ip, r8
 80034c8:	f7ff f864 	bl	8002594 <disparar_balaJ2.6>
			bala2 = 0;
 80034cc:	4b7f      	ldr	r3, [pc, #508]	@ (80036cc <Jugador2.5+0x520>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	601a      	str	r2, [r3, #0]
}
 80034d2:	e178      	b.n	80037c6 <Jugador2.5+0x61a>
	}else if (ch2 == 8){
 80034d4:	4b7e      	ldr	r3, [pc, #504]	@ (80036d0 <Jugador2.5+0x524>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	2b08      	cmp	r3, #8
 80034da:	f040 80a5 	bne.w	8003628 <Jugador2.5+0x47c>
		LCD_Sprite(x2, y2, w2, h2, rollA, column2, frame2, flip22, 0);
 80034de:	4b78      	ldr	r3, [pc, #480]	@ (80036c0 <Jugador2.5+0x514>)
 80034e0:	6818      	ldr	r0, [r3, #0]
 80034e2:	4b78      	ldr	r3, [pc, #480]	@ (80036c4 <Jugador2.5+0x518>)
 80034e4:	681d      	ldr	r5, [r3, #0]
 80034e6:	4b7b      	ldr	r3, [pc, #492]	@ (80036d4 <Jugador2.5+0x528>)
 80034e8:	681e      	ldr	r6, [r3, #0]
 80034ea:	4b7b      	ldr	r3, [pc, #492]	@ (80036d8 <Jugador2.5+0x52c>)
 80034ec:	681c      	ldr	r4, [r3, #0]
 80034ee:	4b7b      	ldr	r3, [pc, #492]	@ (80036dc <Jugador2.5+0x530>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	603b      	str	r3, [r7, #0]
 80034f4:	4a6f      	ldr	r2, [pc, #444]	@ (80036b4 <Jugador2.5+0x508>)
 80034f6:	6812      	ldr	r2, [r2, #0]
 80034f8:	4979      	ldr	r1, [pc, #484]	@ (80036e0 <Jugador2.5+0x534>)
 80034fa:	6809      	ldr	r1, [r1, #0]
 80034fc:	b2c9      	uxtb	r1, r1
 80034fe:	2300      	movs	r3, #0
 8003500:	9304      	str	r3, [sp, #16]
 8003502:	9103      	str	r1, [sp, #12]
 8003504:	9202      	str	r2, [sp, #8]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	9301      	str	r3, [sp, #4]
 800350a:	4b76      	ldr	r3, [pc, #472]	@ (80036e4 <Jugador2.5+0x538>)
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	4623      	mov	r3, r4
 8003510:	4632      	mov	r2, r6
 8003512:	4629      	mov	r1, r5
 8003514:	f7fd fcb8 	bl	8000e88 <LCD_Sprite>
		y2 = y2+vY2;
 8003518:	4b6a      	ldr	r3, [pc, #424]	@ (80036c4 <Jugador2.5+0x518>)
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	4b72      	ldr	r3, [pc, #456]	@ (80036e8 <Jugador2.5+0x53c>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4413      	add	r3, r2
 8003522:	4a68      	ldr	r2, [pc, #416]	@ (80036c4 <Jugador2.5+0x518>)
 8003524:	6013      	str	r3, [r2, #0]
		if(jump2 == 1){
 8003526:	4b71      	ldr	r3, [pc, #452]	@ (80036ec <Jugador2.5+0x540>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d146      	bne.n	80035bc <Jugador2.5+0x410>
			vY2++;
 800352e:	4b6e      	ldr	r3, [pc, #440]	@ (80036e8 <Jugador2.5+0x53c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	3301      	adds	r3, #1
 8003534:	4a6c      	ldr	r2, [pc, #432]	@ (80036e8 <Jugador2.5+0x53c>)
 8003536:	6013      	str	r3, [r2, #0]
			if (falling2 == 0){
 8003538:	4b6d      	ldr	r3, [pc, #436]	@ (80036f0 <Jugador2.5+0x544>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10e      	bne.n	800355e <Jugador2.5+0x3b2>
				FillRect(x2, y2+30, 33, 9, 0x2104);
 8003540:	4b5f      	ldr	r3, [pc, #380]	@ (80036c0 <Jugador2.5+0x514>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	4b5f      	ldr	r3, [pc, #380]	@ (80036c4 <Jugador2.5+0x518>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	331e      	adds	r3, #30
 800354c:	4619      	mov	r1, r3
 800354e:	f242 1304 	movw	r3, #8452	@ 0x2104
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	2309      	movs	r3, #9
 8003556:	2221      	movs	r2, #33	@ 0x21
 8003558:	f7fd faf6 	bl	8000b48 <FillRect>
 800355c:	e011      	b.n	8003582 <Jugador2.5+0x3d6>
			}else if (falling1 == 1){
 800355e:	4b65      	ldr	r3, [pc, #404]	@ (80036f4 <Jugador2.5+0x548>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d10d      	bne.n	8003582 <Jugador2.5+0x3d6>
				FillRect(x2, y2-24, 33, 25, 0x2104);
 8003566:	4b56      	ldr	r3, [pc, #344]	@ (80036c0 <Jugador2.5+0x514>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	4b55      	ldr	r3, [pc, #340]	@ (80036c4 <Jugador2.5+0x518>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	3b18      	subs	r3, #24
 8003572:	4619      	mov	r1, r3
 8003574:	f242 1304 	movw	r3, #8452	@ 0x2104
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	2319      	movs	r3, #25
 800357c:	2221      	movs	r2, #33	@ 0x21
 800357e:	f7fd fae3 	bl	8000b48 <FillRect>
			if(vY2 == 0){
 8003582:	4b59      	ldr	r3, [pc, #356]	@ (80036e8 <Jugador2.5+0x53c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d102      	bne.n	8003590 <Jugador2.5+0x3e4>
				falling2 = 1;
 800358a:	4b59      	ldr	r3, [pc, #356]	@ (80036f0 <Jugador2.5+0x544>)
 800358c:	2201      	movs	r2, #1
 800358e:	601a      	str	r2, [r3, #0]
			if(y2 >= y2Estandar){
 8003590:	4b4c      	ldr	r3, [pc, #304]	@ (80036c4 <Jugador2.5+0x518>)
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	4b58      	ldr	r3, [pc, #352]	@ (80036f8 <Jugador2.5+0x54c>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	429a      	cmp	r2, r3
 800359a:	db0f      	blt.n	80035bc <Jugador2.5+0x410>
				vY2 = 0;
 800359c:	4b52      	ldr	r3, [pc, #328]	@ (80036e8 <Jugador2.5+0x53c>)
 800359e:	2200      	movs	r2, #0
 80035a0:	601a      	str	r2, [r3, #0]
				jump2 = 0;
 80035a2:	4b52      	ldr	r3, [pc, #328]	@ (80036ec <Jugador2.5+0x540>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]
				y2 = y2Estandar;
 80035a8:	4b53      	ldr	r3, [pc, #332]	@ (80036f8 <Jugador2.5+0x54c>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a45      	ldr	r2, [pc, #276]	@ (80036c4 <Jugador2.5+0x518>)
 80035ae:	6013      	str	r3, [r2, #0]
				frame2 = 0;
 80035b0:	4b40      	ldr	r3, [pc, #256]	@ (80036b4 <Jugador2.5+0x508>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	601a      	str	r2, [r3, #0]
				jumpcount2 = 0;
 80035b6:	4b40      	ldr	r3, [pc, #256]	@ (80036b8 <Jugador2.5+0x50c>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]
		if(caminarD2 == 1){
 80035bc:	4b3f      	ldr	r3, [pc, #252]	@ (80036bc <Jugador2.5+0x510>)
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d110      	bne.n	80035e6 <Jugador2.5+0x43a>
			FillRect(x2-7, y2, 7, 30, 0x2104);	//2104
 80035c4:	4b3e      	ldr	r3, [pc, #248]	@ (80036c0 <Jugador2.5+0x514>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	3b07      	subs	r3, #7
 80035ca:	4618      	mov	r0, r3
 80035cc:	4b3d      	ldr	r3, [pc, #244]	@ (80036c4 <Jugador2.5+0x518>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4619      	mov	r1, r3
 80035d2:	f242 1304 	movw	r3, #8452	@ 0x2104
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	231e      	movs	r3, #30
 80035da:	2207      	movs	r2, #7
 80035dc:	f7fd fab4 	bl	8000b48 <FillRect>
			caminarD2 = 0;
 80035e0:	4b36      	ldr	r3, [pc, #216]	@ (80036bc <Jugador2.5+0x510>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	701a      	strb	r2, [r3, #0]
		if(caminarI2 == 1){
 80035e6:	4b38      	ldr	r3, [pc, #224]	@ (80036c8 <Jugador2.5+0x51c>)
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d110      	bne.n	8003610 <Jugador2.5+0x464>
			FillRect(x2+33, y2, 7, 30, 0x2104);
 80035ee:	4b34      	ldr	r3, [pc, #208]	@ (80036c0 <Jugador2.5+0x514>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	3321      	adds	r3, #33	@ 0x21
 80035f4:	4618      	mov	r0, r3
 80035f6:	4b33      	ldr	r3, [pc, #204]	@ (80036c4 <Jugador2.5+0x518>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4619      	mov	r1, r3
 80035fc:	f242 1304 	movw	r3, #8452	@ 0x2104
 8003600:	9300      	str	r3, [sp, #0]
 8003602:	231e      	movs	r3, #30
 8003604:	2207      	movs	r2, #7
 8003606:	f7fd fa9f 	bl	8000b48 <FillRect>
			caminarI2 = 0;
 800360a:	4b2f      	ldr	r3, [pc, #188]	@ (80036c8 <Jugador2.5+0x51c>)
 800360c:	2200      	movs	r2, #0
 800360e:	701a      	strb	r2, [r3, #0]
		if (bala2 == 1) {
 8003610:	4b2e      	ldr	r3, [pc, #184]	@ (80036cc <Jugador2.5+0x520>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2b01      	cmp	r3, #1
 8003616:	f040 80d6 	bne.w	80037c6 <Jugador2.5+0x61a>
			disparar_balaJ2(); // Llama a la función para disparar
 800361a:	46c4      	mov	ip, r8
 800361c:	f7fe ffba 	bl	8002594 <disparar_balaJ2.6>
			bala2 = 0;
 8003620:	4b2a      	ldr	r3, [pc, #168]	@ (80036cc <Jugador2.5+0x520>)
 8003622:	2200      	movs	r2, #0
 8003624:	601a      	str	r2, [r3, #0]
}
 8003626:	e0ce      	b.n	80037c6 <Jugador2.5+0x61a>
	}else if (ch2 == 9){
 8003628:	4b29      	ldr	r3, [pc, #164]	@ (80036d0 <Jugador2.5+0x524>)
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b09      	cmp	r3, #9
 800362e:	f040 80ca 	bne.w	80037c6 <Jugador2.5+0x61a>
		LCD_Sprite(x2, y2, w2, h2, marioA, column2, frame2, flip22, 0);
 8003632:	4b23      	ldr	r3, [pc, #140]	@ (80036c0 <Jugador2.5+0x514>)
 8003634:	6818      	ldr	r0, [r3, #0]
 8003636:	4b23      	ldr	r3, [pc, #140]	@ (80036c4 <Jugador2.5+0x518>)
 8003638:	681d      	ldr	r5, [r3, #0]
 800363a:	4b26      	ldr	r3, [pc, #152]	@ (80036d4 <Jugador2.5+0x528>)
 800363c:	681e      	ldr	r6, [r3, #0]
 800363e:	4b26      	ldr	r3, [pc, #152]	@ (80036d8 <Jugador2.5+0x52c>)
 8003640:	681c      	ldr	r4, [r3, #0]
 8003642:	4b26      	ldr	r3, [pc, #152]	@ (80036dc <Jugador2.5+0x530>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	603b      	str	r3, [r7, #0]
 8003648:	4a1a      	ldr	r2, [pc, #104]	@ (80036b4 <Jugador2.5+0x508>)
 800364a:	6812      	ldr	r2, [r2, #0]
 800364c:	4924      	ldr	r1, [pc, #144]	@ (80036e0 <Jugador2.5+0x534>)
 800364e:	6809      	ldr	r1, [r1, #0]
 8003650:	b2c9      	uxtb	r1, r1
 8003652:	2300      	movs	r3, #0
 8003654:	9304      	str	r3, [sp, #16]
 8003656:	9103      	str	r1, [sp, #12]
 8003658:	9202      	str	r2, [sp, #8]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	9301      	str	r3, [sp, #4]
 800365e:	4b27      	ldr	r3, [pc, #156]	@ (80036fc <Jugador2.5+0x550>)
 8003660:	9300      	str	r3, [sp, #0]
 8003662:	4623      	mov	r3, r4
 8003664:	4632      	mov	r2, r6
 8003666:	4629      	mov	r1, r5
 8003668:	f7fd fc0e 	bl	8000e88 <LCD_Sprite>
		y2 = y2+vY2;
 800366c:	4b15      	ldr	r3, [pc, #84]	@ (80036c4 <Jugador2.5+0x518>)
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	4b1d      	ldr	r3, [pc, #116]	@ (80036e8 <Jugador2.5+0x53c>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4413      	add	r3, r2
 8003676:	4a13      	ldr	r2, [pc, #76]	@ (80036c4 <Jugador2.5+0x518>)
 8003678:	6013      	str	r3, [r2, #0]
		if(jump2 == 1){
 800367a:	4b1c      	ldr	r3, [pc, #112]	@ (80036ec <Jugador2.5+0x540>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d16d      	bne.n	800375e <Jugador2.5+0x5b2>
			vY2++;
 8003682:	4b19      	ldr	r3, [pc, #100]	@ (80036e8 <Jugador2.5+0x53c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	3301      	adds	r3, #1
 8003688:	4a17      	ldr	r2, [pc, #92]	@ (80036e8 <Jugador2.5+0x53c>)
 800368a:	6013      	str	r3, [r2, #0]
			if (falling2 == 0){
 800368c:	4b18      	ldr	r3, [pc, #96]	@ (80036f0 <Jugador2.5+0x544>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d135      	bne.n	8003700 <Jugador2.5+0x554>
				FillRect(x2, y2+25, 26, 9, 0x2104);
 8003694:	4b0a      	ldr	r3, [pc, #40]	@ (80036c0 <Jugador2.5+0x514>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4618      	mov	r0, r3
 800369a:	4b0a      	ldr	r3, [pc, #40]	@ (80036c4 <Jugador2.5+0x518>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	3319      	adds	r3, #25
 80036a0:	4619      	mov	r1, r3
 80036a2:	f242 1304 	movw	r3, #8452	@ 0x2104
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	2309      	movs	r3, #9
 80036aa:	221a      	movs	r2, #26
 80036ac:	f7fd fa4c 	bl	8000b48 <FillRect>
 80036b0:	e038      	b.n	8003724 <Jugador2.5+0x578>
 80036b2:	bf00      	nop
 80036b4:	20012e58 	.word	0x20012e58
 80036b8:	2001411c 	.word	0x2001411c
 80036bc:	20014093 	.word	0x20014093
 80036c0:	20012e4c 	.word	0x20012e4c
 80036c4:	20012e54 	.word	0x20012e54
 80036c8:	20014094 	.word	0x20014094
 80036cc:	20014138 	.word	0x20014138
 80036d0:	2001409e 	.word	0x2001409e
 80036d4:	20014104 	.word	0x20014104
 80036d8:	20014110 	.word	0x20014110
 80036dc:	20014108 	.word	0x20014108
 80036e0:	2001410c 	.word	0x2001410c
 80036e4:	08013b38 	.word	0x08013b38
 80036e8:	20014114 	.word	0x20014114
 80036ec:	20014118 	.word	0x20014118
 80036f0:	20012e5c 	.word	0x20012e5c
 80036f4:	20012e3c 	.word	0x20012e3c
 80036f8:	20012e50 	.word	0x20012e50
 80036fc:	08018b24 	.word	0x08018b24
			}else if (falling1 == 1){
 8003700:	4b33      	ldr	r3, [pc, #204]	@ (80037d0 <Jugador2.5+0x624>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d10d      	bne.n	8003724 <Jugador2.5+0x578>
				FillRect(x2, y2-24, 26, 25, 0x2104);
 8003708:	4b32      	ldr	r3, [pc, #200]	@ (80037d4 <Jugador2.5+0x628>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4618      	mov	r0, r3
 800370e:	4b32      	ldr	r3, [pc, #200]	@ (80037d8 <Jugador2.5+0x62c>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	3b18      	subs	r3, #24
 8003714:	4619      	mov	r1, r3
 8003716:	f242 1304 	movw	r3, #8452	@ 0x2104
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	2319      	movs	r3, #25
 800371e:	221a      	movs	r2, #26
 8003720:	f7fd fa12 	bl	8000b48 <FillRect>
			if(vY2 == 0){
 8003724:	4b2d      	ldr	r3, [pc, #180]	@ (80037dc <Jugador2.5+0x630>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d102      	bne.n	8003732 <Jugador2.5+0x586>
				falling2 = 1;
 800372c:	4b2c      	ldr	r3, [pc, #176]	@ (80037e0 <Jugador2.5+0x634>)
 800372e:	2201      	movs	r2, #1
 8003730:	601a      	str	r2, [r3, #0]
			if(y2 >= y2Estandar){
 8003732:	4b29      	ldr	r3, [pc, #164]	@ (80037d8 <Jugador2.5+0x62c>)
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	4b2b      	ldr	r3, [pc, #172]	@ (80037e4 <Jugador2.5+0x638>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	429a      	cmp	r2, r3
 800373c:	db0f      	blt.n	800375e <Jugador2.5+0x5b2>
				vY2 = 0;
 800373e:	4b27      	ldr	r3, [pc, #156]	@ (80037dc <Jugador2.5+0x630>)
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]
				jump2 = 0;
 8003744:	4b28      	ldr	r3, [pc, #160]	@ (80037e8 <Jugador2.5+0x63c>)
 8003746:	2200      	movs	r2, #0
 8003748:	601a      	str	r2, [r3, #0]
				y2 = y2Estandar;
 800374a:	4b26      	ldr	r3, [pc, #152]	@ (80037e4 <Jugador2.5+0x638>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a22      	ldr	r2, [pc, #136]	@ (80037d8 <Jugador2.5+0x62c>)
 8003750:	6013      	str	r3, [r2, #0]
				frame2 = 0;
 8003752:	4b26      	ldr	r3, [pc, #152]	@ (80037ec <Jugador2.5+0x640>)
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]
				jumpcount2 = 0;
 8003758:	4b25      	ldr	r3, [pc, #148]	@ (80037f0 <Jugador2.5+0x644>)
 800375a:	2200      	movs	r2, #0
 800375c:	601a      	str	r2, [r3, #0]
		if(caminarD2 == 1){
 800375e:	4b25      	ldr	r3, [pc, #148]	@ (80037f4 <Jugador2.5+0x648>)
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d110      	bne.n	8003788 <Jugador2.5+0x5dc>
			FillRect(x2-7, y2, 7, 26, 0x2104);	//2104
 8003766:	4b1b      	ldr	r3, [pc, #108]	@ (80037d4 <Jugador2.5+0x628>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	3b07      	subs	r3, #7
 800376c:	4618      	mov	r0, r3
 800376e:	4b1a      	ldr	r3, [pc, #104]	@ (80037d8 <Jugador2.5+0x62c>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4619      	mov	r1, r3
 8003774:	f242 1304 	movw	r3, #8452	@ 0x2104
 8003778:	9300      	str	r3, [sp, #0]
 800377a:	231a      	movs	r3, #26
 800377c:	2207      	movs	r2, #7
 800377e:	f7fd f9e3 	bl	8000b48 <FillRect>
			caminarD2 = 0;
 8003782:	4b1c      	ldr	r3, [pc, #112]	@ (80037f4 <Jugador2.5+0x648>)
 8003784:	2200      	movs	r2, #0
 8003786:	701a      	strb	r2, [r3, #0]
		if(caminarI2 == 1){
 8003788:	4b1b      	ldr	r3, [pc, #108]	@ (80037f8 <Jugador2.5+0x64c>)
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d110      	bne.n	80037b2 <Jugador2.5+0x606>
			FillRect(x2+33, y2, 7, 26, 0x2104);
 8003790:	4b10      	ldr	r3, [pc, #64]	@ (80037d4 <Jugador2.5+0x628>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	3321      	adds	r3, #33	@ 0x21
 8003796:	4618      	mov	r0, r3
 8003798:	4b0f      	ldr	r3, [pc, #60]	@ (80037d8 <Jugador2.5+0x62c>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4619      	mov	r1, r3
 800379e:	f242 1304 	movw	r3, #8452	@ 0x2104
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	231a      	movs	r3, #26
 80037a6:	2207      	movs	r2, #7
 80037a8:	f7fd f9ce 	bl	8000b48 <FillRect>
			caminarI2 = 0;
 80037ac:	4b12      	ldr	r3, [pc, #72]	@ (80037f8 <Jugador2.5+0x64c>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	701a      	strb	r2, [r3, #0]
		if (bala2 == 1) {
 80037b2:	4b12      	ldr	r3, [pc, #72]	@ (80037fc <Jugador2.5+0x650>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d105      	bne.n	80037c6 <Jugador2.5+0x61a>
			disparar_balaJ2(); // Llama a la función para disparar
 80037ba:	46c4      	mov	ip, r8
 80037bc:	f7fe feea 	bl	8002594 <disparar_balaJ2.6>
			bala2 = 0;
 80037c0:	4b0e      	ldr	r3, [pc, #56]	@ (80037fc <Jugador2.5+0x650>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]
}
 80037c6:	bf00      	nop
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037d0:	20012e3c 	.word	0x20012e3c
 80037d4:	20012e4c 	.word	0x20012e4c
 80037d8:	20012e54 	.word	0x20012e54
 80037dc:	20014114 	.word	0x20014114
 80037e0:	20012e5c 	.word	0x20012e5c
 80037e4:	20012e50 	.word	0x20012e50
 80037e8:	20014118 	.word	0x20014118
 80037ec:	20012e58 	.word	0x20012e58
 80037f0:	2001411c 	.word	0x2001411c
 80037f4:	20014093 	.word	0x20014093
 80037f8:	20014094 	.word	0x20014094
 80037fc:	20014138 	.word	0x20014138

08003800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b094      	sub	sp, #80	@ 0x50
 8003804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003806:	f107 031c 	add.w	r3, r7, #28
 800380a:	2234      	movs	r2, #52	@ 0x34
 800380c:	2100      	movs	r1, #0
 800380e:	4618      	mov	r0, r3
 8003810:	f005 fa98 	bl	8008d44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003814:	f107 0308 	add.w	r3, r7, #8
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	605a      	str	r2, [r3, #4]
 800381e:	609a      	str	r2, [r3, #8]
 8003820:	60da      	str	r2, [r3, #12]
 8003822:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003824:	2300      	movs	r3, #0
 8003826:	607b      	str	r3, [r7, #4]
 8003828:	4b29      	ldr	r3, [pc, #164]	@ (80038d0 <SystemClock_Config+0xd0>)
 800382a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382c:	4a28      	ldr	r2, [pc, #160]	@ (80038d0 <SystemClock_Config+0xd0>)
 800382e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003832:	6413      	str	r3, [r2, #64]	@ 0x40
 8003834:	4b26      	ldr	r3, [pc, #152]	@ (80038d0 <SystemClock_Config+0xd0>)
 8003836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003838:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800383c:	607b      	str	r3, [r7, #4]
 800383e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003840:	2300      	movs	r3, #0
 8003842:	603b      	str	r3, [r7, #0]
 8003844:	4b23      	ldr	r3, [pc, #140]	@ (80038d4 <SystemClock_Config+0xd4>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800384c:	4a21      	ldr	r2, [pc, #132]	@ (80038d4 <SystemClock_Config+0xd4>)
 800384e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003852:	6013      	str	r3, [r2, #0]
 8003854:	4b1f      	ldr	r3, [pc, #124]	@ (80038d4 <SystemClock_Config+0xd4>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800385c:	603b      	str	r3, [r7, #0]
 800385e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003860:	2302      	movs	r3, #2
 8003862:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003864:	2301      	movs	r3, #1
 8003866:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003868:	2310      	movs	r3, #16
 800386a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800386c:	2302      	movs	r3, #2
 800386e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003870:	2300      	movs	r3, #0
 8003872:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003874:	2308      	movs	r3, #8
 8003876:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8003878:	2350      	movs	r3, #80	@ 0x50
 800387a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800387c:	2302      	movs	r3, #2
 800387e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003880:	2302      	movs	r3, #2
 8003882:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003884:	2302      	movs	r3, #2
 8003886:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003888:	f107 031c 	add.w	r3, r7, #28
 800388c:	4618      	mov	r0, r3
 800388e:	f003 f91d 	bl	8006acc <HAL_RCC_OscConfig>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003898:	f002 f84a 	bl	8005930 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800389c:	230f      	movs	r3, #15
 800389e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038a0:	2302      	movs	r3, #2
 80038a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038a4:	2300      	movs	r3, #0
 80038a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80038a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80038ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80038ae:	2300      	movs	r3, #0
 80038b0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80038b2:	f107 0308 	add.w	r3, r7, #8
 80038b6:	2102      	movs	r1, #2
 80038b8:	4618      	mov	r0, r3
 80038ba:	f002 fe43 	bl	8006544 <HAL_RCC_ClockConfig>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80038c4:	f002 f834 	bl	8005930 <Error_Handler>
  }
}
 80038c8:	bf00      	nop
 80038ca:	3750      	adds	r7, #80	@ 0x50
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40023800 	.word	0x40023800
 80038d4:	40007000 	.word	0x40007000

080038d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */
  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80038dc:	4b17      	ldr	r3, [pc, #92]	@ (800393c <MX_SPI1_Init+0x64>)
 80038de:	4a18      	ldr	r2, [pc, #96]	@ (8003940 <MX_SPI1_Init+0x68>)
 80038e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80038e2:	4b16      	ldr	r3, [pc, #88]	@ (800393c <MX_SPI1_Init+0x64>)
 80038e4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80038e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80038ea:	4b14      	ldr	r3, [pc, #80]	@ (800393c <MX_SPI1_Init+0x64>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80038f0:	4b12      	ldr	r3, [pc, #72]	@ (800393c <MX_SPI1_Init+0x64>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80038f6:	4b11      	ldr	r3, [pc, #68]	@ (800393c <MX_SPI1_Init+0x64>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80038fc:	4b0f      	ldr	r3, [pc, #60]	@ (800393c <MX_SPI1_Init+0x64>)
 80038fe:	2200      	movs	r2, #0
 8003900:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003902:	4b0e      	ldr	r3, [pc, #56]	@ (800393c <MX_SPI1_Init+0x64>)
 8003904:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003908:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800390a:	4b0c      	ldr	r3, [pc, #48]	@ (800393c <MX_SPI1_Init+0x64>)
 800390c:	2200      	movs	r2, #0
 800390e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003910:	4b0a      	ldr	r3, [pc, #40]	@ (800393c <MX_SPI1_Init+0x64>)
 8003912:	2200      	movs	r2, #0
 8003914:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003916:	4b09      	ldr	r3, [pc, #36]	@ (800393c <MX_SPI1_Init+0x64>)
 8003918:	2200      	movs	r2, #0
 800391a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800391c:	4b07      	ldr	r3, [pc, #28]	@ (800393c <MX_SPI1_Init+0x64>)
 800391e:	2200      	movs	r2, #0
 8003920:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003922:	4b06      	ldr	r3, [pc, #24]	@ (800393c <MX_SPI1_Init+0x64>)
 8003924:	220a      	movs	r2, #10
 8003926:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003928:	4804      	ldr	r0, [pc, #16]	@ (800393c <MX_SPI1_Init+0x64>)
 800392a:	f003 fb6d 	bl	8007008 <HAL_SPI_Init>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003934:	f001 fffc 	bl	8005930 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  /* USER CODE END SPI1_Init 2 */

}
 8003938:	bf00      	nop
 800393a:	bd80      	pop	{r7, pc}
 800393c:	20013f60 	.word	0x20013f60
 8003940:	40013000 	.word	0x40013000

08003944 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_Init 0 */
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */
  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003948:	4b11      	ldr	r3, [pc, #68]	@ (8003990 <MX_UART5_Init+0x4c>)
 800394a:	4a12      	ldr	r2, [pc, #72]	@ (8003994 <MX_UART5_Init+0x50>)
 800394c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800394e:	4b10      	ldr	r3, [pc, #64]	@ (8003990 <MX_UART5_Init+0x4c>)
 8003950:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003954:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003956:	4b0e      	ldr	r3, [pc, #56]	@ (8003990 <MX_UART5_Init+0x4c>)
 8003958:	2200      	movs	r2, #0
 800395a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800395c:	4b0c      	ldr	r3, [pc, #48]	@ (8003990 <MX_UART5_Init+0x4c>)
 800395e:	2200      	movs	r2, #0
 8003960:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003962:	4b0b      	ldr	r3, [pc, #44]	@ (8003990 <MX_UART5_Init+0x4c>)
 8003964:	2200      	movs	r2, #0
 8003966:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003968:	4b09      	ldr	r3, [pc, #36]	@ (8003990 <MX_UART5_Init+0x4c>)
 800396a:	220c      	movs	r2, #12
 800396c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800396e:	4b08      	ldr	r3, [pc, #32]	@ (8003990 <MX_UART5_Init+0x4c>)
 8003970:	2200      	movs	r2, #0
 8003972:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003974:	4b06      	ldr	r3, [pc, #24]	@ (8003990 <MX_UART5_Init+0x4c>)
 8003976:	2200      	movs	r2, #0
 8003978:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800397a:	4805      	ldr	r0, [pc, #20]	@ (8003990 <MX_UART5_Init+0x4c>)
 800397c:	f003 fbcd 	bl	800711a <HAL_UART_Init>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8003986:	f001 ffd3 	bl	8005930 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */
  /* USER CODE END UART5_Init 2 */

}
 800398a:	bf00      	nop
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	20013fb8 	.word	0x20013fb8
 8003994:	40005000 	.word	0x40005000

08003998 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800399c:	4b11      	ldr	r3, [pc, #68]	@ (80039e4 <MX_USART2_UART_Init+0x4c>)
 800399e:	4a12      	ldr	r2, [pc, #72]	@ (80039e8 <MX_USART2_UART_Init+0x50>)
 80039a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80039a2:	4b10      	ldr	r3, [pc, #64]	@ (80039e4 <MX_USART2_UART_Init+0x4c>)
 80039a4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80039a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80039aa:	4b0e      	ldr	r3, [pc, #56]	@ (80039e4 <MX_USART2_UART_Init+0x4c>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80039b0:	4b0c      	ldr	r3, [pc, #48]	@ (80039e4 <MX_USART2_UART_Init+0x4c>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80039b6:	4b0b      	ldr	r3, [pc, #44]	@ (80039e4 <MX_USART2_UART_Init+0x4c>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80039bc:	4b09      	ldr	r3, [pc, #36]	@ (80039e4 <MX_USART2_UART_Init+0x4c>)
 80039be:	220c      	movs	r2, #12
 80039c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039c2:	4b08      	ldr	r3, [pc, #32]	@ (80039e4 <MX_USART2_UART_Init+0x4c>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80039c8:	4b06      	ldr	r3, [pc, #24]	@ (80039e4 <MX_USART2_UART_Init+0x4c>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80039ce:	4805      	ldr	r0, [pc, #20]	@ (80039e4 <MX_USART2_UART_Init+0x4c>)
 80039d0:	f003 fba3 	bl	800711a <HAL_UART_Init>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80039da:	f001 ffa9 	bl	8005930 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 80039de:	bf00      	nop
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	20014000 	.word	0x20014000
 80039e8:	40004400 	.word	0x40004400

080039ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_Init 0 */
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */
  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80039f0:	4b11      	ldr	r3, [pc, #68]	@ (8003a38 <MX_USART3_UART_Init+0x4c>)
 80039f2:	4a12      	ldr	r2, [pc, #72]	@ (8003a3c <MX_USART3_UART_Init+0x50>)
 80039f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80039f6:	4b10      	ldr	r3, [pc, #64]	@ (8003a38 <MX_USART3_UART_Init+0x4c>)
 80039f8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80039fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80039fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003a38 <MX_USART3_UART_Init+0x4c>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003a04:	4b0c      	ldr	r3, [pc, #48]	@ (8003a38 <MX_USART3_UART_Init+0x4c>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a38 <MX_USART3_UART_Init+0x4c>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003a10:	4b09      	ldr	r3, [pc, #36]	@ (8003a38 <MX_USART3_UART_Init+0x4c>)
 8003a12:	220c      	movs	r2, #12
 8003a14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a16:	4b08      	ldr	r3, [pc, #32]	@ (8003a38 <MX_USART3_UART_Init+0x4c>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a1c:	4b06      	ldr	r3, [pc, #24]	@ (8003a38 <MX_USART3_UART_Init+0x4c>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003a22:	4805      	ldr	r0, [pc, #20]	@ (8003a38 <MX_USART3_UART_Init+0x4c>)
 8003a24:	f003 fb79 	bl	800711a <HAL_UART_Init>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003a2e:	f001 ff7f 	bl	8005930 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  /* USER CODE END USART3_Init 2 */

}
 8003a32:	bf00      	nop
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	20014048 	.word	0x20014048
 8003a3c:	40004800 	.word	0x40004800

08003a40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b08a      	sub	sp, #40	@ 0x28
 8003a44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a46:	f107 0314 	add.w	r3, r7, #20
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	605a      	str	r2, [r3, #4]
 8003a50:	609a      	str	r2, [r3, #8]
 8003a52:	60da      	str	r2, [r3, #12]
 8003a54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a56:	2300      	movs	r3, #0
 8003a58:	613b      	str	r3, [r7, #16]
 8003a5a:	4b42      	ldr	r3, [pc, #264]	@ (8003b64 <MX_GPIO_Init+0x124>)
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a5e:	4a41      	ldr	r2, [pc, #260]	@ (8003b64 <MX_GPIO_Init+0x124>)
 8003a60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a66:	4b3f      	ldr	r3, [pc, #252]	@ (8003b64 <MX_GPIO_Init+0x124>)
 8003a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a6e:	613b      	str	r3, [r7, #16]
 8003a70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a72:	2300      	movs	r3, #0
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	4b3b      	ldr	r3, [pc, #236]	@ (8003b64 <MX_GPIO_Init+0x124>)
 8003a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a7a:	4a3a      	ldr	r2, [pc, #232]	@ (8003b64 <MX_GPIO_Init+0x124>)
 8003a7c:	f043 0304 	orr.w	r3, r3, #4
 8003a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a82:	4b38      	ldr	r3, [pc, #224]	@ (8003b64 <MX_GPIO_Init+0x124>)
 8003a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a86:	f003 0304 	and.w	r3, r3, #4
 8003a8a:	60fb      	str	r3, [r7, #12]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60bb      	str	r3, [r7, #8]
 8003a92:	4b34      	ldr	r3, [pc, #208]	@ (8003b64 <MX_GPIO_Init+0x124>)
 8003a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a96:	4a33      	ldr	r2, [pc, #204]	@ (8003b64 <MX_GPIO_Init+0x124>)
 8003a98:	f043 0301 	orr.w	r3, r3, #1
 8003a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a9e:	4b31      	ldr	r3, [pc, #196]	@ (8003b64 <MX_GPIO_Init+0x124>)
 8003aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	60bb      	str	r3, [r7, #8]
 8003aa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aaa:	2300      	movs	r3, #0
 8003aac:	607b      	str	r3, [r7, #4]
 8003aae:	4b2d      	ldr	r3, [pc, #180]	@ (8003b64 <MX_GPIO_Init+0x124>)
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab2:	4a2c      	ldr	r2, [pc, #176]	@ (8003b64 <MX_GPIO_Init+0x124>)
 8003ab4:	f043 0302 	orr.w	r3, r3, #2
 8003ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003aba:	4b2a      	ldr	r3, [pc, #168]	@ (8003b64 <MX_GPIO_Init+0x124>)
 8003abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	607b      	str	r3, [r7, #4]
 8003ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	603b      	str	r3, [r7, #0]
 8003aca:	4b26      	ldr	r3, [pc, #152]	@ (8003b64 <MX_GPIO_Init+0x124>)
 8003acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ace:	4a25      	ldr	r2, [pc, #148]	@ (8003b64 <MX_GPIO_Init+0x124>)
 8003ad0:	f043 0308 	orr.w	r3, r3, #8
 8003ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ad6:	4b23      	ldr	r3, [pc, #140]	@ (8003b64 <MX_GPIO_Init+0x124>)
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	603b      	str	r3, [r7, #0]
 8003ae0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin|LCD_D1_Pin, GPIO_PIN_RESET);
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	2182      	movs	r1, #130	@ 0x82
 8003ae6:	4820      	ldr	r0, [pc, #128]	@ (8003b68 <MX_GPIO_Init+0x128>)
 8003ae8:	f002 fd12 	bl	8006510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 8003aec:	2200      	movs	r2, #0
 8003aee:	f240 7113 	movw	r1, #1811	@ 0x713
 8003af2:	481e      	ldr	r0, [pc, #120]	@ (8003b6c <MX_GPIO_Init+0x12c>)
 8003af4:	f002 fd0c 	bl	8006510 <HAL_GPIO_WritePin>
                          |LCD_D0_Pin|LCD_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 8003af8:	2200      	movs	r2, #0
 8003afa:	f240 4179 	movw	r1, #1145	@ 0x479
 8003afe:	481c      	ldr	r0, [pc, #112]	@ (8003b70 <MX_GPIO_Init+0x130>)
 8003b00:	f002 fd06 	bl	8006510 <HAL_GPIO_WritePin>
                          |LCD_D4_Pin|SD_SS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_RST_Pin LCD_D1_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_D1_Pin;
 8003b04:	2382      	movs	r3, #130	@ 0x82
 8003b06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b10:	2302      	movs	r3, #2
 8003b12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b14:	f107 0314 	add.w	r3, r7, #20
 8003b18:	4619      	mov	r1, r3
 8003b1a:	4813      	ldr	r0, [pc, #76]	@ (8003b68 <MX_GPIO_Init+0x128>)
 8003b1c:	f002 fb64 	bl	80061e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RD_Pin LCD_WR_Pin LCD_RS_Pin LCD_D7_Pin
                           LCD_D0_Pin LCD_D2_Pin */
  GPIO_InitStruct.Pin = LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 8003b20:	f240 7313 	movw	r3, #1811	@ 0x713
 8003b24:	617b      	str	r3, [r7, #20]
                          |LCD_D0_Pin|LCD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b26:	2301      	movs	r3, #1
 8003b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b2e:	2302      	movs	r3, #2
 8003b30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b32:	f107 0314 	add.w	r3, r7, #20
 8003b36:	4619      	mov	r1, r3
 8003b38:	480c      	ldr	r0, [pc, #48]	@ (8003b6c <MX_GPIO_Init+0x12c>)
 8003b3a:	f002 fb55 	bl	80061e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_D6_Pin LCD_D3_Pin LCD_D5_Pin
                           LCD_D4_Pin SD_SS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 8003b3e:	f240 4379 	movw	r3, #1145	@ 0x479
 8003b42:	617b      	str	r3, [r7, #20]
                          |LCD_D4_Pin|SD_SS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b44:	2301      	movs	r3, #1
 8003b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b50:	f107 0314 	add.w	r3, r7, #20
 8003b54:	4619      	mov	r1, r3
 8003b56:	4806      	ldr	r0, [pc, #24]	@ (8003b70 <MX_GPIO_Init+0x130>)
 8003b58:	f002 fb46 	bl	80061e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003b5c:	bf00      	nop
 8003b5e:	3728      	adds	r7, #40	@ 0x28
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	40023800 	.word	0x40023800
 8003b68:	40020800 	.word	0x40020800
 8003b6c:	40020000 	.word	0x40020000
 8003b70:	40020400 	.word	0x40020400

08003b74 <transmit_uart3>:
}

void transmit_uart2(char *message) {
   HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
}
void transmit_uart3(char *message) {
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit(&huart3, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f7fc fb47 	bl	8000210 <strlen>
 8003b82:	4603      	mov	r3, r0
 8003b84:	b29a      	uxth	r2, r3
 8003b86:	f04f 33ff 	mov.w	r3, #4294967295
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	4803      	ldr	r0, [pc, #12]	@ (8003b9c <transmit_uart3+0x28>)
 8003b8e:	f003 fb14 	bl	80071ba <HAL_UART_Transmit>
}
 8003b92:	bf00      	nop
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	20014048 	.word	0x20014048

08003ba0 <transmit_uart5>:
void transmit_uart5(char *message) {
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit(&huart5, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f7fc fb31 	bl	8000210 <strlen>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb6:	6879      	ldr	r1, [r7, #4]
 8003bb8:	4803      	ldr	r0, [pc, #12]	@ (8003bc8 <transmit_uart5+0x28>)
 8003bba:	f003 fafe 	bl	80071ba <HAL_UART_Transmit>
}
 8003bbe:	bf00      	nop
 8003bc0:	3708      	adds	r7, #8
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	20013fb8 	.word	0x20013fb8

08003bcc <check_konami_code1>:
/*______Código Konami_________________________*/
void check_konami_code1() {
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
   // Verificar si el buffer coincide con el código Konami
   int match = 1;  // Asumimos que hay coincidencia
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	607b      	str	r3, [r7, #4]
   for (int i = 0; i < KONAMI_LENGTH; i++) {
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	603b      	str	r3, [r7, #0]
 8003bda:	e00f      	b.n	8003bfc <check_konami_code1+0x30>
       if (input_buffer1[i] != konami_code1[i]) {
 8003bdc:	4a10      	ldr	r2, [pc, #64]	@ (8003c20 <check_konami_code1+0x54>)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	4413      	add	r3, r2
 8003be2:	781a      	ldrb	r2, [r3, #0]
 8003be4:	490f      	ldr	r1, [pc, #60]	@ (8003c24 <check_konami_code1+0x58>)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	440b      	add	r3, r1
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d002      	beq.n	8003bf6 <check_konami_code1+0x2a>
           match = 0;  // Si no coinciden, desactivamos la coincidencia
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	607b      	str	r3, [r7, #4]
           break;
 8003bf4:	e005      	b.n	8003c02 <check_konami_code1+0x36>
   for (int i = 0; i < KONAMI_LENGTH; i++) {
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	603b      	str	r3, [r7, #0]
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	ddec      	ble.n	8003bdc <check_konami_code1+0x10>
       }
   }
   // Si coincide, activamos la escena
   if (match) {
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d005      	beq.n	8003c14 <check_konami_code1+0x48>
       //transmit_uart2("Código Konami completado \r\n");
       modo = 99;
 8003c08:	4b07      	ldr	r3, [pc, #28]	@ (8003c28 <check_konami_code1+0x5c>)
 8003c0a:	2263      	movs	r2, #99	@ 0x63
 8003c0c:	701a      	strb	r2, [r3, #0]
       konami1 =1;
 8003c0e:	4b07      	ldr	r3, [pc, #28]	@ (8003c2c <check_konami_code1+0x60>)
 8003c10:	2201      	movs	r2, #1
 8003c12:	601a      	str	r2, [r3, #0]
   }
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	20014168 	.word	0x20014168
 8003c24:	20012e6c 	.word	0x20012e6c
 8003c28:	20014090 	.word	0x20014090
 8003c2c:	20014170 	.word	0x20014170

08003c30 <check_konami_code2>:
void check_konami_code2() {
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
   // Verificar si el buffer coincide con el código Konami
   int match = 1;  // Asumimos que hay coincidencia
 8003c36:	2301      	movs	r3, #1
 8003c38:	607b      	str	r3, [r7, #4]
   for (int i = 0; i < KONAMI_LENGTH; i++) {
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	603b      	str	r3, [r7, #0]
 8003c3e:	e00f      	b.n	8003c60 <check_konami_code2+0x30>
       if (input_buffer2[i] != konami_code2[i]) {
 8003c40:	4a10      	ldr	r2, [pc, #64]	@ (8003c84 <check_konami_code2+0x54>)
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	4413      	add	r3, r2
 8003c46:	781a      	ldrb	r2, [r3, #0]
 8003c48:	490f      	ldr	r1, [pc, #60]	@ (8003c88 <check_konami_code2+0x58>)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	440b      	add	r3, r1
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d002      	beq.n	8003c5a <check_konami_code2+0x2a>
           match = 0;  // Si no coinciden, desactivamos la coincidencia
 8003c54:	2300      	movs	r3, #0
 8003c56:	607b      	str	r3, [r7, #4]
           break;
 8003c58:	e005      	b.n	8003c66 <check_konami_code2+0x36>
   for (int i = 0; i < KONAMI_LENGTH; i++) {
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	603b      	str	r3, [r7, #0]
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	2b04      	cmp	r3, #4
 8003c64:	ddec      	ble.n	8003c40 <check_konami_code2+0x10>
       }
   }
   // Si coincide, activamos la escena
   if (match) {
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d005      	beq.n	8003c78 <check_konami_code2+0x48>
       //transmit_uart2("Código Konami completado \r\n");
       modo = 99;
 8003c6c:	4b07      	ldr	r3, [pc, #28]	@ (8003c8c <check_konami_code2+0x5c>)
 8003c6e:	2263      	movs	r2, #99	@ 0x63
 8003c70:	701a      	strb	r2, [r3, #0]
       konami2 =1;
 8003c72:	4b07      	ldr	r3, [pc, #28]	@ (8003c90 <check_konami_code2+0x60>)
 8003c74:	2201      	movs	r2, #1
 8003c76:	601a      	str	r2, [r3, #0]
   }
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	20014178 	.word	0x20014178
 8003c88:	20012e74 	.word	0x20012e74
 8003c8c:	20014090 	.word	0x20014090
 8003c90:	20014180 	.word	0x20014180

08003c94 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3){
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a99      	ldr	r2, [pc, #612]	@ (8003f08 <HAL_UART_RxCpltCallback+0x274>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	f040 8751 	bne.w	8004b4a <HAL_UART_RxCpltCallback+0xeb6>
			if (modo == 0){
 8003ca8:	4b98      	ldr	r3, [pc, #608]	@ (8003f0c <HAL_UART_RxCpltCallback+0x278>)
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d14b      	bne.n	8003d48 <HAL_UART_RxCpltCallback+0xb4>
				switch (option[0]){
 8003cb0:	4b97      	ldr	r3, [pc, #604]	@ (8003f10 <HAL_UART_RxCpltCallback+0x27c>)
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	3b61      	subs	r3, #97	@ 0x61
 8003cb6:	2b17      	cmp	r3, #23
 8003cb8:	d845      	bhi.n	8003d46 <HAL_UART_RxCpltCallback+0xb2>
 8003cba:	a201      	add	r2, pc, #4	@ (adr r2, 8003cc0 <HAL_UART_RxCpltCallback+0x2c>)
 8003cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc0:	08003d29 	.word	0x08003d29
 8003cc4:	08003d47 	.word	0x08003d47
 8003cc8:	08003d47 	.word	0x08003d47
 8003ccc:	08003d21 	.word	0x08003d21
 8003cd0:	08003d31 	.word	0x08003d31
 8003cd4:	08003d47 	.word	0x08003d47
 8003cd8:	08003d47 	.word	0x08003d47
 8003cdc:	08003d47 	.word	0x08003d47
 8003ce0:	08003d47 	.word	0x08003d47
 8003ce4:	08003d47 	.word	0x08003d47
 8003ce8:	08003d47 	.word	0x08003d47
 8003cec:	08003d47 	.word	0x08003d47
 8003cf0:	08003d47 	.word	0x08003d47
 8003cf4:	08003d47 	.word	0x08003d47
 8003cf8:	08003d47 	.word	0x08003d47
 8003cfc:	08003d47 	.word	0x08003d47
 8003d00:	08003d47 	.word	0x08003d47
 8003d04:	08003d47 	.word	0x08003d47
 8003d08:	08003d47 	.word	0x08003d47
 8003d0c:	08003d47 	.word	0x08003d47
 8003d10:	08003d47 	.word	0x08003d47
 8003d14:	08003d47 	.word	0x08003d47
 8003d18:	08003d47 	.word	0x08003d47
 8003d1c:	08003d39 	.word	0x08003d39
						case 'd':
							strcpy(tx_buffer, "d");
 8003d20:	4b7c      	ldr	r3, [pc, #496]	@ (8003f14 <HAL_UART_RxCpltCallback+0x280>)
 8003d22:	2264      	movs	r2, #100	@ 0x64
 8003d24:	801a      	strh	r2, [r3, #0]
							break;
 8003d26:	e00f      	b.n	8003d48 <HAL_UART_RxCpltCallback+0xb4>
						case 'a':
							strcpy(tx_buffer, "a");
 8003d28:	4b7a      	ldr	r3, [pc, #488]	@ (8003f14 <HAL_UART_RxCpltCallback+0x280>)
 8003d2a:	2261      	movs	r2, #97	@ 0x61
 8003d2c:	801a      	strh	r2, [r3, #0]
							break;
 8003d2e:	e00b      	b.n	8003d48 <HAL_UART_RxCpltCallback+0xb4>
						case 'e':
							strcpy(tx_buffer, "e");
 8003d30:	4b78      	ldr	r3, [pc, #480]	@ (8003f14 <HAL_UART_RxCpltCallback+0x280>)
 8003d32:	2265      	movs	r2, #101	@ 0x65
 8003d34:	801a      	strh	r2, [r3, #0]
							break;
 8003d36:	e007      	b.n	8003d48 <HAL_UART_RxCpltCallback+0xb4>
						case 'x':
							strcpy(tx_buffer, "x");
 8003d38:	4b76      	ldr	r3, [pc, #472]	@ (8003f14 <HAL_UART_RxCpltCallback+0x280>)
 8003d3a:	2278      	movs	r2, #120	@ 0x78
 8003d3c:	801a      	strh	r2, [r3, #0]
							start = 1;
 8003d3e:	4b76      	ldr	r3, [pc, #472]	@ (8003f18 <HAL_UART_RxCpltCallback+0x284>)
 8003d40:	2201      	movs	r2, #1
 8003d42:	701a      	strb	r2, [r3, #0]
							break;
 8003d44:	e000      	b.n	8003d48 <HAL_UART_RxCpltCallback+0xb4>
						default:
							break;
 8003d46:	bf00      	nop
						}
			}if (modo == 2){
 8003d48:	4b70      	ldr	r3, [pc, #448]	@ (8003f0c <HAL_UART_RxCpltCallback+0x278>)
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	f040 814f 	bne.w	8003ff0 <HAL_UART_RxCpltCallback+0x35c>
				switch (option[0]){
 8003d52:	4b6f      	ldr	r3, [pc, #444]	@ (8003f10 <HAL_UART_RxCpltCallback+0x27c>)
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	3b61      	subs	r3, #97	@ 0x61
 8003d58:	2b17      	cmp	r3, #23
 8003d5a:	f200 86dc 	bhi.w	8004b16 <HAL_UART_RxCpltCallback+0xe82>
 8003d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8003d64 <HAL_UART_RxCpltCallback+0xd0>)
 8003d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d64:	08003e31 	.word	0x08003e31
 8003d68:	08004b17 	.word	0x08004b17
 8003d6c:	08004b17 	.word	0x08004b17
 8003d70:	08003f3d 	.word	0x08003f3d
 8003d74:	08003fa9 	.word	0x08003fa9
 8003d78:	08004b17 	.word	0x08004b17
 8003d7c:	08004b17 	.word	0x08004b17
 8003d80:	08004b17 	.word	0x08004b17
 8003d84:	08004b17 	.word	0x08004b17
 8003d88:	08004b17 	.word	0x08004b17
 8003d8c:	08004b17 	.word	0x08004b17
 8003d90:	08004b17 	.word	0x08004b17
 8003d94:	08004b17 	.word	0x08004b17
 8003d98:	08004b17 	.word	0x08004b17
 8003d9c:	08004b17 	.word	0x08004b17
 8003da0:	08004b17 	.word	0x08004b17
 8003da4:	08003fbf 	.word	0x08003fbf
 8003da8:	08004b17 	.word	0x08004b17
 8003dac:	08003e9d 	.word	0x08003e9d
 8003db0:	08004b17 	.word	0x08004b17
 8003db4:	08004b17 	.word	0x08004b17
 8003db8:	08004b17 	.word	0x08004b17
 8003dbc:	08003dc5 	.word	0x08003dc5
 8003dc0:	08003fdb 	.word	0x08003fdb
						case 'w':
							strcpy(tx_buffer, "w");
 8003dc4:	4b53      	ldr	r3, [pc, #332]	@ (8003f14 <HAL_UART_RxCpltCallback+0x280>)
 8003dc6:	2277      	movs	r2, #119	@ 0x77
 8003dc8:	801a      	strh	r2, [r3, #0]
							if (chselect1 != 1){
 8003dca:	4b54      	ldr	r3, [pc, #336]	@ (8003f1c <HAL_UART_RxCpltCallback+0x288>)
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	f000 86a3 	beq.w	8004b1a <HAL_UART_RxCpltCallback+0xe86>
								selector1xAntiguo = selector1x;
 8003dd4:	4b52      	ldr	r3, [pc, #328]	@ (8003f20 <HAL_UART_RxCpltCallback+0x28c>)
 8003dd6:	781a      	ldrb	r2, [r3, #0]
 8003dd8:	4b52      	ldr	r3, [pc, #328]	@ (8003f24 <HAL_UART_RxCpltCallback+0x290>)
 8003dda:	701a      	strb	r2, [r3, #0]
								selector1yAntiguo = selector1y;
 8003ddc:	4b52      	ldr	r3, [pc, #328]	@ (8003f28 <HAL_UART_RxCpltCallback+0x294>)
 8003dde:	781a      	ldrb	r2, [r3, #0]
 8003de0:	4b52      	ldr	r3, [pc, #328]	@ (8003f2c <HAL_UART_RxCpltCallback+0x298>)
 8003de2:	701a      	strb	r2, [r3, #0]
								selector1y--;
 8003de4:	4b50      	ldr	r3, [pc, #320]	@ (8003f28 <HAL_UART_RxCpltCallback+0x294>)
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	3b01      	subs	r3, #1
 8003dea:	b2da      	uxtb	r2, r3
 8003dec:	4b4e      	ldr	r3, [pc, #312]	@ (8003f28 <HAL_UART_RxCpltCallback+0x294>)
 8003dee:	701a      	strb	r2, [r3, #0]
								if (selector1x == selector2x && selector1y == selector2y){
 8003df0:	4b4b      	ldr	r3, [pc, #300]	@ (8003f20 <HAL_UART_RxCpltCallback+0x28c>)
 8003df2:	781a      	ldrb	r2, [r3, #0]
 8003df4:	4b4e      	ldr	r3, [pc, #312]	@ (8003f30 <HAL_UART_RxCpltCallback+0x29c>)
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d10c      	bne.n	8003e16 <HAL_UART_RxCpltCallback+0x182>
 8003dfc:	4b4a      	ldr	r3, [pc, #296]	@ (8003f28 <HAL_UART_RxCpltCallback+0x294>)
 8003dfe:	781a      	ldrb	r2, [r3, #0]
 8003e00:	4b4c      	ldr	r3, [pc, #304]	@ (8003f34 <HAL_UART_RxCpltCallback+0x2a0>)
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d106      	bne.n	8003e16 <HAL_UART_RxCpltCallback+0x182>
									selector1y++;
 8003e08:	4b47      	ldr	r3, [pc, #284]	@ (8003f28 <HAL_UART_RxCpltCallback+0x294>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	b2da      	uxtb	r2, r3
 8003e10:	4b45      	ldr	r3, [pc, #276]	@ (8003f28 <HAL_UART_RxCpltCallback+0x294>)
 8003e12:	701a      	strb	r2, [r3, #0]
 8003e14:	e002      	b.n	8003e1c <HAL_UART_RxCpltCallback+0x188>
								}else{
									change1=1;
 8003e16:	4b48      	ldr	r3, [pc, #288]	@ (8003f38 <HAL_UART_RxCpltCallback+0x2a4>)
 8003e18:	2201      	movs	r2, #1
 8003e1a:	701a      	strb	r2, [r3, #0]
								}
								if (selector1y <= 0){
 8003e1c:	4b42      	ldr	r3, [pc, #264]	@ (8003f28 <HAL_UART_RxCpltCallback+0x294>)
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f040 867a 	bne.w	8004b1a <HAL_UART_RxCpltCallback+0xe86>
									selector1y = 1;
 8003e26:	4b40      	ldr	r3, [pc, #256]	@ (8003f28 <HAL_UART_RxCpltCallback+0x294>)
 8003e28:	2201      	movs	r2, #1
 8003e2a:	701a      	strb	r2, [r3, #0]
								}
							}
							break;
 8003e2c:	f000 be75 	b.w	8004b1a <HAL_UART_RxCpltCallback+0xe86>
						case 'a':
							strcpy(tx_buffer, "a");
 8003e30:	4b38      	ldr	r3, [pc, #224]	@ (8003f14 <HAL_UART_RxCpltCallback+0x280>)
 8003e32:	2261      	movs	r2, #97	@ 0x61
 8003e34:	801a      	strh	r2, [r3, #0]
							if (chselect1 != 1){
 8003e36:	4b39      	ldr	r3, [pc, #228]	@ (8003f1c <HAL_UART_RxCpltCallback+0x288>)
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	f000 866f 	beq.w	8004b1e <HAL_UART_RxCpltCallback+0xe8a>
								selector1xAntiguo = selector1x;
 8003e40:	4b37      	ldr	r3, [pc, #220]	@ (8003f20 <HAL_UART_RxCpltCallback+0x28c>)
 8003e42:	781a      	ldrb	r2, [r3, #0]
 8003e44:	4b37      	ldr	r3, [pc, #220]	@ (8003f24 <HAL_UART_RxCpltCallback+0x290>)
 8003e46:	701a      	strb	r2, [r3, #0]
								selector1yAntiguo = selector1y;
 8003e48:	4b37      	ldr	r3, [pc, #220]	@ (8003f28 <HAL_UART_RxCpltCallback+0x294>)
 8003e4a:	781a      	ldrb	r2, [r3, #0]
 8003e4c:	4b37      	ldr	r3, [pc, #220]	@ (8003f2c <HAL_UART_RxCpltCallback+0x298>)
 8003e4e:	701a      	strb	r2, [r3, #0]
								selector1x--;
 8003e50:	4b33      	ldr	r3, [pc, #204]	@ (8003f20 <HAL_UART_RxCpltCallback+0x28c>)
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b2da      	uxtb	r2, r3
 8003e58:	4b31      	ldr	r3, [pc, #196]	@ (8003f20 <HAL_UART_RxCpltCallback+0x28c>)
 8003e5a:	701a      	strb	r2, [r3, #0]
								if (selector1x == selector2x && selector1y == selector2y){
 8003e5c:	4b30      	ldr	r3, [pc, #192]	@ (8003f20 <HAL_UART_RxCpltCallback+0x28c>)
 8003e5e:	781a      	ldrb	r2, [r3, #0]
 8003e60:	4b33      	ldr	r3, [pc, #204]	@ (8003f30 <HAL_UART_RxCpltCallback+0x29c>)
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d10c      	bne.n	8003e82 <HAL_UART_RxCpltCallback+0x1ee>
 8003e68:	4b2f      	ldr	r3, [pc, #188]	@ (8003f28 <HAL_UART_RxCpltCallback+0x294>)
 8003e6a:	781a      	ldrb	r2, [r3, #0]
 8003e6c:	4b31      	ldr	r3, [pc, #196]	@ (8003f34 <HAL_UART_RxCpltCallback+0x2a0>)
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d106      	bne.n	8003e82 <HAL_UART_RxCpltCallback+0x1ee>
									selector1x++;
 8003e74:	4b2a      	ldr	r3, [pc, #168]	@ (8003f20 <HAL_UART_RxCpltCallback+0x28c>)
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	b2da      	uxtb	r2, r3
 8003e7c:	4b28      	ldr	r3, [pc, #160]	@ (8003f20 <HAL_UART_RxCpltCallback+0x28c>)
 8003e7e:	701a      	strb	r2, [r3, #0]
 8003e80:	e002      	b.n	8003e88 <HAL_UART_RxCpltCallback+0x1f4>
								}else{
									change1=1;
 8003e82:	4b2d      	ldr	r3, [pc, #180]	@ (8003f38 <HAL_UART_RxCpltCallback+0x2a4>)
 8003e84:	2201      	movs	r2, #1
 8003e86:	701a      	strb	r2, [r3, #0]
								}
								if (selector1x <= 0){
 8003e88:	4b25      	ldr	r3, [pc, #148]	@ (8003f20 <HAL_UART_RxCpltCallback+0x28c>)
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f040 8646 	bne.w	8004b1e <HAL_UART_RxCpltCallback+0xe8a>
									selector1x = 1;
 8003e92:	4b23      	ldr	r3, [pc, #140]	@ (8003f20 <HAL_UART_RxCpltCallback+0x28c>)
 8003e94:	2201      	movs	r2, #1
 8003e96:	701a      	strb	r2, [r3, #0]
								}
							}
							break;
 8003e98:	f000 be41 	b.w	8004b1e <HAL_UART_RxCpltCallback+0xe8a>
						case 's':
							if (chselect1 != 1){
 8003e9c:	4b1f      	ldr	r3, [pc, #124]	@ (8003f1c <HAL_UART_RxCpltCallback+0x288>)
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	f000 863e 	beq.w	8004b22 <HAL_UART_RxCpltCallback+0xe8e>
								selector1xAntiguo = selector1x;
 8003ea6:	4b1e      	ldr	r3, [pc, #120]	@ (8003f20 <HAL_UART_RxCpltCallback+0x28c>)
 8003ea8:	781a      	ldrb	r2, [r3, #0]
 8003eaa:	4b1e      	ldr	r3, [pc, #120]	@ (8003f24 <HAL_UART_RxCpltCallback+0x290>)
 8003eac:	701a      	strb	r2, [r3, #0]
								selector1yAntiguo = selector1y;
 8003eae:	4b1e      	ldr	r3, [pc, #120]	@ (8003f28 <HAL_UART_RxCpltCallback+0x294>)
 8003eb0:	781a      	ldrb	r2, [r3, #0]
 8003eb2:	4b1e      	ldr	r3, [pc, #120]	@ (8003f2c <HAL_UART_RxCpltCallback+0x298>)
 8003eb4:	701a      	strb	r2, [r3, #0]
								selector1y++;
 8003eb6:	4b1c      	ldr	r3, [pc, #112]	@ (8003f28 <HAL_UART_RxCpltCallback+0x294>)
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	3301      	adds	r3, #1
 8003ebc:	b2da      	uxtb	r2, r3
 8003ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8003f28 <HAL_UART_RxCpltCallback+0x294>)
 8003ec0:	701a      	strb	r2, [r3, #0]
								if (selector1x == selector2x && selector1y == selector2y){
 8003ec2:	4b17      	ldr	r3, [pc, #92]	@ (8003f20 <HAL_UART_RxCpltCallback+0x28c>)
 8003ec4:	781a      	ldrb	r2, [r3, #0]
 8003ec6:	4b1a      	ldr	r3, [pc, #104]	@ (8003f30 <HAL_UART_RxCpltCallback+0x29c>)
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d10c      	bne.n	8003ee8 <HAL_UART_RxCpltCallback+0x254>
 8003ece:	4b16      	ldr	r3, [pc, #88]	@ (8003f28 <HAL_UART_RxCpltCallback+0x294>)
 8003ed0:	781a      	ldrb	r2, [r3, #0]
 8003ed2:	4b18      	ldr	r3, [pc, #96]	@ (8003f34 <HAL_UART_RxCpltCallback+0x2a0>)
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d106      	bne.n	8003ee8 <HAL_UART_RxCpltCallback+0x254>
									selector1y--;
 8003eda:	4b13      	ldr	r3, [pc, #76]	@ (8003f28 <HAL_UART_RxCpltCallback+0x294>)
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	b2da      	uxtb	r2, r3
 8003ee2:	4b11      	ldr	r3, [pc, #68]	@ (8003f28 <HAL_UART_RxCpltCallback+0x294>)
 8003ee4:	701a      	strb	r2, [r3, #0]
 8003ee6:	e002      	b.n	8003eee <HAL_UART_RxCpltCallback+0x25a>
								}else{
									change1=1;
 8003ee8:	4b13      	ldr	r3, [pc, #76]	@ (8003f38 <HAL_UART_RxCpltCallback+0x2a4>)
 8003eea:	2201      	movs	r2, #1
 8003eec:	701a      	strb	r2, [r3, #0]
								}
								change1=1;
 8003eee:	4b12      	ldr	r3, [pc, #72]	@ (8003f38 <HAL_UART_RxCpltCallback+0x2a4>)
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	701a      	strb	r2, [r3, #0]
								if (selector1y >= 3){
 8003ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8003f28 <HAL_UART_RxCpltCallback+0x294>)
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	f240 8612 	bls.w	8004b22 <HAL_UART_RxCpltCallback+0xe8e>
									selector1y = 2;
 8003efe:	4b0a      	ldr	r3, [pc, #40]	@ (8003f28 <HAL_UART_RxCpltCallback+0x294>)
 8003f00:	2202      	movs	r2, #2
 8003f02:	701a      	strb	r2, [r3, #0]
								}
							}
							break;
 8003f04:	f000 be0d 	b.w	8004b22 <HAL_UART_RxCpltCallback+0xe8e>
 8003f08:	40004800 	.word	0x40004800
 8003f0c:	20014090 	.word	0x20014090
 8003f10:	20012f08 	.word	0x20012f08
 8003f14:	20012f10 	.word	0x20012f10
 8003f18:	20014095 	.word	0x20014095
 8003f1c:	20014099 	.word	0x20014099
 8003f20:	20012e2a 	.word	0x20012e2a
 8003f24:	20014097 	.word	0x20014097
 8003f28:	20012e2b 	.word	0x20012e2b
 8003f2c:	20014098 	.word	0x20014098
 8003f30:	20012e2d 	.word	0x20012e2d
 8003f34:	20012e2e 	.word	0x20012e2e
 8003f38:	20012e2c 	.word	0x20012e2c
						case 'd':
							strcpy(tx_buffer, "d");
 8003f3c:	4b9c      	ldr	r3, [pc, #624]	@ (80041b0 <HAL_UART_RxCpltCallback+0x51c>)
 8003f3e:	2264      	movs	r2, #100	@ 0x64
 8003f40:	801a      	strh	r2, [r3, #0]
							if (chselect1 != 1){
 8003f42:	4b9c      	ldr	r3, [pc, #624]	@ (80041b4 <HAL_UART_RxCpltCallback+0x520>)
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	f000 85ed 	beq.w	8004b26 <HAL_UART_RxCpltCallback+0xe92>
								selector1xAntiguo = selector1x;
 8003f4c:	4b9a      	ldr	r3, [pc, #616]	@ (80041b8 <HAL_UART_RxCpltCallback+0x524>)
 8003f4e:	781a      	ldrb	r2, [r3, #0]
 8003f50:	4b9a      	ldr	r3, [pc, #616]	@ (80041bc <HAL_UART_RxCpltCallback+0x528>)
 8003f52:	701a      	strb	r2, [r3, #0]
								selector1yAntiguo = selector1y;
 8003f54:	4b9a      	ldr	r3, [pc, #616]	@ (80041c0 <HAL_UART_RxCpltCallback+0x52c>)
 8003f56:	781a      	ldrb	r2, [r3, #0]
 8003f58:	4b9a      	ldr	r3, [pc, #616]	@ (80041c4 <HAL_UART_RxCpltCallback+0x530>)
 8003f5a:	701a      	strb	r2, [r3, #0]
								selector1x++;
 8003f5c:	4b96      	ldr	r3, [pc, #600]	@ (80041b8 <HAL_UART_RxCpltCallback+0x524>)
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	3301      	adds	r3, #1
 8003f62:	b2da      	uxtb	r2, r3
 8003f64:	4b94      	ldr	r3, [pc, #592]	@ (80041b8 <HAL_UART_RxCpltCallback+0x524>)
 8003f66:	701a      	strb	r2, [r3, #0]
								if (selector1x == selector2x && selector1y == selector2y){
 8003f68:	4b93      	ldr	r3, [pc, #588]	@ (80041b8 <HAL_UART_RxCpltCallback+0x524>)
 8003f6a:	781a      	ldrb	r2, [r3, #0]
 8003f6c:	4b96      	ldr	r3, [pc, #600]	@ (80041c8 <HAL_UART_RxCpltCallback+0x534>)
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d10c      	bne.n	8003f8e <HAL_UART_RxCpltCallback+0x2fa>
 8003f74:	4b92      	ldr	r3, [pc, #584]	@ (80041c0 <HAL_UART_RxCpltCallback+0x52c>)
 8003f76:	781a      	ldrb	r2, [r3, #0]
 8003f78:	4b94      	ldr	r3, [pc, #592]	@ (80041cc <HAL_UART_RxCpltCallback+0x538>)
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d106      	bne.n	8003f8e <HAL_UART_RxCpltCallback+0x2fa>
									selector1x--;
 8003f80:	4b8d      	ldr	r3, [pc, #564]	@ (80041b8 <HAL_UART_RxCpltCallback+0x524>)
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	3b01      	subs	r3, #1
 8003f86:	b2da      	uxtb	r2, r3
 8003f88:	4b8b      	ldr	r3, [pc, #556]	@ (80041b8 <HAL_UART_RxCpltCallback+0x524>)
 8003f8a:	701a      	strb	r2, [r3, #0]
 8003f8c:	e002      	b.n	8003f94 <HAL_UART_RxCpltCallback+0x300>
								}else{
									change1=1;
 8003f8e:	4b90      	ldr	r3, [pc, #576]	@ (80041d0 <HAL_UART_RxCpltCallback+0x53c>)
 8003f90:	2201      	movs	r2, #1
 8003f92:	701a      	strb	r2, [r3, #0]
								}
								if (selector1x >= 3){
 8003f94:	4b88      	ldr	r3, [pc, #544]	@ (80041b8 <HAL_UART_RxCpltCallback+0x524>)
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	f240 85c4 	bls.w	8004b26 <HAL_UART_RxCpltCallback+0xe92>
									selector1x = 2;
 8003f9e:	4b86      	ldr	r3, [pc, #536]	@ (80041b8 <HAL_UART_RxCpltCallback+0x524>)
 8003fa0:	2202      	movs	r2, #2
 8003fa2:	701a      	strb	r2, [r3, #0]
								}
							}
							break;
 8003fa4:	f000 bdbf 	b.w	8004b26 <HAL_UART_RxCpltCallback+0xe92>
						case 'e':
							strcpy(tx_buffer, "e");
 8003fa8:	4b81      	ldr	r3, [pc, #516]	@ (80041b0 <HAL_UART_RxCpltCallback+0x51c>)
 8003faa:	2265      	movs	r2, #101	@ 0x65
 8003fac:	801a      	strh	r2, [r3, #0]
							change1 = 1;				//CAMBIO 1 ES VERDADERO
 8003fae:	4b88      	ldr	r3, [pc, #544]	@ (80041d0 <HAL_UART_RxCpltCallback+0x53c>)
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	701a      	strb	r2, [r3, #0]
							chselect1 = 1;				//SE HA SELECCIONADO PERSONAJE
 8003fb4:	4b7f      	ldr	r3, [pc, #508]	@ (80041b4 <HAL_UART_RxCpltCallback+0x520>)
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	701a      	strb	r2, [r3, #0]
							break;
 8003fba:	f000 bdc1 	b.w	8004b40 <HAL_UART_RxCpltCallback+0xeac>
						case 'q':
							strcpy(tx_buffer, "q");
 8003fbe:	4b7c      	ldr	r3, [pc, #496]	@ (80041b0 <HAL_UART_RxCpltCallback+0x51c>)
 8003fc0:	2271      	movs	r2, #113	@ 0x71
 8003fc2:	801a      	strh	r2, [r3, #0]
							change1 = 1;				//CAMBIO 1 ES VERDADERO
 8003fc4:	4b82      	ldr	r3, [pc, #520]	@ (80041d0 <HAL_UART_RxCpltCallback+0x53c>)
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	701a      	strb	r2, [r3, #0]
							chselect1 = 0;				//NO SE HA SELECCIONADO PERSONAJE
 8003fca:	4b7a      	ldr	r3, [pc, #488]	@ (80041b4 <HAL_UART_RxCpltCallback+0x520>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	701a      	strb	r2, [r3, #0]
							ch1 = 0;					//REGRESAR VALOR DEL PERSONAJE 0
 8003fd0:	4b80      	ldr	r3, [pc, #512]	@ (80041d4 <HAL_UART_RxCpltCallback+0x540>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	701a      	strb	r2, [r3, #0]
							break;
 8003fd6:	f000 bdb3 	b.w	8004b40 <HAL_UART_RxCpltCallback+0xeac>
						case 'x':
							strcpy(tx_buffer, "x");
 8003fda:	4b75      	ldr	r3, [pc, #468]	@ (80041b0 <HAL_UART_RxCpltCallback+0x51c>)
 8003fdc:	2278      	movs	r2, #120	@ 0x78
 8003fde:	801a      	strh	r2, [r3, #0]
							start = 0;
 8003fe0:	4b7d      	ldr	r3, [pc, #500]	@ (80041d8 <HAL_UART_RxCpltCallback+0x544>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	701a      	strb	r2, [r3, #0]
							modo = 9;
 8003fe6:	4b7d      	ldr	r3, [pc, #500]	@ (80041dc <HAL_UART_RxCpltCallback+0x548>)
 8003fe8:	2209      	movs	r2, #9
 8003fea:	701a      	strb	r2, [r3, #0]
							break;
 8003fec:	f000 bda8 	b.w	8004b40 <HAL_UART_RxCpltCallback+0xeac>
						default:
							break;
						}
			}else if (modo == 6){
 8003ff0:	4b7a      	ldr	r3, [pc, #488]	@ (80041dc <HAL_UART_RxCpltCallback+0x548>)
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	2b06      	cmp	r3, #6
 8003ff6:	f040 857f 	bne.w	8004af8 <HAL_UART_RxCpltCallback+0xe64>
				if(option[0] != '\r' && option[0] != '\n'){
 8003ffa:	4b79      	ldr	r3, [pc, #484]	@ (80041e0 <HAL_UART_RxCpltCallback+0x54c>)
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	2b0d      	cmp	r3, #13
 8004000:	d028      	beq.n	8004054 <HAL_UART_RxCpltCallback+0x3c0>
 8004002:	4b77      	ldr	r3, [pc, #476]	@ (80041e0 <HAL_UART_RxCpltCallback+0x54c>)
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	2b0a      	cmp	r3, #10
 8004008:	d024      	beq.n	8004054 <HAL_UART_RxCpltCallback+0x3c0>
					// Almacenar la entrada en el buffer
					if (current_index1 < KONAMI_LENGTH) {
 800400a:	4b76      	ldr	r3, [pc, #472]	@ (80041e4 <HAL_UART_RxCpltCallback+0x550>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2b04      	cmp	r3, #4
 8004010:	dc09      	bgt.n	8004026 <HAL_UART_RxCpltCallback+0x392>
						input_buffer1[current_index1++] = option[0];
 8004012:	4b74      	ldr	r3, [pc, #464]	@ (80041e4 <HAL_UART_RxCpltCallback+0x550>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	1c5a      	adds	r2, r3, #1
 8004018:	4972      	ldr	r1, [pc, #456]	@ (80041e4 <HAL_UART_RxCpltCallback+0x550>)
 800401a:	600a      	str	r2, [r1, #0]
 800401c:	4a70      	ldr	r2, [pc, #448]	@ (80041e0 <HAL_UART_RxCpltCallback+0x54c>)
 800401e:	7811      	ldrb	r1, [r2, #0]
 8004020:	4a71      	ldr	r2, [pc, #452]	@ (80041e8 <HAL_UART_RxCpltCallback+0x554>)
 8004022:	54d1      	strb	r1, [r2, r3]
 8004024:	e014      	b.n	8004050 <HAL_UART_RxCpltCallback+0x3bc>
					} else {
						// Mover el buffer si ya está lleno
						for (int i = 1; i < KONAMI_LENGTH; i++) {
 8004026:	2301      	movs	r3, #1
 8004028:	60fb      	str	r3, [r7, #12]
 800402a:	e00a      	b.n	8004042 <HAL_UART_RxCpltCallback+0x3ae>
							input_buffer1[i - 1] = input_buffer1[i];
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	3b01      	subs	r3, #1
 8004030:	496d      	ldr	r1, [pc, #436]	@ (80041e8 <HAL_UART_RxCpltCallback+0x554>)
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	440a      	add	r2, r1
 8004036:	7811      	ldrb	r1, [r2, #0]
 8004038:	4a6b      	ldr	r2, [pc, #428]	@ (80041e8 <HAL_UART_RxCpltCallback+0x554>)
 800403a:	54d1      	strb	r1, [r2, r3]
						for (int i = 1; i < KONAMI_LENGTH; i++) {
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	3301      	adds	r3, #1
 8004040:	60fb      	str	r3, [r7, #12]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2b04      	cmp	r3, #4
 8004046:	ddf1      	ble.n	800402c <HAL_UART_RxCpltCallback+0x398>
						}
						input_buffer1[KONAMI_LENGTH - 1] = option[0];  // Añadir nueva entrada al final
 8004048:	4b65      	ldr	r3, [pc, #404]	@ (80041e0 <HAL_UART_RxCpltCallback+0x54c>)
 800404a:	781a      	ldrb	r2, [r3, #0]
 800404c:	4b66      	ldr	r3, [pc, #408]	@ (80041e8 <HAL_UART_RxCpltCallback+0x554>)
 800404e:	711a      	strb	r2, [r3, #4]
					}
					// Verificar el código Konami solo después de agregar la nueva entrada
					check_konami_code1();
 8004050:	f7ff fdbc 	bl	8003bcc <check_konami_code1>
				}
				switch (option[0]){
 8004054:	4b62      	ldr	r3, [pc, #392]	@ (80041e0 <HAL_UART_RxCpltCallback+0x54c>)
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	3b61      	subs	r3, #97	@ 0x61
 800405a:	2b17      	cmp	r3, #23
 800405c:	f200 8565 	bhi.w	8004b2a <HAL_UART_RxCpltCallback+0xe96>
 8004060:	a201      	add	r2, pc, #4	@ (adr r2, 8004068 <HAL_UART_RxCpltCallback+0x3d4>)
 8004062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004066:	bf00      	nop
 8004068:	080044c7 	.word	0x080044c7
 800406c:	08004b2b 	.word	0x08004b2b
 8004070:	08004b2b 	.word	0x08004b2b
 8004074:	080040c9 	.word	0x080040c9
 8004078:	0800488d 	.word	0x0800488d
 800407c:	08004b2b 	.word	0x08004b2b
 8004080:	08004b2b 	.word	0x08004b2b
 8004084:	08004b2b 	.word	0x08004b2b
 8004088:	08004b2b 	.word	0x08004b2b
 800408c:	08004b2b 	.word	0x08004b2b
 8004090:	08004b2b 	.word	0x08004b2b
 8004094:	08004b2b 	.word	0x08004b2b
 8004098:	08004b2b 	.word	0x08004b2b
 800409c:	08004b2b 	.word	0x08004b2b
 80040a0:	08004b2b 	.word	0x08004b2b
 80040a4:	08004b2b 	.word	0x08004b2b
 80040a8:	080049f3 	.word	0x080049f3
 80040ac:	08004b2b 	.word	0x08004b2b
 80040b0:	08004b2b 	.word	0x08004b2b
 80040b4:	08004b2b 	.word	0x08004b2b
 80040b8:	08004b2b 	.word	0x08004b2b
 80040bc:	08004b2b 	.word	0x08004b2b
 80040c0:	08004b2b 	.word	0x08004b2b
 80040c4:	08004ac3 	.word	0x08004ac3
						case 'd':
							//strcpy(tx_buffer, "d\r\n");
							strcpy(tx_buffer, "d");
 80040c8:	4b39      	ldr	r3, [pc, #228]	@ (80041b0 <HAL_UART_RxCpltCallback+0x51c>)
 80040ca:	2264      	movs	r2, #100	@ 0x64
 80040cc:	801a      	strh	r2, [r3, #0]
							if (ch1 == 1){
 80040ce:	4b41      	ldr	r3, [pc, #260]	@ (80041d4 <HAL_UART_RxCpltCallback+0x540>)
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	f040 80a0 	bne.w	8004218 <HAL_UART_RxCpltCallback+0x584>
								if (shooting1 == 1){
 80040d8:	4b44      	ldr	r3, [pc, #272]	@ (80041ec <HAL_UART_RxCpltCallback+0x558>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d137      	bne.n	8004150 <HAL_UART_RxCpltCallback+0x4bc>
									x1 = x1+4;
 80040e0:	4b43      	ldr	r3, [pc, #268]	@ (80041f0 <HAL_UART_RxCpltCallback+0x55c>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	3304      	adds	r3, #4
 80040e6:	4a42      	ldr	r2, [pc, #264]	@ (80041f0 <HAL_UART_RxCpltCallback+0x55c>)
 80040e8:	6013      	str	r3, [r2, #0]
									flip1 = 1;
 80040ea:	4b42      	ldr	r3, [pc, #264]	@ (80041f4 <HAL_UART_RxCpltCallback+0x560>)
 80040ec:	2201      	movs	r2, #1
 80040ee:	601a      	str	r2, [r3, #0]
									caminarD = 1;
 80040f0:	4b41      	ldr	r3, [pc, #260]	@ (80041f8 <HAL_UART_RxCpltCallback+0x564>)
 80040f2:	2201      	movs	r2, #1
 80040f4:	701a      	strb	r2, [r3, #0]
									if (caminarD == 1){
 80040f6:	4b40      	ldr	r3, [pc, #256]	@ (80041f8 <HAL_UART_RxCpltCallback+0x564>)
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	f040 808c 	bne.w	8004218 <HAL_UART_RxCpltCallback+0x584>
										running1++;
 8004100:	4b3e      	ldr	r3, [pc, #248]	@ (80041fc <HAL_UART_RxCpltCallback+0x568>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	3301      	adds	r3, #1
 8004106:	4a3d      	ldr	r2, [pc, #244]	@ (80041fc <HAL_UART_RxCpltCallback+0x568>)
 8004108:	6013      	str	r3, [r2, #0]
										if(running1 == 4){
 800410a:	4b3c      	ldr	r3, [pc, #240]	@ (80041fc <HAL_UART_RxCpltCallback+0x568>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2b04      	cmp	r3, #4
 8004110:	d103      	bne.n	800411a <HAL_UART_RxCpltCallback+0x486>
											frame1=6;
 8004112:	4b3b      	ldr	r3, [pc, #236]	@ (8004200 <HAL_UART_RxCpltCallback+0x56c>)
 8004114:	2206      	movs	r2, #6
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	e07e      	b.n	8004218 <HAL_UART_RxCpltCallback+0x584>
										}else if (running1 == 8){
 800411a:	4b38      	ldr	r3, [pc, #224]	@ (80041fc <HAL_UART_RxCpltCallback+0x568>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2b08      	cmp	r3, #8
 8004120:	d103      	bne.n	800412a <HAL_UART_RxCpltCallback+0x496>
											frame1=7;
 8004122:	4b37      	ldr	r3, [pc, #220]	@ (8004200 <HAL_UART_RxCpltCallback+0x56c>)
 8004124:	2207      	movs	r2, #7
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	e076      	b.n	8004218 <HAL_UART_RxCpltCallback+0x584>
										}else if (running1 == 12){
 800412a:	4b34      	ldr	r3, [pc, #208]	@ (80041fc <HAL_UART_RxCpltCallback+0x568>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2b0c      	cmp	r3, #12
 8004130:	d103      	bne.n	800413a <HAL_UART_RxCpltCallback+0x4a6>
											frame1=8;
 8004132:	4b33      	ldr	r3, [pc, #204]	@ (8004200 <HAL_UART_RxCpltCallback+0x56c>)
 8004134:	2208      	movs	r2, #8
 8004136:	601a      	str	r2, [r3, #0]
 8004138:	e06e      	b.n	8004218 <HAL_UART_RxCpltCallback+0x584>
										}else if (running1 >= 16){
 800413a:	4b30      	ldr	r3, [pc, #192]	@ (80041fc <HAL_UART_RxCpltCallback+0x568>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2b0f      	cmp	r3, #15
 8004140:	dd6a      	ble.n	8004218 <HAL_UART_RxCpltCallback+0x584>
											frame1=7;
 8004142:	4b2f      	ldr	r3, [pc, #188]	@ (8004200 <HAL_UART_RxCpltCallback+0x56c>)
 8004144:	2207      	movs	r2, #7
 8004146:	601a      	str	r2, [r3, #0]
											running1=0;
 8004148:	4b2c      	ldr	r3, [pc, #176]	@ (80041fc <HAL_UART_RxCpltCallback+0x568>)
 800414a:	2200      	movs	r2, #0
 800414c:	601a      	str	r2, [r3, #0]
 800414e:	e063      	b.n	8004218 <HAL_UART_RxCpltCallback+0x584>
										}
									}
								}else if (shooting1 == 0){
 8004150:	4b26      	ldr	r3, [pc, #152]	@ (80041ec <HAL_UART_RxCpltCallback+0x558>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d15f      	bne.n	8004218 <HAL_UART_RxCpltCallback+0x584>
									x1 = x1+4;
 8004158:	4b25      	ldr	r3, [pc, #148]	@ (80041f0 <HAL_UART_RxCpltCallback+0x55c>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	3304      	adds	r3, #4
 800415e:	4a24      	ldr	r2, [pc, #144]	@ (80041f0 <HAL_UART_RxCpltCallback+0x55c>)
 8004160:	6013      	str	r3, [r2, #0]
									flip1 = 1;
 8004162:	4b24      	ldr	r3, [pc, #144]	@ (80041f4 <HAL_UART_RxCpltCallback+0x560>)
 8004164:	2201      	movs	r2, #1
 8004166:	601a      	str	r2, [r3, #0]
									caminarD = 1;
 8004168:	4b23      	ldr	r3, [pc, #140]	@ (80041f8 <HAL_UART_RxCpltCallback+0x564>)
 800416a:	2201      	movs	r2, #1
 800416c:	701a      	strb	r2, [r3, #0]
									//FillRect(x1+1, y1, 1, 25, 0xF800);
									if(caminarD == 1){
 800416e:	4b22      	ldr	r3, [pc, #136]	@ (80041f8 <HAL_UART_RxCpltCallback+0x564>)
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d150      	bne.n	8004218 <HAL_UART_RxCpltCallback+0x584>
										running1++;
 8004176:	4b21      	ldr	r3, [pc, #132]	@ (80041fc <HAL_UART_RxCpltCallback+0x568>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	3301      	adds	r3, #1
 800417c:	4a1f      	ldr	r2, [pc, #124]	@ (80041fc <HAL_UART_RxCpltCallback+0x568>)
 800417e:	6013      	str	r3, [r2, #0]
										if (running1 == 4){
 8004180:	4b1e      	ldr	r3, [pc, #120]	@ (80041fc <HAL_UART_RxCpltCallback+0x568>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2b04      	cmp	r3, #4
 8004186:	d103      	bne.n	8004190 <HAL_UART_RxCpltCallback+0x4fc>
											frame1=1;
 8004188:	4b1d      	ldr	r3, [pc, #116]	@ (8004200 <HAL_UART_RxCpltCallback+0x56c>)
 800418a:	2201      	movs	r2, #1
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	e043      	b.n	8004218 <HAL_UART_RxCpltCallback+0x584>
										}else if (running1 == 8){
 8004190:	4b1a      	ldr	r3, [pc, #104]	@ (80041fc <HAL_UART_RxCpltCallback+0x568>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2b08      	cmp	r3, #8
 8004196:	d103      	bne.n	80041a0 <HAL_UART_RxCpltCallback+0x50c>
											frame1=2;
 8004198:	4b19      	ldr	r3, [pc, #100]	@ (8004200 <HAL_UART_RxCpltCallback+0x56c>)
 800419a:	2202      	movs	r2, #2
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	e03b      	b.n	8004218 <HAL_UART_RxCpltCallback+0x584>
										}else if (running1 == 12){
 80041a0:	4b16      	ldr	r3, [pc, #88]	@ (80041fc <HAL_UART_RxCpltCallback+0x568>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2b0c      	cmp	r3, #12
 80041a6:	d12d      	bne.n	8004204 <HAL_UART_RxCpltCallback+0x570>
											frame1=3;
 80041a8:	4b15      	ldr	r3, [pc, #84]	@ (8004200 <HAL_UART_RxCpltCallback+0x56c>)
 80041aa:	2203      	movs	r2, #3
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	e033      	b.n	8004218 <HAL_UART_RxCpltCallback+0x584>
 80041b0:	20012f10 	.word	0x20012f10
 80041b4:	20014099 	.word	0x20014099
 80041b8:	20012e2a 	.word	0x20012e2a
 80041bc:	20014097 	.word	0x20014097
 80041c0:	20012e2b 	.word	0x20012e2b
 80041c4:	20014098 	.word	0x20014098
 80041c8:	20012e2d 	.word	0x20012e2d
 80041cc:	20012e2e 	.word	0x20012e2e
 80041d0:	20012e2c 	.word	0x20012e2c
 80041d4:	2001409a 	.word	0x2001409a
 80041d8:	20014095 	.word	0x20014095
 80041dc:	20014090 	.word	0x20014090
 80041e0:	20012f08 	.word	0x20012f08
 80041e4:	20014164 	.word	0x20014164
 80041e8:	20014168 	.word	0x20014168
 80041ec:	200140c4 	.word	0x200140c4
 80041f0:	200140a0 	.word	0x200140a0
 80041f4:	200140b0 	.word	0x200140b0
 80041f8:	20014091 	.word	0x20014091
 80041fc:	200140c0 	.word	0x200140c0
 8004200:	20012e38 	.word	0x20012e38
										}else if (running1 >= 16){
 8004204:	4b86      	ldr	r3, [pc, #536]	@ (8004420 <HAL_UART_RxCpltCallback+0x78c>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b0f      	cmp	r3, #15
 800420a:	dd05      	ble.n	8004218 <HAL_UART_RxCpltCallback+0x584>
											frame1=2;
 800420c:	4b85      	ldr	r3, [pc, #532]	@ (8004424 <HAL_UART_RxCpltCallback+0x790>)
 800420e:	2202      	movs	r2, #2
 8004210:	601a      	str	r2, [r3, #0]
											running1=0;
 8004212:	4b83      	ldr	r3, [pc, #524]	@ (8004420 <HAL_UART_RxCpltCallback+0x78c>)
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]
										}
									}
								}
							}if (ch1 == 5){
 8004218:	4b83      	ldr	r3, [pc, #524]	@ (8004428 <HAL_UART_RxCpltCallback+0x794>)
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	2b05      	cmp	r3, #5
 800421e:	d145      	bne.n	80042ac <HAL_UART_RxCpltCallback+0x618>
								if (shooting1 == 1 || shooting1 == 2){
 8004220:	4b82      	ldr	r3, [pc, #520]	@ (800442c <HAL_UART_RxCpltCallback+0x798>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d003      	beq.n	8004230 <HAL_UART_RxCpltCallback+0x59c>
 8004228:	4b80      	ldr	r3, [pc, #512]	@ (800442c <HAL_UART_RxCpltCallback+0x798>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2b02      	cmp	r3, #2
 800422e:	d103      	bne.n	8004238 <HAL_UART_RxCpltCallback+0x5a4>
									flip1 = 1;
 8004230:	4b7f      	ldr	r3, [pc, #508]	@ (8004430 <HAL_UART_RxCpltCallback+0x79c>)
 8004232:	2201      	movs	r2, #1
 8004234:	601a      	str	r2, [r3, #0]
 8004236:	e039      	b.n	80042ac <HAL_UART_RxCpltCallback+0x618>
								}else if (shooting1 == 0){
 8004238:	4b7c      	ldr	r3, [pc, #496]	@ (800442c <HAL_UART_RxCpltCallback+0x798>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d135      	bne.n	80042ac <HAL_UART_RxCpltCallback+0x618>
									x1 = x1+4;
 8004240:	4b7c      	ldr	r3, [pc, #496]	@ (8004434 <HAL_UART_RxCpltCallback+0x7a0>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	3304      	adds	r3, #4
 8004246:	4a7b      	ldr	r2, [pc, #492]	@ (8004434 <HAL_UART_RxCpltCallback+0x7a0>)
 8004248:	6013      	str	r3, [r2, #0]
									flip1 = 1;
 800424a:	4b79      	ldr	r3, [pc, #484]	@ (8004430 <HAL_UART_RxCpltCallback+0x79c>)
 800424c:	2201      	movs	r2, #1
 800424e:	601a      	str	r2, [r3, #0]
									caminarD = 1;
 8004250:	4b79      	ldr	r3, [pc, #484]	@ (8004438 <HAL_UART_RxCpltCallback+0x7a4>)
 8004252:	2201      	movs	r2, #1
 8004254:	701a      	strb	r2, [r3, #0]
									//FillRect(x1+1, y1, 1, 25, 0xF800);
									if(caminarD == 1){
 8004256:	4b78      	ldr	r3, [pc, #480]	@ (8004438 <HAL_UART_RxCpltCallback+0x7a4>)
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d126      	bne.n	80042ac <HAL_UART_RxCpltCallback+0x618>
										running1++;
 800425e:	4b70      	ldr	r3, [pc, #448]	@ (8004420 <HAL_UART_RxCpltCallback+0x78c>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	3301      	adds	r3, #1
 8004264:	4a6e      	ldr	r2, [pc, #440]	@ (8004420 <HAL_UART_RxCpltCallback+0x78c>)
 8004266:	6013      	str	r3, [r2, #0]
										if (running1 == 4){
 8004268:	4b6d      	ldr	r3, [pc, #436]	@ (8004420 <HAL_UART_RxCpltCallback+0x78c>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2b04      	cmp	r3, #4
 800426e:	d103      	bne.n	8004278 <HAL_UART_RxCpltCallback+0x5e4>
											frame1=1;
 8004270:	4b6c      	ldr	r3, [pc, #432]	@ (8004424 <HAL_UART_RxCpltCallback+0x790>)
 8004272:	2201      	movs	r2, #1
 8004274:	601a      	str	r2, [r3, #0]
 8004276:	e019      	b.n	80042ac <HAL_UART_RxCpltCallback+0x618>
										}else if (running1 == 8){
 8004278:	4b69      	ldr	r3, [pc, #420]	@ (8004420 <HAL_UART_RxCpltCallback+0x78c>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2b08      	cmp	r3, #8
 800427e:	d103      	bne.n	8004288 <HAL_UART_RxCpltCallback+0x5f4>
											frame1=2;
 8004280:	4b68      	ldr	r3, [pc, #416]	@ (8004424 <HAL_UART_RxCpltCallback+0x790>)
 8004282:	2202      	movs	r2, #2
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	e011      	b.n	80042ac <HAL_UART_RxCpltCallback+0x618>
										}else if (running1 == 12){
 8004288:	4b65      	ldr	r3, [pc, #404]	@ (8004420 <HAL_UART_RxCpltCallback+0x78c>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2b0c      	cmp	r3, #12
 800428e:	d103      	bne.n	8004298 <HAL_UART_RxCpltCallback+0x604>
											frame1=3;
 8004290:	4b64      	ldr	r3, [pc, #400]	@ (8004424 <HAL_UART_RxCpltCallback+0x790>)
 8004292:	2203      	movs	r2, #3
 8004294:	601a      	str	r2, [r3, #0]
 8004296:	e009      	b.n	80042ac <HAL_UART_RxCpltCallback+0x618>
										}else if (running1 >= 16){
 8004298:	4b61      	ldr	r3, [pc, #388]	@ (8004420 <HAL_UART_RxCpltCallback+0x78c>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2b0f      	cmp	r3, #15
 800429e:	dd05      	ble.n	80042ac <HAL_UART_RxCpltCallback+0x618>
											frame1=2;
 80042a0:	4b60      	ldr	r3, [pc, #384]	@ (8004424 <HAL_UART_RxCpltCallback+0x790>)
 80042a2:	2202      	movs	r2, #2
 80042a4:	601a      	str	r2, [r3, #0]
											running1=0;
 80042a6:	4b5e      	ldr	r3, [pc, #376]	@ (8004420 <HAL_UART_RxCpltCallback+0x78c>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	601a      	str	r2, [r3, #0]
										}
									}
								}
							}if (ch1 == 8){
 80042ac:	4b5e      	ldr	r3, [pc, #376]	@ (8004428 <HAL_UART_RxCpltCallback+0x794>)
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	2b08      	cmp	r3, #8
 80042b2:	d174      	bne.n	800439e <HAL_UART_RxCpltCallback+0x70a>
								if (shooting1 == 1){
 80042b4:	4b5d      	ldr	r3, [pc, #372]	@ (800442c <HAL_UART_RxCpltCallback+0x798>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d136      	bne.n	800432a <HAL_UART_RxCpltCallback+0x696>
									x1 = x1+4;
 80042bc:	4b5d      	ldr	r3, [pc, #372]	@ (8004434 <HAL_UART_RxCpltCallback+0x7a0>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	3304      	adds	r3, #4
 80042c2:	4a5c      	ldr	r2, [pc, #368]	@ (8004434 <HAL_UART_RxCpltCallback+0x7a0>)
 80042c4:	6013      	str	r3, [r2, #0]
									flip1 = 1;
 80042c6:	4b5a      	ldr	r3, [pc, #360]	@ (8004430 <HAL_UART_RxCpltCallback+0x79c>)
 80042c8:	2201      	movs	r2, #1
 80042ca:	601a      	str	r2, [r3, #0]
									caminarD = 1;
 80042cc:	4b5a      	ldr	r3, [pc, #360]	@ (8004438 <HAL_UART_RxCpltCallback+0x7a4>)
 80042ce:	2201      	movs	r2, #1
 80042d0:	701a      	strb	r2, [r3, #0]
									if (caminarD == 1){
 80042d2:	4b59      	ldr	r3, [pc, #356]	@ (8004438 <HAL_UART_RxCpltCallback+0x7a4>)
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d161      	bne.n	800439e <HAL_UART_RxCpltCallback+0x70a>
										running1++;
 80042da:	4b51      	ldr	r3, [pc, #324]	@ (8004420 <HAL_UART_RxCpltCallback+0x78c>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	3301      	adds	r3, #1
 80042e0:	4a4f      	ldr	r2, [pc, #316]	@ (8004420 <HAL_UART_RxCpltCallback+0x78c>)
 80042e2:	6013      	str	r3, [r2, #0]
										if(running1 == 4){
 80042e4:	4b4e      	ldr	r3, [pc, #312]	@ (8004420 <HAL_UART_RxCpltCallback+0x78c>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2b04      	cmp	r3, #4
 80042ea:	d103      	bne.n	80042f4 <HAL_UART_RxCpltCallback+0x660>
											frame1=6;
 80042ec:	4b4d      	ldr	r3, [pc, #308]	@ (8004424 <HAL_UART_RxCpltCallback+0x790>)
 80042ee:	2206      	movs	r2, #6
 80042f0:	601a      	str	r2, [r3, #0]
 80042f2:	e054      	b.n	800439e <HAL_UART_RxCpltCallback+0x70a>
										}else if (running1 == 8){
 80042f4:	4b4a      	ldr	r3, [pc, #296]	@ (8004420 <HAL_UART_RxCpltCallback+0x78c>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d103      	bne.n	8004304 <HAL_UART_RxCpltCallback+0x670>
											frame1=7;
 80042fc:	4b49      	ldr	r3, [pc, #292]	@ (8004424 <HAL_UART_RxCpltCallback+0x790>)
 80042fe:	2207      	movs	r2, #7
 8004300:	601a      	str	r2, [r3, #0]
 8004302:	e04c      	b.n	800439e <HAL_UART_RxCpltCallback+0x70a>
										}else if (running1 == 12){
 8004304:	4b46      	ldr	r3, [pc, #280]	@ (8004420 <HAL_UART_RxCpltCallback+0x78c>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2b0c      	cmp	r3, #12
 800430a:	d103      	bne.n	8004314 <HAL_UART_RxCpltCallback+0x680>
											frame1=8;
 800430c:	4b45      	ldr	r3, [pc, #276]	@ (8004424 <HAL_UART_RxCpltCallback+0x790>)
 800430e:	2208      	movs	r2, #8
 8004310:	601a      	str	r2, [r3, #0]
 8004312:	e044      	b.n	800439e <HAL_UART_RxCpltCallback+0x70a>
										}else if (running1 >= 16){
 8004314:	4b42      	ldr	r3, [pc, #264]	@ (8004420 <HAL_UART_RxCpltCallback+0x78c>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2b0f      	cmp	r3, #15
 800431a:	dd40      	ble.n	800439e <HAL_UART_RxCpltCallback+0x70a>
											frame1=7;
 800431c:	4b41      	ldr	r3, [pc, #260]	@ (8004424 <HAL_UART_RxCpltCallback+0x790>)
 800431e:	2207      	movs	r2, #7
 8004320:	601a      	str	r2, [r3, #0]
											running1=0;
 8004322:	4b3f      	ldr	r3, [pc, #252]	@ (8004420 <HAL_UART_RxCpltCallback+0x78c>)
 8004324:	2200      	movs	r2, #0
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	e039      	b.n	800439e <HAL_UART_RxCpltCallback+0x70a>
										}
									}
								}else if (shooting1 == 0){
 800432a:	4b40      	ldr	r3, [pc, #256]	@ (800442c <HAL_UART_RxCpltCallback+0x798>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d135      	bne.n	800439e <HAL_UART_RxCpltCallback+0x70a>
									x1 = x1+4;
 8004332:	4b40      	ldr	r3, [pc, #256]	@ (8004434 <HAL_UART_RxCpltCallback+0x7a0>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	3304      	adds	r3, #4
 8004338:	4a3e      	ldr	r2, [pc, #248]	@ (8004434 <HAL_UART_RxCpltCallback+0x7a0>)
 800433a:	6013      	str	r3, [r2, #0]
									flip1 = 1;
 800433c:	4b3c      	ldr	r3, [pc, #240]	@ (8004430 <HAL_UART_RxCpltCallback+0x79c>)
 800433e:	2201      	movs	r2, #1
 8004340:	601a      	str	r2, [r3, #0]
									caminarD = 1;
 8004342:	4b3d      	ldr	r3, [pc, #244]	@ (8004438 <HAL_UART_RxCpltCallback+0x7a4>)
 8004344:	2201      	movs	r2, #1
 8004346:	701a      	strb	r2, [r3, #0]
									//FillRect(x1+1, y1, 1, 25, 0xF800);
									if(caminarD == 1){
 8004348:	4b3b      	ldr	r3, [pc, #236]	@ (8004438 <HAL_UART_RxCpltCallback+0x7a4>)
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d126      	bne.n	800439e <HAL_UART_RxCpltCallback+0x70a>
										running1++;
 8004350:	4b33      	ldr	r3, [pc, #204]	@ (8004420 <HAL_UART_RxCpltCallback+0x78c>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	3301      	adds	r3, #1
 8004356:	4a32      	ldr	r2, [pc, #200]	@ (8004420 <HAL_UART_RxCpltCallback+0x78c>)
 8004358:	6013      	str	r3, [r2, #0]
										if (running1 == 4){
 800435a:	4b31      	ldr	r3, [pc, #196]	@ (8004420 <HAL_UART_RxCpltCallback+0x78c>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2b04      	cmp	r3, #4
 8004360:	d103      	bne.n	800436a <HAL_UART_RxCpltCallback+0x6d6>
											frame1=1;
 8004362:	4b30      	ldr	r3, [pc, #192]	@ (8004424 <HAL_UART_RxCpltCallback+0x790>)
 8004364:	2201      	movs	r2, #1
 8004366:	601a      	str	r2, [r3, #0]
 8004368:	e019      	b.n	800439e <HAL_UART_RxCpltCallback+0x70a>
										}else if (running1 == 8){
 800436a:	4b2d      	ldr	r3, [pc, #180]	@ (8004420 <HAL_UART_RxCpltCallback+0x78c>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2b08      	cmp	r3, #8
 8004370:	d103      	bne.n	800437a <HAL_UART_RxCpltCallback+0x6e6>
											frame1=2;
 8004372:	4b2c      	ldr	r3, [pc, #176]	@ (8004424 <HAL_UART_RxCpltCallback+0x790>)
 8004374:	2202      	movs	r2, #2
 8004376:	601a      	str	r2, [r3, #0]
 8004378:	e011      	b.n	800439e <HAL_UART_RxCpltCallback+0x70a>
										}else if (running1 == 12){
 800437a:	4b29      	ldr	r3, [pc, #164]	@ (8004420 <HAL_UART_RxCpltCallback+0x78c>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2b0c      	cmp	r3, #12
 8004380:	d103      	bne.n	800438a <HAL_UART_RxCpltCallback+0x6f6>
											frame1=3;
 8004382:	4b28      	ldr	r3, [pc, #160]	@ (8004424 <HAL_UART_RxCpltCallback+0x790>)
 8004384:	2203      	movs	r2, #3
 8004386:	601a      	str	r2, [r3, #0]
 8004388:	e009      	b.n	800439e <HAL_UART_RxCpltCallback+0x70a>
										}else if (running1 >= 16){
 800438a:	4b25      	ldr	r3, [pc, #148]	@ (8004420 <HAL_UART_RxCpltCallback+0x78c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2b0f      	cmp	r3, #15
 8004390:	dd05      	ble.n	800439e <HAL_UART_RxCpltCallback+0x70a>
											frame1=2;
 8004392:	4b24      	ldr	r3, [pc, #144]	@ (8004424 <HAL_UART_RxCpltCallback+0x790>)
 8004394:	2202      	movs	r2, #2
 8004396:	601a      	str	r2, [r3, #0]
											running1=0;
 8004398:	4b21      	ldr	r3, [pc, #132]	@ (8004420 <HAL_UART_RxCpltCallback+0x78c>)
 800439a:	2200      	movs	r2, #0
 800439c:	601a      	str	r2, [r3, #0]
										}
									}
								}
							}if (ch1 == 9){
 800439e:	4b22      	ldr	r3, [pc, #136]	@ (8004428 <HAL_UART_RxCpltCallback+0x794>)
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	2b09      	cmp	r3, #9
 80043a4:	f040 8084 	bne.w	80044b0 <HAL_UART_RxCpltCallback+0x81c>
								if (shooting1 == 1){
 80043a8:	4b20      	ldr	r3, [pc, #128]	@ (800442c <HAL_UART_RxCpltCallback+0x798>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d145      	bne.n	800443c <HAL_UART_RxCpltCallback+0x7a8>
									x1 = x1+4;
 80043b0:	4b20      	ldr	r3, [pc, #128]	@ (8004434 <HAL_UART_RxCpltCallback+0x7a0>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	3304      	adds	r3, #4
 80043b6:	4a1f      	ldr	r2, [pc, #124]	@ (8004434 <HAL_UART_RxCpltCallback+0x7a0>)
 80043b8:	6013      	str	r3, [r2, #0]
									flip1 = 1;
 80043ba:	4b1d      	ldr	r3, [pc, #116]	@ (8004430 <HAL_UART_RxCpltCallback+0x79c>)
 80043bc:	2201      	movs	r2, #1
 80043be:	601a      	str	r2, [r3, #0]
									caminarD = 1;
 80043c0:	4b1d      	ldr	r3, [pc, #116]	@ (8004438 <HAL_UART_RxCpltCallback+0x7a4>)
 80043c2:	2201      	movs	r2, #1
 80043c4:	701a      	strb	r2, [r3, #0]
									if (caminarD == 1){
 80043c6:	4b1c      	ldr	r3, [pc, #112]	@ (8004438 <HAL_UART_RxCpltCallback+0x7a4>)
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d170      	bne.n	80044b0 <HAL_UART_RxCpltCallback+0x81c>
										running1++;
 80043ce:	4b14      	ldr	r3, [pc, #80]	@ (8004420 <HAL_UART_RxCpltCallback+0x78c>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	3301      	adds	r3, #1
 80043d4:	4a12      	ldr	r2, [pc, #72]	@ (8004420 <HAL_UART_RxCpltCallback+0x78c>)
 80043d6:	6013      	str	r3, [r2, #0]
										if(running1 == 4){
 80043d8:	4b11      	ldr	r3, [pc, #68]	@ (8004420 <HAL_UART_RxCpltCallback+0x78c>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2b04      	cmp	r3, #4
 80043de:	d103      	bne.n	80043e8 <HAL_UART_RxCpltCallback+0x754>
											frame1=6;
 80043e0:	4b10      	ldr	r3, [pc, #64]	@ (8004424 <HAL_UART_RxCpltCallback+0x790>)
 80043e2:	2206      	movs	r2, #6
 80043e4:	601a      	str	r2, [r3, #0]
 80043e6:	e063      	b.n	80044b0 <HAL_UART_RxCpltCallback+0x81c>
										}else if (running1 == 8){
 80043e8:	4b0d      	ldr	r3, [pc, #52]	@ (8004420 <HAL_UART_RxCpltCallback+0x78c>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2b08      	cmp	r3, #8
 80043ee:	d103      	bne.n	80043f8 <HAL_UART_RxCpltCallback+0x764>
											frame1=7;
 80043f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004424 <HAL_UART_RxCpltCallback+0x790>)
 80043f2:	2207      	movs	r2, #7
 80043f4:	601a      	str	r2, [r3, #0]
 80043f6:	e05b      	b.n	80044b0 <HAL_UART_RxCpltCallback+0x81c>
										}else if (running1 == 12){
 80043f8:	4b09      	ldr	r3, [pc, #36]	@ (8004420 <HAL_UART_RxCpltCallback+0x78c>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2b0c      	cmp	r3, #12
 80043fe:	d103      	bne.n	8004408 <HAL_UART_RxCpltCallback+0x774>
											frame1=8;
 8004400:	4b08      	ldr	r3, [pc, #32]	@ (8004424 <HAL_UART_RxCpltCallback+0x790>)
 8004402:	2208      	movs	r2, #8
 8004404:	601a      	str	r2, [r3, #0]
 8004406:	e053      	b.n	80044b0 <HAL_UART_RxCpltCallback+0x81c>
										}else if (running1 >= 16){
 8004408:	4b05      	ldr	r3, [pc, #20]	@ (8004420 <HAL_UART_RxCpltCallback+0x78c>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2b0f      	cmp	r3, #15
 800440e:	dd4f      	ble.n	80044b0 <HAL_UART_RxCpltCallback+0x81c>
											frame1=7;
 8004410:	4b04      	ldr	r3, [pc, #16]	@ (8004424 <HAL_UART_RxCpltCallback+0x790>)
 8004412:	2207      	movs	r2, #7
 8004414:	601a      	str	r2, [r3, #0]
											running1=0;
 8004416:	4b02      	ldr	r3, [pc, #8]	@ (8004420 <HAL_UART_RxCpltCallback+0x78c>)
 8004418:	2200      	movs	r2, #0
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	e048      	b.n	80044b0 <HAL_UART_RxCpltCallback+0x81c>
 800441e:	bf00      	nop
 8004420:	200140c0 	.word	0x200140c0
 8004424:	20012e38 	.word	0x20012e38
 8004428:	2001409a 	.word	0x2001409a
 800442c:	200140c4 	.word	0x200140c4
 8004430:	200140b0 	.word	0x200140b0
 8004434:	200140a0 	.word	0x200140a0
 8004438:	20014091 	.word	0x20014091
										}
									}
								}else if (shooting1 == 0){
 800443c:	4b80      	ldr	r3, [pc, #512]	@ (8004640 <HAL_UART_RxCpltCallback+0x9ac>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d135      	bne.n	80044b0 <HAL_UART_RxCpltCallback+0x81c>
									x1 = x1+4;
 8004444:	4b7f      	ldr	r3, [pc, #508]	@ (8004644 <HAL_UART_RxCpltCallback+0x9b0>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	3304      	adds	r3, #4
 800444a:	4a7e      	ldr	r2, [pc, #504]	@ (8004644 <HAL_UART_RxCpltCallback+0x9b0>)
 800444c:	6013      	str	r3, [r2, #0]
									flip1 = 1;
 800444e:	4b7e      	ldr	r3, [pc, #504]	@ (8004648 <HAL_UART_RxCpltCallback+0x9b4>)
 8004450:	2201      	movs	r2, #1
 8004452:	601a      	str	r2, [r3, #0]
									caminarD = 1;
 8004454:	4b7d      	ldr	r3, [pc, #500]	@ (800464c <HAL_UART_RxCpltCallback+0x9b8>)
 8004456:	2201      	movs	r2, #1
 8004458:	701a      	strb	r2, [r3, #0]
									//FillRect(x1+1, y1, 1, 25, 0xF800);
									if(caminarD == 1){
 800445a:	4b7c      	ldr	r3, [pc, #496]	@ (800464c <HAL_UART_RxCpltCallback+0x9b8>)
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d126      	bne.n	80044b0 <HAL_UART_RxCpltCallback+0x81c>
										running1++;
 8004462:	4b7b      	ldr	r3, [pc, #492]	@ (8004650 <HAL_UART_RxCpltCallback+0x9bc>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	3301      	adds	r3, #1
 8004468:	4a79      	ldr	r2, [pc, #484]	@ (8004650 <HAL_UART_RxCpltCallback+0x9bc>)
 800446a:	6013      	str	r3, [r2, #0]
										if (running1 == 4){
 800446c:	4b78      	ldr	r3, [pc, #480]	@ (8004650 <HAL_UART_RxCpltCallback+0x9bc>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2b04      	cmp	r3, #4
 8004472:	d103      	bne.n	800447c <HAL_UART_RxCpltCallback+0x7e8>
											frame1=1;
 8004474:	4b77      	ldr	r3, [pc, #476]	@ (8004654 <HAL_UART_RxCpltCallback+0x9c0>)
 8004476:	2201      	movs	r2, #1
 8004478:	601a      	str	r2, [r3, #0]
 800447a:	e019      	b.n	80044b0 <HAL_UART_RxCpltCallback+0x81c>
										}else if (running1 == 8){
 800447c:	4b74      	ldr	r3, [pc, #464]	@ (8004650 <HAL_UART_RxCpltCallback+0x9bc>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2b08      	cmp	r3, #8
 8004482:	d103      	bne.n	800448c <HAL_UART_RxCpltCallback+0x7f8>
											frame1=2;
 8004484:	4b73      	ldr	r3, [pc, #460]	@ (8004654 <HAL_UART_RxCpltCallback+0x9c0>)
 8004486:	2202      	movs	r2, #2
 8004488:	601a      	str	r2, [r3, #0]
 800448a:	e011      	b.n	80044b0 <HAL_UART_RxCpltCallback+0x81c>
										}else if (running1 == 12){
 800448c:	4b70      	ldr	r3, [pc, #448]	@ (8004650 <HAL_UART_RxCpltCallback+0x9bc>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2b0c      	cmp	r3, #12
 8004492:	d103      	bne.n	800449c <HAL_UART_RxCpltCallback+0x808>
											frame1=3;
 8004494:	4b6f      	ldr	r3, [pc, #444]	@ (8004654 <HAL_UART_RxCpltCallback+0x9c0>)
 8004496:	2203      	movs	r2, #3
 8004498:	601a      	str	r2, [r3, #0]
 800449a:	e009      	b.n	80044b0 <HAL_UART_RxCpltCallback+0x81c>
										}else if (running1 >= 16){
 800449c:	4b6c      	ldr	r3, [pc, #432]	@ (8004650 <HAL_UART_RxCpltCallback+0x9bc>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2b0f      	cmp	r3, #15
 80044a2:	dd05      	ble.n	80044b0 <HAL_UART_RxCpltCallback+0x81c>
											frame1=2;
 80044a4:	4b6b      	ldr	r3, [pc, #428]	@ (8004654 <HAL_UART_RxCpltCallback+0x9c0>)
 80044a6:	2202      	movs	r2, #2
 80044a8:	601a      	str	r2, [r3, #0]
											running1=0;
 80044aa:	4b69      	ldr	r3, [pc, #420]	@ (8004650 <HAL_UART_RxCpltCallback+0x9bc>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	601a      	str	r2, [r3, #0]
										}
									}
								}
							}
									if(x1 >= 281){
 80044b0:	4b64      	ldr	r3, [pc, #400]	@ (8004644 <HAL_UART_RxCpltCallback+0x9b0>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 80044b8:	f340 8339 	ble.w	8004b2e <HAL_UART_RxCpltCallback+0xe9a>
										x1 = 280;
 80044bc:	4b61      	ldr	r3, [pc, #388]	@ (8004644 <HAL_UART_RxCpltCallback+0x9b0>)
 80044be:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80044c2:	601a      	str	r2, [r3, #0]
									}
							break;
 80044c4:	e333      	b.n	8004b2e <HAL_UART_RxCpltCallback+0xe9a>
						case 'a':
							//strcpy(tx_buffer, "a\r\n");
							strcpy(tx_buffer, "a");
 80044c6:	4b64      	ldr	r3, [pc, #400]	@ (8004658 <HAL_UART_RxCpltCallback+0x9c4>)
 80044c8:	2261      	movs	r2, #97	@ 0x61
 80044ca:	801a      	strh	r2, [r3, #0]
							if (ch1 == 1){
 80044cc:	4b63      	ldr	r3, [pc, #396]	@ (800465c <HAL_UART_RxCpltCallback+0x9c8>)
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d174      	bne.n	80045be <HAL_UART_RxCpltCallback+0x92a>
								if (shooting1 == 1){
 80044d4:	4b5a      	ldr	r3, [pc, #360]	@ (8004640 <HAL_UART_RxCpltCallback+0x9ac>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d136      	bne.n	800454a <HAL_UART_RxCpltCallback+0x8b6>
									x1 = x1-4;
 80044dc:	4b59      	ldr	r3, [pc, #356]	@ (8004644 <HAL_UART_RxCpltCallback+0x9b0>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	3b04      	subs	r3, #4
 80044e2:	4a58      	ldr	r2, [pc, #352]	@ (8004644 <HAL_UART_RxCpltCallback+0x9b0>)
 80044e4:	6013      	str	r3, [r2, #0]
									flip1 = 0;				//AHORA FLIP ES 0
 80044e6:	4b58      	ldr	r3, [pc, #352]	@ (8004648 <HAL_UART_RxCpltCallback+0x9b4>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	601a      	str	r2, [r3, #0]
									caminarI = 1;
 80044ec:	4b5c      	ldr	r3, [pc, #368]	@ (8004660 <HAL_UART_RxCpltCallback+0x9cc>)
 80044ee:	2201      	movs	r2, #1
 80044f0:	701a      	strb	r2, [r3, #0]
									//FillRect(x1-1, y1, 1, 25, 0xF800);
									if(caminarI == 1){
 80044f2:	4b5b      	ldr	r3, [pc, #364]	@ (8004660 <HAL_UART_RxCpltCallback+0x9cc>)
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d161      	bne.n	80045be <HAL_UART_RxCpltCallback+0x92a>
										running1++;
 80044fa:	4b55      	ldr	r3, [pc, #340]	@ (8004650 <HAL_UART_RxCpltCallback+0x9bc>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	3301      	adds	r3, #1
 8004500:	4a53      	ldr	r2, [pc, #332]	@ (8004650 <HAL_UART_RxCpltCallback+0x9bc>)
 8004502:	6013      	str	r3, [r2, #0]
										if (running1 == 4){
 8004504:	4b52      	ldr	r3, [pc, #328]	@ (8004650 <HAL_UART_RxCpltCallback+0x9bc>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2b04      	cmp	r3, #4
 800450a:	d103      	bne.n	8004514 <HAL_UART_RxCpltCallback+0x880>
											frame1=6;
 800450c:	4b51      	ldr	r3, [pc, #324]	@ (8004654 <HAL_UART_RxCpltCallback+0x9c0>)
 800450e:	2206      	movs	r2, #6
 8004510:	601a      	str	r2, [r3, #0]
 8004512:	e054      	b.n	80045be <HAL_UART_RxCpltCallback+0x92a>
										}else if (running1 == 8){
 8004514:	4b4e      	ldr	r3, [pc, #312]	@ (8004650 <HAL_UART_RxCpltCallback+0x9bc>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2b08      	cmp	r3, #8
 800451a:	d103      	bne.n	8004524 <HAL_UART_RxCpltCallback+0x890>
											frame1=7;
 800451c:	4b4d      	ldr	r3, [pc, #308]	@ (8004654 <HAL_UART_RxCpltCallback+0x9c0>)
 800451e:	2207      	movs	r2, #7
 8004520:	601a      	str	r2, [r3, #0]
 8004522:	e04c      	b.n	80045be <HAL_UART_RxCpltCallback+0x92a>
										}else if (running1 == 12){
 8004524:	4b4a      	ldr	r3, [pc, #296]	@ (8004650 <HAL_UART_RxCpltCallback+0x9bc>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2b0c      	cmp	r3, #12
 800452a:	d103      	bne.n	8004534 <HAL_UART_RxCpltCallback+0x8a0>
											frame1=8;
 800452c:	4b49      	ldr	r3, [pc, #292]	@ (8004654 <HAL_UART_RxCpltCallback+0x9c0>)
 800452e:	2208      	movs	r2, #8
 8004530:	601a      	str	r2, [r3, #0]
 8004532:	e044      	b.n	80045be <HAL_UART_RxCpltCallback+0x92a>
										}else if (running1 >= 16){
 8004534:	4b46      	ldr	r3, [pc, #280]	@ (8004650 <HAL_UART_RxCpltCallback+0x9bc>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2b0f      	cmp	r3, #15
 800453a:	dd40      	ble.n	80045be <HAL_UART_RxCpltCallback+0x92a>
											frame1=7;
 800453c:	4b45      	ldr	r3, [pc, #276]	@ (8004654 <HAL_UART_RxCpltCallback+0x9c0>)
 800453e:	2207      	movs	r2, #7
 8004540:	601a      	str	r2, [r3, #0]
											running1=0;
 8004542:	4b43      	ldr	r3, [pc, #268]	@ (8004650 <HAL_UART_RxCpltCallback+0x9bc>)
 8004544:	2200      	movs	r2, #0
 8004546:	601a      	str	r2, [r3, #0]
 8004548:	e039      	b.n	80045be <HAL_UART_RxCpltCallback+0x92a>
										}
									}
								}else if (shooting1 == 0){
 800454a:	4b3d      	ldr	r3, [pc, #244]	@ (8004640 <HAL_UART_RxCpltCallback+0x9ac>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d135      	bne.n	80045be <HAL_UART_RxCpltCallback+0x92a>
									x1 = x1-4;
 8004552:	4b3c      	ldr	r3, [pc, #240]	@ (8004644 <HAL_UART_RxCpltCallback+0x9b0>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	3b04      	subs	r3, #4
 8004558:	4a3a      	ldr	r2, [pc, #232]	@ (8004644 <HAL_UART_RxCpltCallback+0x9b0>)
 800455a:	6013      	str	r3, [r2, #0]
									flip1 = 0;
 800455c:	4b3a      	ldr	r3, [pc, #232]	@ (8004648 <HAL_UART_RxCpltCallback+0x9b4>)
 800455e:	2200      	movs	r2, #0
 8004560:	601a      	str	r2, [r3, #0]
									caminarI = 1;
 8004562:	4b3f      	ldr	r3, [pc, #252]	@ (8004660 <HAL_UART_RxCpltCallback+0x9cc>)
 8004564:	2201      	movs	r2, #1
 8004566:	701a      	strb	r2, [r3, #0]
									//FillRect(x1-1, y1, 1, 25, 0xF800);
									if(caminarI == 1){
 8004568:	4b3d      	ldr	r3, [pc, #244]	@ (8004660 <HAL_UART_RxCpltCallback+0x9cc>)
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d126      	bne.n	80045be <HAL_UART_RxCpltCallback+0x92a>
										running1++;
 8004570:	4b37      	ldr	r3, [pc, #220]	@ (8004650 <HAL_UART_RxCpltCallback+0x9bc>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	3301      	adds	r3, #1
 8004576:	4a36      	ldr	r2, [pc, #216]	@ (8004650 <HAL_UART_RxCpltCallback+0x9bc>)
 8004578:	6013      	str	r3, [r2, #0]
										if (running1 == 4){
 800457a:	4b35      	ldr	r3, [pc, #212]	@ (8004650 <HAL_UART_RxCpltCallback+0x9bc>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2b04      	cmp	r3, #4
 8004580:	d103      	bne.n	800458a <HAL_UART_RxCpltCallback+0x8f6>
											frame1=1;
 8004582:	4b34      	ldr	r3, [pc, #208]	@ (8004654 <HAL_UART_RxCpltCallback+0x9c0>)
 8004584:	2201      	movs	r2, #1
 8004586:	601a      	str	r2, [r3, #0]
 8004588:	e019      	b.n	80045be <HAL_UART_RxCpltCallback+0x92a>
										}else if (running1 == 8){
 800458a:	4b31      	ldr	r3, [pc, #196]	@ (8004650 <HAL_UART_RxCpltCallback+0x9bc>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2b08      	cmp	r3, #8
 8004590:	d103      	bne.n	800459a <HAL_UART_RxCpltCallback+0x906>
											frame1=2;
 8004592:	4b30      	ldr	r3, [pc, #192]	@ (8004654 <HAL_UART_RxCpltCallback+0x9c0>)
 8004594:	2202      	movs	r2, #2
 8004596:	601a      	str	r2, [r3, #0]
 8004598:	e011      	b.n	80045be <HAL_UART_RxCpltCallback+0x92a>
										}else if (running1 == 12){
 800459a:	4b2d      	ldr	r3, [pc, #180]	@ (8004650 <HAL_UART_RxCpltCallback+0x9bc>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2b0c      	cmp	r3, #12
 80045a0:	d103      	bne.n	80045aa <HAL_UART_RxCpltCallback+0x916>
											frame1=3;
 80045a2:	4b2c      	ldr	r3, [pc, #176]	@ (8004654 <HAL_UART_RxCpltCallback+0x9c0>)
 80045a4:	2203      	movs	r2, #3
 80045a6:	601a      	str	r2, [r3, #0]
 80045a8:	e009      	b.n	80045be <HAL_UART_RxCpltCallback+0x92a>
										}else if (running1 >= 16){
 80045aa:	4b29      	ldr	r3, [pc, #164]	@ (8004650 <HAL_UART_RxCpltCallback+0x9bc>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2b0f      	cmp	r3, #15
 80045b0:	dd05      	ble.n	80045be <HAL_UART_RxCpltCallback+0x92a>
											frame1=2;
 80045b2:	4b28      	ldr	r3, [pc, #160]	@ (8004654 <HAL_UART_RxCpltCallback+0x9c0>)
 80045b4:	2202      	movs	r2, #2
 80045b6:	601a      	str	r2, [r3, #0]
											running1=0;
 80045b8:	4b25      	ldr	r3, [pc, #148]	@ (8004650 <HAL_UART_RxCpltCallback+0x9bc>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	601a      	str	r2, [r3, #0]
										}
									}
								}
							}if (ch1 == 5){
 80045be:	4b27      	ldr	r3, [pc, #156]	@ (800465c <HAL_UART_RxCpltCallback+0x9c8>)
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	2b05      	cmp	r3, #5
 80045c4:	d158      	bne.n	8004678 <HAL_UART_RxCpltCallback+0x9e4>
								if (shooting1 == 1 || shooting1 == 2){
 80045c6:	4b1e      	ldr	r3, [pc, #120]	@ (8004640 <HAL_UART_RxCpltCallback+0x9ac>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d003      	beq.n	80045d6 <HAL_UART_RxCpltCallback+0x942>
 80045ce:	4b1c      	ldr	r3, [pc, #112]	@ (8004640 <HAL_UART_RxCpltCallback+0x9ac>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d103      	bne.n	80045de <HAL_UART_RxCpltCallback+0x94a>
									flip1 = 0;
 80045d6:	4b1c      	ldr	r3, [pc, #112]	@ (8004648 <HAL_UART_RxCpltCallback+0x9b4>)
 80045d8:	2200      	movs	r2, #0
 80045da:	601a      	str	r2, [r3, #0]
 80045dc:	e04c      	b.n	8004678 <HAL_UART_RxCpltCallback+0x9e4>
								}else if (shooting1 == 0){
 80045de:	4b18      	ldr	r3, [pc, #96]	@ (8004640 <HAL_UART_RxCpltCallback+0x9ac>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d148      	bne.n	8004678 <HAL_UART_RxCpltCallback+0x9e4>
									x1 = x1-4;
 80045e6:	4b17      	ldr	r3, [pc, #92]	@ (8004644 <HAL_UART_RxCpltCallback+0x9b0>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	3b04      	subs	r3, #4
 80045ec:	4a15      	ldr	r2, [pc, #84]	@ (8004644 <HAL_UART_RxCpltCallback+0x9b0>)
 80045ee:	6013      	str	r3, [r2, #0]
									flip1 = 0;
 80045f0:	4b15      	ldr	r3, [pc, #84]	@ (8004648 <HAL_UART_RxCpltCallback+0x9b4>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	601a      	str	r2, [r3, #0]
									caminarI = 1;
 80045f6:	4b1a      	ldr	r3, [pc, #104]	@ (8004660 <HAL_UART_RxCpltCallback+0x9cc>)
 80045f8:	2201      	movs	r2, #1
 80045fa:	701a      	strb	r2, [r3, #0]
									//FillRect(x1-1, y1, 1, 25, 0xF800);
									if(caminarI == 1){
 80045fc:	4b18      	ldr	r3, [pc, #96]	@ (8004660 <HAL_UART_RxCpltCallback+0x9cc>)
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d139      	bne.n	8004678 <HAL_UART_RxCpltCallback+0x9e4>
										running1++;
 8004604:	4b12      	ldr	r3, [pc, #72]	@ (8004650 <HAL_UART_RxCpltCallback+0x9bc>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	3301      	adds	r3, #1
 800460a:	4a11      	ldr	r2, [pc, #68]	@ (8004650 <HAL_UART_RxCpltCallback+0x9bc>)
 800460c:	6013      	str	r3, [r2, #0]
										if (running1 == 4){
 800460e:	4b10      	ldr	r3, [pc, #64]	@ (8004650 <HAL_UART_RxCpltCallback+0x9bc>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b04      	cmp	r3, #4
 8004614:	d103      	bne.n	800461e <HAL_UART_RxCpltCallback+0x98a>
											frame1=1;
 8004616:	4b0f      	ldr	r3, [pc, #60]	@ (8004654 <HAL_UART_RxCpltCallback+0x9c0>)
 8004618:	2201      	movs	r2, #1
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	e02c      	b.n	8004678 <HAL_UART_RxCpltCallback+0x9e4>
										}else if (running1 == 8){
 800461e:	4b0c      	ldr	r3, [pc, #48]	@ (8004650 <HAL_UART_RxCpltCallback+0x9bc>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b08      	cmp	r3, #8
 8004624:	d103      	bne.n	800462e <HAL_UART_RxCpltCallback+0x99a>
											frame1=2;
 8004626:	4b0b      	ldr	r3, [pc, #44]	@ (8004654 <HAL_UART_RxCpltCallback+0x9c0>)
 8004628:	2202      	movs	r2, #2
 800462a:	601a      	str	r2, [r3, #0]
 800462c:	e024      	b.n	8004678 <HAL_UART_RxCpltCallback+0x9e4>
										}else if (running1 == 12){
 800462e:	4b08      	ldr	r3, [pc, #32]	@ (8004650 <HAL_UART_RxCpltCallback+0x9bc>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2b0c      	cmp	r3, #12
 8004634:	d116      	bne.n	8004664 <HAL_UART_RxCpltCallback+0x9d0>
											frame1=3;
 8004636:	4b07      	ldr	r3, [pc, #28]	@ (8004654 <HAL_UART_RxCpltCallback+0x9c0>)
 8004638:	2203      	movs	r2, #3
 800463a:	601a      	str	r2, [r3, #0]
 800463c:	e01c      	b.n	8004678 <HAL_UART_RxCpltCallback+0x9e4>
 800463e:	bf00      	nop
 8004640:	200140c4 	.word	0x200140c4
 8004644:	200140a0 	.word	0x200140a0
 8004648:	200140b0 	.word	0x200140b0
 800464c:	20014091 	.word	0x20014091
 8004650:	200140c0 	.word	0x200140c0
 8004654:	20012e38 	.word	0x20012e38
 8004658:	20012f10 	.word	0x20012f10
 800465c:	2001409a 	.word	0x2001409a
 8004660:	20014092 	.word	0x20014092
										}else if (running1 >= 16){
 8004664:	4b82      	ldr	r3, [pc, #520]	@ (8004870 <HAL_UART_RxCpltCallback+0xbdc>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2b0f      	cmp	r3, #15
 800466a:	dd05      	ble.n	8004678 <HAL_UART_RxCpltCallback+0x9e4>
											frame1=2;
 800466c:	4b81      	ldr	r3, [pc, #516]	@ (8004874 <HAL_UART_RxCpltCallback+0xbe0>)
 800466e:	2202      	movs	r2, #2
 8004670:	601a      	str	r2, [r3, #0]
											running1=0;
 8004672:	4b7f      	ldr	r3, [pc, #508]	@ (8004870 <HAL_UART_RxCpltCallback+0xbdc>)
 8004674:	2200      	movs	r2, #0
 8004676:	601a      	str	r2, [r3, #0]
										}
									}
								}
							}if (ch1 == 8){
 8004678:	4b7f      	ldr	r3, [pc, #508]	@ (8004878 <HAL_UART_RxCpltCallback+0xbe4>)
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	2b08      	cmp	r3, #8
 800467e:	d174      	bne.n	800476a <HAL_UART_RxCpltCallback+0xad6>
								if (shooting1 == 1){
 8004680:	4b7e      	ldr	r3, [pc, #504]	@ (800487c <HAL_UART_RxCpltCallback+0xbe8>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d136      	bne.n	80046f6 <HAL_UART_RxCpltCallback+0xa62>
									x1 = x1-4;
 8004688:	4b7d      	ldr	r3, [pc, #500]	@ (8004880 <HAL_UART_RxCpltCallback+0xbec>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	3b04      	subs	r3, #4
 800468e:	4a7c      	ldr	r2, [pc, #496]	@ (8004880 <HAL_UART_RxCpltCallback+0xbec>)
 8004690:	6013      	str	r3, [r2, #0]
									flip1 = 0;
 8004692:	4b7c      	ldr	r3, [pc, #496]	@ (8004884 <HAL_UART_RxCpltCallback+0xbf0>)
 8004694:	2200      	movs	r2, #0
 8004696:	601a      	str	r2, [r3, #0]
									caminarI = 1;
 8004698:	4b7b      	ldr	r3, [pc, #492]	@ (8004888 <HAL_UART_RxCpltCallback+0xbf4>)
 800469a:	2201      	movs	r2, #1
 800469c:	701a      	strb	r2, [r3, #0]
									//FillRect(x1-1, y1, 1, 25, 0xF800);
									if(caminarI == 1){
 800469e:	4b7a      	ldr	r3, [pc, #488]	@ (8004888 <HAL_UART_RxCpltCallback+0xbf4>)
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d161      	bne.n	800476a <HAL_UART_RxCpltCallback+0xad6>
										running1++;
 80046a6:	4b72      	ldr	r3, [pc, #456]	@ (8004870 <HAL_UART_RxCpltCallback+0xbdc>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	3301      	adds	r3, #1
 80046ac:	4a70      	ldr	r2, [pc, #448]	@ (8004870 <HAL_UART_RxCpltCallback+0xbdc>)
 80046ae:	6013      	str	r3, [r2, #0]
										if (running1 == 4){
 80046b0:	4b6f      	ldr	r3, [pc, #444]	@ (8004870 <HAL_UART_RxCpltCallback+0xbdc>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2b04      	cmp	r3, #4
 80046b6:	d103      	bne.n	80046c0 <HAL_UART_RxCpltCallback+0xa2c>
											frame1=6;
 80046b8:	4b6e      	ldr	r3, [pc, #440]	@ (8004874 <HAL_UART_RxCpltCallback+0xbe0>)
 80046ba:	2206      	movs	r2, #6
 80046bc:	601a      	str	r2, [r3, #0]
 80046be:	e054      	b.n	800476a <HAL_UART_RxCpltCallback+0xad6>
										}else if (running1 == 8){
 80046c0:	4b6b      	ldr	r3, [pc, #428]	@ (8004870 <HAL_UART_RxCpltCallback+0xbdc>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2b08      	cmp	r3, #8
 80046c6:	d103      	bne.n	80046d0 <HAL_UART_RxCpltCallback+0xa3c>
											frame1=7;
 80046c8:	4b6a      	ldr	r3, [pc, #424]	@ (8004874 <HAL_UART_RxCpltCallback+0xbe0>)
 80046ca:	2207      	movs	r2, #7
 80046cc:	601a      	str	r2, [r3, #0]
 80046ce:	e04c      	b.n	800476a <HAL_UART_RxCpltCallback+0xad6>
										}else if (running1 == 12){
 80046d0:	4b67      	ldr	r3, [pc, #412]	@ (8004870 <HAL_UART_RxCpltCallback+0xbdc>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2b0c      	cmp	r3, #12
 80046d6:	d103      	bne.n	80046e0 <HAL_UART_RxCpltCallback+0xa4c>
											frame1=8;
 80046d8:	4b66      	ldr	r3, [pc, #408]	@ (8004874 <HAL_UART_RxCpltCallback+0xbe0>)
 80046da:	2208      	movs	r2, #8
 80046dc:	601a      	str	r2, [r3, #0]
 80046de:	e044      	b.n	800476a <HAL_UART_RxCpltCallback+0xad6>
										}else if (running1 >= 16){
 80046e0:	4b63      	ldr	r3, [pc, #396]	@ (8004870 <HAL_UART_RxCpltCallback+0xbdc>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2b0f      	cmp	r3, #15
 80046e6:	dd40      	ble.n	800476a <HAL_UART_RxCpltCallback+0xad6>
											frame1=7;
 80046e8:	4b62      	ldr	r3, [pc, #392]	@ (8004874 <HAL_UART_RxCpltCallback+0xbe0>)
 80046ea:	2207      	movs	r2, #7
 80046ec:	601a      	str	r2, [r3, #0]
											running1=0;
 80046ee:	4b60      	ldr	r3, [pc, #384]	@ (8004870 <HAL_UART_RxCpltCallback+0xbdc>)
 80046f0:	2200      	movs	r2, #0
 80046f2:	601a      	str	r2, [r3, #0]
 80046f4:	e039      	b.n	800476a <HAL_UART_RxCpltCallback+0xad6>
										}
									}
								}else if (shooting1 == 0){
 80046f6:	4b61      	ldr	r3, [pc, #388]	@ (800487c <HAL_UART_RxCpltCallback+0xbe8>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d135      	bne.n	800476a <HAL_UART_RxCpltCallback+0xad6>
									x1 = x1-4;
 80046fe:	4b60      	ldr	r3, [pc, #384]	@ (8004880 <HAL_UART_RxCpltCallback+0xbec>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	3b04      	subs	r3, #4
 8004704:	4a5e      	ldr	r2, [pc, #376]	@ (8004880 <HAL_UART_RxCpltCallback+0xbec>)
 8004706:	6013      	str	r3, [r2, #0]
									flip1 = 0;
 8004708:	4b5e      	ldr	r3, [pc, #376]	@ (8004884 <HAL_UART_RxCpltCallback+0xbf0>)
 800470a:	2200      	movs	r2, #0
 800470c:	601a      	str	r2, [r3, #0]
									caminarI = 1;
 800470e:	4b5e      	ldr	r3, [pc, #376]	@ (8004888 <HAL_UART_RxCpltCallback+0xbf4>)
 8004710:	2201      	movs	r2, #1
 8004712:	701a      	strb	r2, [r3, #0]
									//FillRect(x1-1, y1, 1, 25, 0xF800);
									if(caminarI == 1){
 8004714:	4b5c      	ldr	r3, [pc, #368]	@ (8004888 <HAL_UART_RxCpltCallback+0xbf4>)
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d126      	bne.n	800476a <HAL_UART_RxCpltCallback+0xad6>
										running1++;
 800471c:	4b54      	ldr	r3, [pc, #336]	@ (8004870 <HAL_UART_RxCpltCallback+0xbdc>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	3301      	adds	r3, #1
 8004722:	4a53      	ldr	r2, [pc, #332]	@ (8004870 <HAL_UART_RxCpltCallback+0xbdc>)
 8004724:	6013      	str	r3, [r2, #0]
										if (running1 == 4){
 8004726:	4b52      	ldr	r3, [pc, #328]	@ (8004870 <HAL_UART_RxCpltCallback+0xbdc>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2b04      	cmp	r3, #4
 800472c:	d103      	bne.n	8004736 <HAL_UART_RxCpltCallback+0xaa2>
											frame1=1;
 800472e:	4b51      	ldr	r3, [pc, #324]	@ (8004874 <HAL_UART_RxCpltCallback+0xbe0>)
 8004730:	2201      	movs	r2, #1
 8004732:	601a      	str	r2, [r3, #0]
 8004734:	e019      	b.n	800476a <HAL_UART_RxCpltCallback+0xad6>
										}else if (running1 == 8){
 8004736:	4b4e      	ldr	r3, [pc, #312]	@ (8004870 <HAL_UART_RxCpltCallback+0xbdc>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2b08      	cmp	r3, #8
 800473c:	d103      	bne.n	8004746 <HAL_UART_RxCpltCallback+0xab2>
											frame1=2;
 800473e:	4b4d      	ldr	r3, [pc, #308]	@ (8004874 <HAL_UART_RxCpltCallback+0xbe0>)
 8004740:	2202      	movs	r2, #2
 8004742:	601a      	str	r2, [r3, #0]
 8004744:	e011      	b.n	800476a <HAL_UART_RxCpltCallback+0xad6>
										}else if (running1 == 12){
 8004746:	4b4a      	ldr	r3, [pc, #296]	@ (8004870 <HAL_UART_RxCpltCallback+0xbdc>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2b0c      	cmp	r3, #12
 800474c:	d103      	bne.n	8004756 <HAL_UART_RxCpltCallback+0xac2>
											frame1=3;
 800474e:	4b49      	ldr	r3, [pc, #292]	@ (8004874 <HAL_UART_RxCpltCallback+0xbe0>)
 8004750:	2203      	movs	r2, #3
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	e009      	b.n	800476a <HAL_UART_RxCpltCallback+0xad6>
										}else if (running1 >= 16){
 8004756:	4b46      	ldr	r3, [pc, #280]	@ (8004870 <HAL_UART_RxCpltCallback+0xbdc>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2b0f      	cmp	r3, #15
 800475c:	dd05      	ble.n	800476a <HAL_UART_RxCpltCallback+0xad6>
											frame1=2;
 800475e:	4b45      	ldr	r3, [pc, #276]	@ (8004874 <HAL_UART_RxCpltCallback+0xbe0>)
 8004760:	2202      	movs	r2, #2
 8004762:	601a      	str	r2, [r3, #0]
											running1=0;
 8004764:	4b42      	ldr	r3, [pc, #264]	@ (8004870 <HAL_UART_RxCpltCallback+0xbdc>)
 8004766:	2200      	movs	r2, #0
 8004768:	601a      	str	r2, [r3, #0]
										}
									}
								}
							}if (ch1 == 9){
 800476a:	4b43      	ldr	r3, [pc, #268]	@ (8004878 <HAL_UART_RxCpltCallback+0xbe4>)
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	2b09      	cmp	r3, #9
 8004770:	d174      	bne.n	800485c <HAL_UART_RxCpltCallback+0xbc8>
								if (shooting1 == 1){
 8004772:	4b42      	ldr	r3, [pc, #264]	@ (800487c <HAL_UART_RxCpltCallback+0xbe8>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d136      	bne.n	80047e8 <HAL_UART_RxCpltCallback+0xb54>
									x1 = x1-4;
 800477a:	4b41      	ldr	r3, [pc, #260]	@ (8004880 <HAL_UART_RxCpltCallback+0xbec>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	3b04      	subs	r3, #4
 8004780:	4a3f      	ldr	r2, [pc, #252]	@ (8004880 <HAL_UART_RxCpltCallback+0xbec>)
 8004782:	6013      	str	r3, [r2, #0]
									flip1 = 0;
 8004784:	4b3f      	ldr	r3, [pc, #252]	@ (8004884 <HAL_UART_RxCpltCallback+0xbf0>)
 8004786:	2200      	movs	r2, #0
 8004788:	601a      	str	r2, [r3, #0]
									caminarI = 1;
 800478a:	4b3f      	ldr	r3, [pc, #252]	@ (8004888 <HAL_UART_RxCpltCallback+0xbf4>)
 800478c:	2201      	movs	r2, #1
 800478e:	701a      	strb	r2, [r3, #0]
									//FillRect(x1-1, y1, 1, 25, 0xF800);
									if(caminarI == 1){
 8004790:	4b3d      	ldr	r3, [pc, #244]	@ (8004888 <HAL_UART_RxCpltCallback+0xbf4>)
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d161      	bne.n	800485c <HAL_UART_RxCpltCallback+0xbc8>
										running1++;
 8004798:	4b35      	ldr	r3, [pc, #212]	@ (8004870 <HAL_UART_RxCpltCallback+0xbdc>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	3301      	adds	r3, #1
 800479e:	4a34      	ldr	r2, [pc, #208]	@ (8004870 <HAL_UART_RxCpltCallback+0xbdc>)
 80047a0:	6013      	str	r3, [r2, #0]
										if (running1 == 4){
 80047a2:	4b33      	ldr	r3, [pc, #204]	@ (8004870 <HAL_UART_RxCpltCallback+0xbdc>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2b04      	cmp	r3, #4
 80047a8:	d103      	bne.n	80047b2 <HAL_UART_RxCpltCallback+0xb1e>
											frame1=6;
 80047aa:	4b32      	ldr	r3, [pc, #200]	@ (8004874 <HAL_UART_RxCpltCallback+0xbe0>)
 80047ac:	2206      	movs	r2, #6
 80047ae:	601a      	str	r2, [r3, #0]
 80047b0:	e054      	b.n	800485c <HAL_UART_RxCpltCallback+0xbc8>
										}else if (running1 == 8){
 80047b2:	4b2f      	ldr	r3, [pc, #188]	@ (8004870 <HAL_UART_RxCpltCallback+0xbdc>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2b08      	cmp	r3, #8
 80047b8:	d103      	bne.n	80047c2 <HAL_UART_RxCpltCallback+0xb2e>
											frame1=7;
 80047ba:	4b2e      	ldr	r3, [pc, #184]	@ (8004874 <HAL_UART_RxCpltCallback+0xbe0>)
 80047bc:	2207      	movs	r2, #7
 80047be:	601a      	str	r2, [r3, #0]
 80047c0:	e04c      	b.n	800485c <HAL_UART_RxCpltCallback+0xbc8>
										}else if (running1 == 12){
 80047c2:	4b2b      	ldr	r3, [pc, #172]	@ (8004870 <HAL_UART_RxCpltCallback+0xbdc>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2b0c      	cmp	r3, #12
 80047c8:	d103      	bne.n	80047d2 <HAL_UART_RxCpltCallback+0xb3e>
											frame1=8;
 80047ca:	4b2a      	ldr	r3, [pc, #168]	@ (8004874 <HAL_UART_RxCpltCallback+0xbe0>)
 80047cc:	2208      	movs	r2, #8
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	e044      	b.n	800485c <HAL_UART_RxCpltCallback+0xbc8>
										}else if (running1 >= 16){
 80047d2:	4b27      	ldr	r3, [pc, #156]	@ (8004870 <HAL_UART_RxCpltCallback+0xbdc>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2b0f      	cmp	r3, #15
 80047d8:	dd40      	ble.n	800485c <HAL_UART_RxCpltCallback+0xbc8>
											frame1=7;
 80047da:	4b26      	ldr	r3, [pc, #152]	@ (8004874 <HAL_UART_RxCpltCallback+0xbe0>)
 80047dc:	2207      	movs	r2, #7
 80047de:	601a      	str	r2, [r3, #0]
											running1=0;
 80047e0:	4b23      	ldr	r3, [pc, #140]	@ (8004870 <HAL_UART_RxCpltCallback+0xbdc>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	601a      	str	r2, [r3, #0]
 80047e6:	e039      	b.n	800485c <HAL_UART_RxCpltCallback+0xbc8>
										}
									}
								}else if (shooting1 == 0){
 80047e8:	4b24      	ldr	r3, [pc, #144]	@ (800487c <HAL_UART_RxCpltCallback+0xbe8>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d135      	bne.n	800485c <HAL_UART_RxCpltCallback+0xbc8>
									x1 = x1-4;
 80047f0:	4b23      	ldr	r3, [pc, #140]	@ (8004880 <HAL_UART_RxCpltCallback+0xbec>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	3b04      	subs	r3, #4
 80047f6:	4a22      	ldr	r2, [pc, #136]	@ (8004880 <HAL_UART_RxCpltCallback+0xbec>)
 80047f8:	6013      	str	r3, [r2, #0]
									flip1 = 0;
 80047fa:	4b22      	ldr	r3, [pc, #136]	@ (8004884 <HAL_UART_RxCpltCallback+0xbf0>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	601a      	str	r2, [r3, #0]
									caminarI = 1;
 8004800:	4b21      	ldr	r3, [pc, #132]	@ (8004888 <HAL_UART_RxCpltCallback+0xbf4>)
 8004802:	2201      	movs	r2, #1
 8004804:	701a      	strb	r2, [r3, #0]
									//FillRect(x1-1, y1, 1, 25, 0xF800);
									if(caminarI == 1){
 8004806:	4b20      	ldr	r3, [pc, #128]	@ (8004888 <HAL_UART_RxCpltCallback+0xbf4>)
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d126      	bne.n	800485c <HAL_UART_RxCpltCallback+0xbc8>
										running1++;
 800480e:	4b18      	ldr	r3, [pc, #96]	@ (8004870 <HAL_UART_RxCpltCallback+0xbdc>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	3301      	adds	r3, #1
 8004814:	4a16      	ldr	r2, [pc, #88]	@ (8004870 <HAL_UART_RxCpltCallback+0xbdc>)
 8004816:	6013      	str	r3, [r2, #0]
										if (running1 == 4){
 8004818:	4b15      	ldr	r3, [pc, #84]	@ (8004870 <HAL_UART_RxCpltCallback+0xbdc>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b04      	cmp	r3, #4
 800481e:	d103      	bne.n	8004828 <HAL_UART_RxCpltCallback+0xb94>
											frame1=1;
 8004820:	4b14      	ldr	r3, [pc, #80]	@ (8004874 <HAL_UART_RxCpltCallback+0xbe0>)
 8004822:	2201      	movs	r2, #1
 8004824:	601a      	str	r2, [r3, #0]
 8004826:	e019      	b.n	800485c <HAL_UART_RxCpltCallback+0xbc8>
										}else if (running1 == 8){
 8004828:	4b11      	ldr	r3, [pc, #68]	@ (8004870 <HAL_UART_RxCpltCallback+0xbdc>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2b08      	cmp	r3, #8
 800482e:	d103      	bne.n	8004838 <HAL_UART_RxCpltCallback+0xba4>
											frame1=2;
 8004830:	4b10      	ldr	r3, [pc, #64]	@ (8004874 <HAL_UART_RxCpltCallback+0xbe0>)
 8004832:	2202      	movs	r2, #2
 8004834:	601a      	str	r2, [r3, #0]
 8004836:	e011      	b.n	800485c <HAL_UART_RxCpltCallback+0xbc8>
										}else if (running1 == 12){
 8004838:	4b0d      	ldr	r3, [pc, #52]	@ (8004870 <HAL_UART_RxCpltCallback+0xbdc>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b0c      	cmp	r3, #12
 800483e:	d103      	bne.n	8004848 <HAL_UART_RxCpltCallback+0xbb4>
											frame1=3;
 8004840:	4b0c      	ldr	r3, [pc, #48]	@ (8004874 <HAL_UART_RxCpltCallback+0xbe0>)
 8004842:	2203      	movs	r2, #3
 8004844:	601a      	str	r2, [r3, #0]
 8004846:	e009      	b.n	800485c <HAL_UART_RxCpltCallback+0xbc8>
										}else if (running1 >= 16){
 8004848:	4b09      	ldr	r3, [pc, #36]	@ (8004870 <HAL_UART_RxCpltCallback+0xbdc>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2b0f      	cmp	r3, #15
 800484e:	dd05      	ble.n	800485c <HAL_UART_RxCpltCallback+0xbc8>
											frame1=2;
 8004850:	4b08      	ldr	r3, [pc, #32]	@ (8004874 <HAL_UART_RxCpltCallback+0xbe0>)
 8004852:	2202      	movs	r2, #2
 8004854:	601a      	str	r2, [r3, #0]
											running1=0;
 8004856:	4b06      	ldr	r3, [pc, #24]	@ (8004870 <HAL_UART_RxCpltCallback+0xbdc>)
 8004858:	2200      	movs	r2, #0
 800485a:	601a      	str	r2, [r3, #0]
										}
									}
								}
							}
							if(x1 <= 2){
 800485c:	4b08      	ldr	r3, [pc, #32]	@ (8004880 <HAL_UART_RxCpltCallback+0xbec>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b02      	cmp	r3, #2
 8004862:	f300 8166 	bgt.w	8004b32 <HAL_UART_RxCpltCallback+0xe9e>
								x1 = 2;
 8004866:	4b06      	ldr	r3, [pc, #24]	@ (8004880 <HAL_UART_RxCpltCallback+0xbec>)
 8004868:	2202      	movs	r2, #2
 800486a:	601a      	str	r2, [r3, #0]
							}
							break;
 800486c:	e161      	b.n	8004b32 <HAL_UART_RxCpltCallback+0xe9e>
 800486e:	bf00      	nop
 8004870:	200140c0 	.word	0x200140c0
 8004874:	20012e38 	.word	0x20012e38
 8004878:	2001409a 	.word	0x2001409a
 800487c:	200140c4 	.word	0x200140c4
 8004880:	200140a0 	.word	0x200140a0
 8004884:	200140b0 	.word	0x200140b0
 8004888:	20014092 	.word	0x20014092
						case 'e':
							//strcpy(tx_buffer, "d\r\n");
							strcpy(tx_buffer, "e");
 800488c:	4b8f      	ldr	r3, [pc, #572]	@ (8004acc <HAL_UART_RxCpltCallback+0xe38>)
 800488e:	2265      	movs	r2, #101	@ 0x65
 8004890:	801a      	strh	r2, [r3, #0]
							transmit_uart3("z");
 8004892:	488f      	ldr	r0, [pc, #572]	@ (8004ad0 <HAL_UART_RxCpltCallback+0xe3c>)
 8004894:	f7ff f96e 	bl	8003b74 <transmit_uart3>
							if (ch1 == 1){
 8004898:	4b8e      	ldr	r3, [pc, #568]	@ (8004ad4 <HAL_UART_RxCpltCallback+0xe40>)
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d124      	bne.n	80048ea <HAL_UART_RxCpltCallback+0xc56>
								if (jumpcount1 != 2){
 80048a0:	4b8d      	ldr	r3, [pc, #564]	@ (8004ad8 <HAL_UART_RxCpltCallback+0xe44>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	f000 8146 	beq.w	8004b36 <HAL_UART_RxCpltCallback+0xea2>
									vY1 = -8;
 80048aa:	4b8c      	ldr	r3, [pc, #560]	@ (8004adc <HAL_UART_RxCpltCallback+0xe48>)
 80048ac:	f06f 0207 	mvn.w	r2, #7
 80048b0:	601a      	str	r2, [r3, #0]
									jump1 = 1;
 80048b2:	4b8b      	ldr	r3, [pc, #556]	@ (8004ae0 <HAL_UART_RxCpltCallback+0xe4c>)
 80048b4:	2201      	movs	r2, #1
 80048b6:	601a      	str	r2, [r3, #0]
									jumpcount1++;
 80048b8:	4b87      	ldr	r3, [pc, #540]	@ (8004ad8 <HAL_UART_RxCpltCallback+0xe44>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	3301      	adds	r3, #1
 80048be:	4a86      	ldr	r2, [pc, #536]	@ (8004ad8 <HAL_UART_RxCpltCallback+0xe44>)
 80048c0:	6013      	str	r3, [r2, #0]
									falling1 = 0;
 80048c2:	4b88      	ldr	r3, [pc, #544]	@ (8004ae4 <HAL_UART_RxCpltCallback+0xe50>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	601a      	str	r2, [r3, #0]
									if (shooting1 == 0){
 80048c8:	4b87      	ldr	r3, [pc, #540]	@ (8004ae8 <HAL_UART_RxCpltCallback+0xe54>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d103      	bne.n	80048d8 <HAL_UART_RxCpltCallback+0xc44>
										frame1 = 4;
 80048d0:	4b86      	ldr	r3, [pc, #536]	@ (8004aec <HAL_UART_RxCpltCallback+0xe58>)
 80048d2:	2204      	movs	r2, #4
 80048d4:	601a      	str	r2, [r3, #0]
									}else if (shooting1 == 1){
										frame1 = 9;
									}
								}
							}
							break;
 80048d6:	e12e      	b.n	8004b36 <HAL_UART_RxCpltCallback+0xea2>
									}else if (shooting1 == 1){
 80048d8:	4b83      	ldr	r3, [pc, #524]	@ (8004ae8 <HAL_UART_RxCpltCallback+0xe54>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	f040 812a 	bne.w	8004b36 <HAL_UART_RxCpltCallback+0xea2>
										frame1 = 9;
 80048e2:	4b82      	ldr	r3, [pc, #520]	@ (8004aec <HAL_UART_RxCpltCallback+0xe58>)
 80048e4:	2209      	movs	r2, #9
 80048e6:	601a      	str	r2, [r3, #0]
							break;
 80048e8:	e125      	b.n	8004b36 <HAL_UART_RxCpltCallback+0xea2>
							}else if (ch1 == 5){
 80048ea:	4b7a      	ldr	r3, [pc, #488]	@ (8004ad4 <HAL_UART_RxCpltCallback+0xe40>)
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	2b05      	cmp	r3, #5
 80048f0:	d12c      	bne.n	800494c <HAL_UART_RxCpltCallback+0xcb8>
								if (jumpcount1 != 2){
 80048f2:	4b79      	ldr	r3, [pc, #484]	@ (8004ad8 <HAL_UART_RxCpltCallback+0xe44>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	f000 811d 	beq.w	8004b36 <HAL_UART_RxCpltCallback+0xea2>
									vY1 = -8;
 80048fc:	4b77      	ldr	r3, [pc, #476]	@ (8004adc <HAL_UART_RxCpltCallback+0xe48>)
 80048fe:	f06f 0207 	mvn.w	r2, #7
 8004902:	601a      	str	r2, [r3, #0]
									jump1 = 1;
 8004904:	4b76      	ldr	r3, [pc, #472]	@ (8004ae0 <HAL_UART_RxCpltCallback+0xe4c>)
 8004906:	2201      	movs	r2, #1
 8004908:	601a      	str	r2, [r3, #0]
									jumpcount1++;
 800490a:	4b73      	ldr	r3, [pc, #460]	@ (8004ad8 <HAL_UART_RxCpltCallback+0xe44>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	3301      	adds	r3, #1
 8004910:	4a71      	ldr	r2, [pc, #452]	@ (8004ad8 <HAL_UART_RxCpltCallback+0xe44>)
 8004912:	6013      	str	r3, [r2, #0]
									falling1 = 0;
 8004914:	4b73      	ldr	r3, [pc, #460]	@ (8004ae4 <HAL_UART_RxCpltCallback+0xe50>)
 8004916:	2200      	movs	r2, #0
 8004918:	601a      	str	r2, [r3, #0]
									if (shooting1 == 0){
 800491a:	4b73      	ldr	r3, [pc, #460]	@ (8004ae8 <HAL_UART_RxCpltCallback+0xe54>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d103      	bne.n	800492a <HAL_UART_RxCpltCallback+0xc96>
										frame1 = 4;
 8004922:	4b72      	ldr	r3, [pc, #456]	@ (8004aec <HAL_UART_RxCpltCallback+0xe58>)
 8004924:	2204      	movs	r2, #4
 8004926:	601a      	str	r2, [r3, #0]
							break;
 8004928:	e105      	b.n	8004b36 <HAL_UART_RxCpltCallback+0xea2>
									}else if (shooting1 == 1){
 800492a:	4b6f      	ldr	r3, [pc, #444]	@ (8004ae8 <HAL_UART_RxCpltCallback+0xe54>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d103      	bne.n	800493a <HAL_UART_RxCpltCallback+0xca6>
										frame1 = 4;
 8004932:	4b6e      	ldr	r3, [pc, #440]	@ (8004aec <HAL_UART_RxCpltCallback+0xe58>)
 8004934:	2204      	movs	r2, #4
 8004936:	601a      	str	r2, [r3, #0]
							break;
 8004938:	e0fd      	b.n	8004b36 <HAL_UART_RxCpltCallback+0xea2>
									}else if (shooting1 == 2){
 800493a:	4b6b      	ldr	r3, [pc, #428]	@ (8004ae8 <HAL_UART_RxCpltCallback+0xe54>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2b02      	cmp	r3, #2
 8004940:	f040 80f9 	bne.w	8004b36 <HAL_UART_RxCpltCallback+0xea2>
										frame1 = 8;
 8004944:	4b69      	ldr	r3, [pc, #420]	@ (8004aec <HAL_UART_RxCpltCallback+0xe58>)
 8004946:	2208      	movs	r2, #8
 8004948:	601a      	str	r2, [r3, #0]
							break;
 800494a:	e0f4      	b.n	8004b36 <HAL_UART_RxCpltCallback+0xea2>
							}else if (ch1 == 8){
 800494c:	4b61      	ldr	r3, [pc, #388]	@ (8004ad4 <HAL_UART_RxCpltCallback+0xe40>)
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	2b08      	cmp	r3, #8
 8004952:	d124      	bne.n	800499e <HAL_UART_RxCpltCallback+0xd0a>
								if (jumpcount1 != 2){
 8004954:	4b60      	ldr	r3, [pc, #384]	@ (8004ad8 <HAL_UART_RxCpltCallback+0xe44>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b02      	cmp	r3, #2
 800495a:	f000 80ec 	beq.w	8004b36 <HAL_UART_RxCpltCallback+0xea2>
									vY1 = -8;
 800495e:	4b5f      	ldr	r3, [pc, #380]	@ (8004adc <HAL_UART_RxCpltCallback+0xe48>)
 8004960:	f06f 0207 	mvn.w	r2, #7
 8004964:	601a      	str	r2, [r3, #0]
									jump1 = 1;
 8004966:	4b5e      	ldr	r3, [pc, #376]	@ (8004ae0 <HAL_UART_RxCpltCallback+0xe4c>)
 8004968:	2201      	movs	r2, #1
 800496a:	601a      	str	r2, [r3, #0]
									jumpcount1++;
 800496c:	4b5a      	ldr	r3, [pc, #360]	@ (8004ad8 <HAL_UART_RxCpltCallback+0xe44>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	3301      	adds	r3, #1
 8004972:	4a59      	ldr	r2, [pc, #356]	@ (8004ad8 <HAL_UART_RxCpltCallback+0xe44>)
 8004974:	6013      	str	r3, [r2, #0]
									falling1 = 0;
 8004976:	4b5b      	ldr	r3, [pc, #364]	@ (8004ae4 <HAL_UART_RxCpltCallback+0xe50>)
 8004978:	2200      	movs	r2, #0
 800497a:	601a      	str	r2, [r3, #0]
									if (shooting1 == 0){
 800497c:	4b5a      	ldr	r3, [pc, #360]	@ (8004ae8 <HAL_UART_RxCpltCallback+0xe54>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d103      	bne.n	800498c <HAL_UART_RxCpltCallback+0xcf8>
										frame1 = 4;
 8004984:	4b59      	ldr	r3, [pc, #356]	@ (8004aec <HAL_UART_RxCpltCallback+0xe58>)
 8004986:	2204      	movs	r2, #4
 8004988:	601a      	str	r2, [r3, #0]
							break;
 800498a:	e0d4      	b.n	8004b36 <HAL_UART_RxCpltCallback+0xea2>
									}else if (shooting1 == 1){
 800498c:	4b56      	ldr	r3, [pc, #344]	@ (8004ae8 <HAL_UART_RxCpltCallback+0xe54>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2b01      	cmp	r3, #1
 8004992:	f040 80d0 	bne.w	8004b36 <HAL_UART_RxCpltCallback+0xea2>
										frame1 = 9;
 8004996:	4b55      	ldr	r3, [pc, #340]	@ (8004aec <HAL_UART_RxCpltCallback+0xe58>)
 8004998:	2209      	movs	r2, #9
 800499a:	601a      	str	r2, [r3, #0]
							break;
 800499c:	e0cb      	b.n	8004b36 <HAL_UART_RxCpltCallback+0xea2>
							}else if (ch1 == 9){
 800499e:	4b4d      	ldr	r3, [pc, #308]	@ (8004ad4 <HAL_UART_RxCpltCallback+0xe40>)
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	2b09      	cmp	r3, #9
 80049a4:	f040 80c7 	bne.w	8004b36 <HAL_UART_RxCpltCallback+0xea2>
								if (jumpcount1 != 2){
 80049a8:	4b4b      	ldr	r3, [pc, #300]	@ (8004ad8 <HAL_UART_RxCpltCallback+0xe44>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	f000 80c2 	beq.w	8004b36 <HAL_UART_RxCpltCallback+0xea2>
									vY1 = -8;
 80049b2:	4b4a      	ldr	r3, [pc, #296]	@ (8004adc <HAL_UART_RxCpltCallback+0xe48>)
 80049b4:	f06f 0207 	mvn.w	r2, #7
 80049b8:	601a      	str	r2, [r3, #0]
									jump1 = 1;
 80049ba:	4b49      	ldr	r3, [pc, #292]	@ (8004ae0 <HAL_UART_RxCpltCallback+0xe4c>)
 80049bc:	2201      	movs	r2, #1
 80049be:	601a      	str	r2, [r3, #0]
									jumpcount1++;
 80049c0:	4b45      	ldr	r3, [pc, #276]	@ (8004ad8 <HAL_UART_RxCpltCallback+0xe44>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	3301      	adds	r3, #1
 80049c6:	4a44      	ldr	r2, [pc, #272]	@ (8004ad8 <HAL_UART_RxCpltCallback+0xe44>)
 80049c8:	6013      	str	r3, [r2, #0]
									falling1 = 0;
 80049ca:	4b46      	ldr	r3, [pc, #280]	@ (8004ae4 <HAL_UART_RxCpltCallback+0xe50>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	601a      	str	r2, [r3, #0]
									if (shooting1 == 0){
 80049d0:	4b45      	ldr	r3, [pc, #276]	@ (8004ae8 <HAL_UART_RxCpltCallback+0xe54>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d103      	bne.n	80049e0 <HAL_UART_RxCpltCallback+0xd4c>
										frame1 = 4;
 80049d8:	4b44      	ldr	r3, [pc, #272]	@ (8004aec <HAL_UART_RxCpltCallback+0xe58>)
 80049da:	2204      	movs	r2, #4
 80049dc:	601a      	str	r2, [r3, #0]
							break;
 80049de:	e0aa      	b.n	8004b36 <HAL_UART_RxCpltCallback+0xea2>
									}else if (shooting1 == 1){
 80049e0:	4b41      	ldr	r3, [pc, #260]	@ (8004ae8 <HAL_UART_RxCpltCallback+0xe54>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	f040 80a6 	bne.w	8004b36 <HAL_UART_RxCpltCallback+0xea2>
										frame1 = 9;
 80049ea:	4b40      	ldr	r3, [pc, #256]	@ (8004aec <HAL_UART_RxCpltCallback+0xe58>)
 80049ec:	2209      	movs	r2, #9
 80049ee:	601a      	str	r2, [r3, #0]
							break;
 80049f0:	e0a1      	b.n	8004b36 <HAL_UART_RxCpltCallback+0xea2>
						case 'q':
							strcpy(tx_buffer, "q");
 80049f2:	4b36      	ldr	r3, [pc, #216]	@ (8004acc <HAL_UART_RxCpltCallback+0xe38>)
 80049f4:	2271      	movs	r2, #113	@ 0x71
 80049f6:	801a      	strh	r2, [r3, #0]
							transmit_uart3("s");
 80049f8:	483d      	ldr	r0, [pc, #244]	@ (8004af0 <HAL_UART_RxCpltCallback+0xe5c>)
 80049fa:	f7ff f8bb 	bl	8003b74 <transmit_uart3>
							if (ch1==1){
 80049fe:	4b35      	ldr	r3, [pc, #212]	@ (8004ad4 <HAL_UART_RxCpltCallback+0xe40>)
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d109      	bne.n	8004a1a <HAL_UART_RxCpltCallback+0xd86>
								shooting1 = 1;
 8004a06:	4b38      	ldr	r3, [pc, #224]	@ (8004ae8 <HAL_UART_RxCpltCallback+0xe54>)
 8004a08:	2201      	movs	r2, #1
 8004a0a:	601a      	str	r2, [r3, #0]
								frame1 = 5;
 8004a0c:	4b37      	ldr	r3, [pc, #220]	@ (8004aec <HAL_UART_RxCpltCallback+0xe58>)
 8004a0e:	2205      	movs	r2, #5
 8004a10:	601a      	str	r2, [r3, #0]
								bala = 1;
 8004a12:	4b38      	ldr	r3, [pc, #224]	@ (8004af4 <HAL_UART_RxCpltCallback+0xe60>)
 8004a14:	2201      	movs	r2, #1
 8004a16:	601a      	str	r2, [r3, #0]
							}else if (ch1 == 9){
								shooting1 = 1;
								frame1 = 5;
								bala = 1;
							}
							break;
 8004a18:	e08f      	b.n	8004b3a <HAL_UART_RxCpltCallback+0xea6>
							}else if (ch1 == 5){
 8004a1a:	4b2e      	ldr	r3, [pc, #184]	@ (8004ad4 <HAL_UART_RxCpltCallback+0xe40>)
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	2b05      	cmp	r3, #5
 8004a20:	d133      	bne.n	8004a8a <HAL_UART_RxCpltCallback+0xdf6>
								shooting1++;
 8004a22:	4b31      	ldr	r3, [pc, #196]	@ (8004ae8 <HAL_UART_RxCpltCallback+0xe54>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	3301      	adds	r3, #1
 8004a28:	4a2f      	ldr	r2, [pc, #188]	@ (8004ae8 <HAL_UART_RxCpltCallback+0xe54>)
 8004a2a:	6013      	str	r3, [r2, #0]
								if (jump1 == 1 && shooting1 == 3){
 8004a2c:	4b2c      	ldr	r3, [pc, #176]	@ (8004ae0 <HAL_UART_RxCpltCallback+0xe4c>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d10c      	bne.n	8004a4e <HAL_UART_RxCpltCallback+0xdba>
 8004a34:	4b2c      	ldr	r3, [pc, #176]	@ (8004ae8 <HAL_UART_RxCpltCallback+0xe54>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2b03      	cmp	r3, #3
 8004a3a:	d108      	bne.n	8004a4e <HAL_UART_RxCpltCallback+0xdba>
									frame1 = 9;
 8004a3c:	4b2b      	ldr	r3, [pc, #172]	@ (8004aec <HAL_UART_RxCpltCallback+0xe58>)
 8004a3e:	2209      	movs	r2, #9
 8004a40:	601a      	str	r2, [r3, #0]
									bala = 1;
 8004a42:	4b2c      	ldr	r3, [pc, #176]	@ (8004af4 <HAL_UART_RxCpltCallback+0xe60>)
 8004a44:	2201      	movs	r2, #1
 8004a46:	601a      	str	r2, [r3, #0]
									shooting1 = 0;
 8004a48:	4b27      	ldr	r3, [pc, #156]	@ (8004ae8 <HAL_UART_RxCpltCallback+0xe54>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	601a      	str	r2, [r3, #0]
								if (shooting1==1){
 8004a4e:	4b26      	ldr	r3, [pc, #152]	@ (8004ae8 <HAL_UART_RxCpltCallback+0xe54>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d103      	bne.n	8004a5e <HAL_UART_RxCpltCallback+0xdca>
									frame1 = 5;
 8004a56:	4b25      	ldr	r3, [pc, #148]	@ (8004aec <HAL_UART_RxCpltCallback+0xe58>)
 8004a58:	2205      	movs	r2, #5
 8004a5a:	601a      	str	r2, [r3, #0]
							break;
 8004a5c:	e06d      	b.n	8004b3a <HAL_UART_RxCpltCallback+0xea6>
								}else if (shooting1==2){
 8004a5e:	4b22      	ldr	r3, [pc, #136]	@ (8004ae8 <HAL_UART_RxCpltCallback+0xe54>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d103      	bne.n	8004a6e <HAL_UART_RxCpltCallback+0xdda>
									frame1 = 6;
 8004a66:	4b21      	ldr	r3, [pc, #132]	@ (8004aec <HAL_UART_RxCpltCallback+0xe58>)
 8004a68:	2206      	movs	r2, #6
 8004a6a:	601a      	str	r2, [r3, #0]
							break;
 8004a6c:	e065      	b.n	8004b3a <HAL_UART_RxCpltCallback+0xea6>
								}else if (shooting1 == 3){
 8004a6e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ae8 <HAL_UART_RxCpltCallback+0xe54>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2b03      	cmp	r3, #3
 8004a74:	d161      	bne.n	8004b3a <HAL_UART_RxCpltCallback+0xea6>
									frame1 = 7;
 8004a76:	4b1d      	ldr	r3, [pc, #116]	@ (8004aec <HAL_UART_RxCpltCallback+0xe58>)
 8004a78:	2207      	movs	r2, #7
 8004a7a:	601a      	str	r2, [r3, #0]
									bala = 1;
 8004a7c:	4b1d      	ldr	r3, [pc, #116]	@ (8004af4 <HAL_UART_RxCpltCallback+0xe60>)
 8004a7e:	2201      	movs	r2, #1
 8004a80:	601a      	str	r2, [r3, #0]
									shooting1 = 0;
 8004a82:	4b19      	ldr	r3, [pc, #100]	@ (8004ae8 <HAL_UART_RxCpltCallback+0xe54>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	601a      	str	r2, [r3, #0]
							break;
 8004a88:	e057      	b.n	8004b3a <HAL_UART_RxCpltCallback+0xea6>
							}else if (ch1 == 8){
 8004a8a:	4b12      	ldr	r3, [pc, #72]	@ (8004ad4 <HAL_UART_RxCpltCallback+0xe40>)
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	2b08      	cmp	r3, #8
 8004a90:	d109      	bne.n	8004aa6 <HAL_UART_RxCpltCallback+0xe12>
								shooting1 = 1;
 8004a92:	4b15      	ldr	r3, [pc, #84]	@ (8004ae8 <HAL_UART_RxCpltCallback+0xe54>)
 8004a94:	2201      	movs	r2, #1
 8004a96:	601a      	str	r2, [r3, #0]
								frame1 = 5;
 8004a98:	4b14      	ldr	r3, [pc, #80]	@ (8004aec <HAL_UART_RxCpltCallback+0xe58>)
 8004a9a:	2205      	movs	r2, #5
 8004a9c:	601a      	str	r2, [r3, #0]
								bala = 1;
 8004a9e:	4b15      	ldr	r3, [pc, #84]	@ (8004af4 <HAL_UART_RxCpltCallback+0xe60>)
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	601a      	str	r2, [r3, #0]
							break;
 8004aa4:	e049      	b.n	8004b3a <HAL_UART_RxCpltCallback+0xea6>
							}else if (ch1 == 9){
 8004aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8004ad4 <HAL_UART_RxCpltCallback+0xe40>)
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	2b09      	cmp	r3, #9
 8004aac:	d145      	bne.n	8004b3a <HAL_UART_RxCpltCallback+0xea6>
								shooting1 = 1;
 8004aae:	4b0e      	ldr	r3, [pc, #56]	@ (8004ae8 <HAL_UART_RxCpltCallback+0xe54>)
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	601a      	str	r2, [r3, #0]
								frame1 = 5;
 8004ab4:	4b0d      	ldr	r3, [pc, #52]	@ (8004aec <HAL_UART_RxCpltCallback+0xe58>)
 8004ab6:	2205      	movs	r2, #5
 8004ab8:	601a      	str	r2, [r3, #0]
								bala = 1;
 8004aba:	4b0e      	ldr	r3, [pc, #56]	@ (8004af4 <HAL_UART_RxCpltCallback+0xe60>)
 8004abc:	2201      	movs	r2, #1
 8004abe:	601a      	str	r2, [r3, #0]
							break;
 8004ac0:	e03b      	b.n	8004b3a <HAL_UART_RxCpltCallback+0xea6>
						case 'x':
							strcpy(tx_buffer, "x");
 8004ac2:	4b02      	ldr	r3, [pc, #8]	@ (8004acc <HAL_UART_RxCpltCallback+0xe38>)
 8004ac4:	2278      	movs	r2, #120	@ 0x78
 8004ac6:	801a      	strh	r2, [r3, #0]
							break;
 8004ac8:	e03a      	b.n	8004b40 <HAL_UART_RxCpltCallback+0xeac>
 8004aca:	bf00      	nop
 8004acc:	20012f10 	.word	0x20012f10
 8004ad0:	0800970c 	.word	0x0800970c
 8004ad4:	2001409a 	.word	0x2001409a
 8004ad8:	200140bc 	.word	0x200140bc
 8004adc:	200140b4 	.word	0x200140b4
 8004ae0:	200140b8 	.word	0x200140b8
 8004ae4:	20012e3c 	.word	0x20012e3c
 8004ae8:	200140c4 	.word	0x200140c4
 8004aec:	20012e38 	.word	0x20012e38
 8004af0:	08009710 	.word	0x08009710
 8004af4:	200140d8 	.word	0x200140d8
						default:
							break;
						}
			}else if (modo == 8){
 8004af8:	4b99      	ldr	r3, [pc, #612]	@ (8004d60 <HAL_UART_RxCpltCallback+0x10cc>)
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	2b08      	cmp	r3, #8
 8004afe:	d11f      	bne.n	8004b40 <HAL_UART_RxCpltCallback+0xeac>
				switch (option[0]){
 8004b00:	4b98      	ldr	r3, [pc, #608]	@ (8004d64 <HAL_UART_RxCpltCallback+0x10d0>)
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	2b78      	cmp	r3, #120	@ 0x78
 8004b06:	d11a      	bne.n	8004b3e <HAL_UART_RxCpltCallback+0xeaa>
				case 'x':
					strcpy(tx_buffer, "x");
 8004b08:	4b97      	ldr	r3, [pc, #604]	@ (8004d68 <HAL_UART_RxCpltCallback+0x10d4>)
 8004b0a:	2278      	movs	r2, #120	@ 0x78
 8004b0c:	801a      	strh	r2, [r3, #0]
					start = 1;
 8004b0e:	4b97      	ldr	r3, [pc, #604]	@ (8004d6c <HAL_UART_RxCpltCallback+0x10d8>)
 8004b10:	2201      	movs	r2, #1
 8004b12:	701a      	strb	r2, [r3, #0]
					break;
 8004b14:	e014      	b.n	8004b40 <HAL_UART_RxCpltCallback+0xeac>
							break;
 8004b16:	bf00      	nop
 8004b18:	e012      	b.n	8004b40 <HAL_UART_RxCpltCallback+0xeac>
							break;
 8004b1a:	bf00      	nop
 8004b1c:	e010      	b.n	8004b40 <HAL_UART_RxCpltCallback+0xeac>
							break;
 8004b1e:	bf00      	nop
 8004b20:	e00e      	b.n	8004b40 <HAL_UART_RxCpltCallback+0xeac>
							break;
 8004b22:	bf00      	nop
 8004b24:	e00c      	b.n	8004b40 <HAL_UART_RxCpltCallback+0xeac>
							break;
 8004b26:	bf00      	nop
 8004b28:	e00a      	b.n	8004b40 <HAL_UART_RxCpltCallback+0xeac>
							break;
 8004b2a:	bf00      	nop
 8004b2c:	e008      	b.n	8004b40 <HAL_UART_RxCpltCallback+0xeac>
							break;
 8004b2e:	bf00      	nop
 8004b30:	e006      	b.n	8004b40 <HAL_UART_RxCpltCallback+0xeac>
							break;
 8004b32:	bf00      	nop
 8004b34:	e004      	b.n	8004b40 <HAL_UART_RxCpltCallback+0xeac>
							break;
 8004b36:	bf00      	nop
 8004b38:	e002      	b.n	8004b40 <HAL_UART_RxCpltCallback+0xeac>
							break;
 8004b3a:	bf00      	nop
 8004b3c:	e000      	b.n	8004b40 <HAL_UART_RxCpltCallback+0xeac>
					default:
					break;
 8004b3e:	bf00      	nop
				}
			}
			//HAL_UART_Transmit(&huart2, tx_buffer, strlen(tx_buffer), 10);
			HAL_UART_Receive_IT(&huart3, option, 1);  // EMPEZAR RECEPCIÓN
 8004b40:	2201      	movs	r2, #1
 8004b42:	4988      	ldr	r1, [pc, #544]	@ (8004d64 <HAL_UART_RxCpltCallback+0x10d0>)
 8004b44:	488a      	ldr	r0, [pc, #552]	@ (8004d70 <HAL_UART_RxCpltCallback+0x10dc>)
 8004b46:	f002 fbc3 	bl	80072d0 <HAL_UART_Receive_IT>
		}		//SI LA INTERRUPCIÓN VIENE DEL UART5
	if(huart->Instance == UART5){
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a89      	ldr	r2, [pc, #548]	@ (8004d74 <HAL_UART_RxCpltCallback+0x10e0>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	f040 86cc 	bne.w	80058ee <HAL_UART_RxCpltCallback+0x1c5a>
			if (modo == 0){
 8004b56:	4b82      	ldr	r3, [pc, #520]	@ (8004d60 <HAL_UART_RxCpltCallback+0x10cc>)
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10b      	bne.n	8004b76 <HAL_UART_RxCpltCallback+0xee2>
				switch (option2[0]){
 8004b5e:	4b86      	ldr	r3, [pc, #536]	@ (8004d78 <HAL_UART_RxCpltCallback+0x10e4>)
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	2b6d      	cmp	r3, #109	@ 0x6d
 8004b64:	d106      	bne.n	8004b74 <HAL_UART_RxCpltCallback+0xee0>
						case 'm':
							strcpy(tx_buffer, "m");
 8004b66:	4b80      	ldr	r3, [pc, #512]	@ (8004d68 <HAL_UART_RxCpltCallback+0x10d4>)
 8004b68:	226d      	movs	r2, #109	@ 0x6d
 8004b6a:	801a      	strh	r2, [r3, #0]
							start = 1;
 8004b6c:	4b7f      	ldr	r3, [pc, #508]	@ (8004d6c <HAL_UART_RxCpltCallback+0x10d8>)
 8004b6e:	2201      	movs	r2, #1
 8004b70:	701a      	strb	r2, [r3, #0]
							break;
 8004b72:	e000      	b.n	8004b76 <HAL_UART_RxCpltCallback+0xee2>
						default:
							break;
 8004b74:	bf00      	nop
						}
			}if (modo == 2){
 8004b76:	4b7a      	ldr	r3, [pc, #488]	@ (8004d60 <HAL_UART_RxCpltCallback+0x10cc>)
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	f040 813f 	bne.w	8004dfe <HAL_UART_RxCpltCallback+0x116a>
				switch (option2[0]){
 8004b80:	4b7d      	ldr	r3, [pc, #500]	@ (8004d78 <HAL_UART_RxCpltCallback+0x10e4>)
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	3b69      	subs	r3, #105	@ 0x69
 8004b86:	2b0c      	cmp	r3, #12
 8004b88:	f200 8697 	bhi.w	80058ba <HAL_UART_RxCpltCallback+0x1c26>
 8004b8c:	a201      	add	r2, pc, #4	@ (adr r2, 8004b94 <HAL_UART_RxCpltCallback+0xf00>)
 8004b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b92:	bf00      	nop
 8004b94:	08004bc9 	.word	0x08004bc9
 8004b98:	08004c35 	.word	0x08004c35
 8004b9c:	08004ca1 	.word	0x08004ca1
 8004ba0:	08004d0d 	.word	0x08004d0d
 8004ba4:	08004de9 	.word	0x08004de9
 8004ba8:	080058bb 	.word	0x080058bb
 8004bac:	08004db7 	.word	0x08004db7
 8004bb0:	080058bb 	.word	0x080058bb
 8004bb4:	080058bb 	.word	0x080058bb
 8004bb8:	080058bb 	.word	0x080058bb
 8004bbc:	080058bb 	.word	0x080058bb
 8004bc0:	080058bb 	.word	0x080058bb
 8004bc4:	08004dcd 	.word	0x08004dcd
						case 'i':
							strcpy(tx_buffer, "i");
 8004bc8:	4b67      	ldr	r3, [pc, #412]	@ (8004d68 <HAL_UART_RxCpltCallback+0x10d4>)
 8004bca:	2269      	movs	r2, #105	@ 0x69
 8004bcc:	801a      	strh	r2, [r3, #0]
							if (chselect2 != 1){
 8004bce:	4b6b      	ldr	r3, [pc, #428]	@ (8004d7c <HAL_UART_RxCpltCallback+0x10e8>)
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	f000 8673 	beq.w	80058be <HAL_UART_RxCpltCallback+0x1c2a>
								selector2xAntiguo = selector2x;
 8004bd8:	4b69      	ldr	r3, [pc, #420]	@ (8004d80 <HAL_UART_RxCpltCallback+0x10ec>)
 8004bda:	781a      	ldrb	r2, [r3, #0]
 8004bdc:	4b69      	ldr	r3, [pc, #420]	@ (8004d84 <HAL_UART_RxCpltCallback+0x10f0>)
 8004bde:	701a      	strb	r2, [r3, #0]
								selector2yAntiguo = selector2y;
 8004be0:	4b69      	ldr	r3, [pc, #420]	@ (8004d88 <HAL_UART_RxCpltCallback+0x10f4>)
 8004be2:	781a      	ldrb	r2, [r3, #0]
 8004be4:	4b69      	ldr	r3, [pc, #420]	@ (8004d8c <HAL_UART_RxCpltCallback+0x10f8>)
 8004be6:	701a      	strb	r2, [r3, #0]
								selector2y--;
 8004be8:	4b67      	ldr	r3, [pc, #412]	@ (8004d88 <HAL_UART_RxCpltCallback+0x10f4>)
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	3b01      	subs	r3, #1
 8004bee:	b2da      	uxtb	r2, r3
 8004bf0:	4b65      	ldr	r3, [pc, #404]	@ (8004d88 <HAL_UART_RxCpltCallback+0x10f4>)
 8004bf2:	701a      	strb	r2, [r3, #0]
								if (selector1x == selector2x && selector1y == selector2y){
 8004bf4:	4b66      	ldr	r3, [pc, #408]	@ (8004d90 <HAL_UART_RxCpltCallback+0x10fc>)
 8004bf6:	781a      	ldrb	r2, [r3, #0]
 8004bf8:	4b61      	ldr	r3, [pc, #388]	@ (8004d80 <HAL_UART_RxCpltCallback+0x10ec>)
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d10c      	bne.n	8004c1a <HAL_UART_RxCpltCallback+0xf86>
 8004c00:	4b64      	ldr	r3, [pc, #400]	@ (8004d94 <HAL_UART_RxCpltCallback+0x1100>)
 8004c02:	781a      	ldrb	r2, [r3, #0]
 8004c04:	4b60      	ldr	r3, [pc, #384]	@ (8004d88 <HAL_UART_RxCpltCallback+0x10f4>)
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d106      	bne.n	8004c1a <HAL_UART_RxCpltCallback+0xf86>
									selector2y++;
 8004c0c:	4b5e      	ldr	r3, [pc, #376]	@ (8004d88 <HAL_UART_RxCpltCallback+0x10f4>)
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	3301      	adds	r3, #1
 8004c12:	b2da      	uxtb	r2, r3
 8004c14:	4b5c      	ldr	r3, [pc, #368]	@ (8004d88 <HAL_UART_RxCpltCallback+0x10f4>)
 8004c16:	701a      	strb	r2, [r3, #0]
 8004c18:	e002      	b.n	8004c20 <HAL_UART_RxCpltCallback+0xf8c>
								}else{
									change2=1;
 8004c1a:	4b5f      	ldr	r3, [pc, #380]	@ (8004d98 <HAL_UART_RxCpltCallback+0x1104>)
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	701a      	strb	r2, [r3, #0]
								}
								if (selector2y <= 0){
 8004c20:	4b59      	ldr	r3, [pc, #356]	@ (8004d88 <HAL_UART_RxCpltCallback+0x10f4>)
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f040 864a 	bne.w	80058be <HAL_UART_RxCpltCallback+0x1c2a>
									selector2y = 1;
 8004c2a:	4b57      	ldr	r3, [pc, #348]	@ (8004d88 <HAL_UART_RxCpltCallback+0x10f4>)
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	701a      	strb	r2, [r3, #0]
								}
							}
							break;
 8004c30:	f000 be45 	b.w	80058be <HAL_UART_RxCpltCallback+0x1c2a>
						case 'j':
							strcpy(tx_buffer, "j");
 8004c34:	4b4c      	ldr	r3, [pc, #304]	@ (8004d68 <HAL_UART_RxCpltCallback+0x10d4>)
 8004c36:	226a      	movs	r2, #106	@ 0x6a
 8004c38:	801a      	strh	r2, [r3, #0]
							if (chselect2 != 1){
 8004c3a:	4b50      	ldr	r3, [pc, #320]	@ (8004d7c <HAL_UART_RxCpltCallback+0x10e8>)
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	f000 863f 	beq.w	80058c2 <HAL_UART_RxCpltCallback+0x1c2e>
								selector2xAntiguo = selector2x;
 8004c44:	4b4e      	ldr	r3, [pc, #312]	@ (8004d80 <HAL_UART_RxCpltCallback+0x10ec>)
 8004c46:	781a      	ldrb	r2, [r3, #0]
 8004c48:	4b4e      	ldr	r3, [pc, #312]	@ (8004d84 <HAL_UART_RxCpltCallback+0x10f0>)
 8004c4a:	701a      	strb	r2, [r3, #0]
								selector2yAntiguo = selector2y;
 8004c4c:	4b4e      	ldr	r3, [pc, #312]	@ (8004d88 <HAL_UART_RxCpltCallback+0x10f4>)
 8004c4e:	781a      	ldrb	r2, [r3, #0]
 8004c50:	4b4e      	ldr	r3, [pc, #312]	@ (8004d8c <HAL_UART_RxCpltCallback+0x10f8>)
 8004c52:	701a      	strb	r2, [r3, #0]
								selector2x--;
 8004c54:	4b4a      	ldr	r3, [pc, #296]	@ (8004d80 <HAL_UART_RxCpltCallback+0x10ec>)
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	b2da      	uxtb	r2, r3
 8004c5c:	4b48      	ldr	r3, [pc, #288]	@ (8004d80 <HAL_UART_RxCpltCallback+0x10ec>)
 8004c5e:	701a      	strb	r2, [r3, #0]
								if (selector1x == selector2x && selector1y == selector2y){
 8004c60:	4b4b      	ldr	r3, [pc, #300]	@ (8004d90 <HAL_UART_RxCpltCallback+0x10fc>)
 8004c62:	781a      	ldrb	r2, [r3, #0]
 8004c64:	4b46      	ldr	r3, [pc, #280]	@ (8004d80 <HAL_UART_RxCpltCallback+0x10ec>)
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d10c      	bne.n	8004c86 <HAL_UART_RxCpltCallback+0xff2>
 8004c6c:	4b49      	ldr	r3, [pc, #292]	@ (8004d94 <HAL_UART_RxCpltCallback+0x1100>)
 8004c6e:	781a      	ldrb	r2, [r3, #0]
 8004c70:	4b45      	ldr	r3, [pc, #276]	@ (8004d88 <HAL_UART_RxCpltCallback+0x10f4>)
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d106      	bne.n	8004c86 <HAL_UART_RxCpltCallback+0xff2>
									selector2x++;
 8004c78:	4b41      	ldr	r3, [pc, #260]	@ (8004d80 <HAL_UART_RxCpltCallback+0x10ec>)
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	b2da      	uxtb	r2, r3
 8004c80:	4b3f      	ldr	r3, [pc, #252]	@ (8004d80 <HAL_UART_RxCpltCallback+0x10ec>)
 8004c82:	701a      	strb	r2, [r3, #0]
 8004c84:	e002      	b.n	8004c8c <HAL_UART_RxCpltCallback+0xff8>
								}else{
									change2=1;
 8004c86:	4b44      	ldr	r3, [pc, #272]	@ (8004d98 <HAL_UART_RxCpltCallback+0x1104>)
 8004c88:	2201      	movs	r2, #1
 8004c8a:	701a      	strb	r2, [r3, #0]
								}
								if (selector2x <= 0){
 8004c8c:	4b3c      	ldr	r3, [pc, #240]	@ (8004d80 <HAL_UART_RxCpltCallback+0x10ec>)
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f040 8616 	bne.w	80058c2 <HAL_UART_RxCpltCallback+0x1c2e>
									selector2x = 1;
 8004c96:	4b3a      	ldr	r3, [pc, #232]	@ (8004d80 <HAL_UART_RxCpltCallback+0x10ec>)
 8004c98:	2201      	movs	r2, #1
 8004c9a:	701a      	strb	r2, [r3, #0]
								}
							}
							break;
 8004c9c:	f000 be11 	b.w	80058c2 <HAL_UART_RxCpltCallback+0x1c2e>
						case 'k':
							strcpy(tx_buffer, "k");
 8004ca0:	4b31      	ldr	r3, [pc, #196]	@ (8004d68 <HAL_UART_RxCpltCallback+0x10d4>)
 8004ca2:	226b      	movs	r2, #107	@ 0x6b
 8004ca4:	801a      	strh	r2, [r3, #0]
							if (chselect2 != 1){
 8004ca6:	4b35      	ldr	r3, [pc, #212]	@ (8004d7c <HAL_UART_RxCpltCallback+0x10e8>)
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	f000 860b 	beq.w	80058c6 <HAL_UART_RxCpltCallback+0x1c32>
								selector2xAntiguo = selector2x;
 8004cb0:	4b33      	ldr	r3, [pc, #204]	@ (8004d80 <HAL_UART_RxCpltCallback+0x10ec>)
 8004cb2:	781a      	ldrb	r2, [r3, #0]
 8004cb4:	4b33      	ldr	r3, [pc, #204]	@ (8004d84 <HAL_UART_RxCpltCallback+0x10f0>)
 8004cb6:	701a      	strb	r2, [r3, #0]
								selector2yAntiguo = selector2y;
 8004cb8:	4b33      	ldr	r3, [pc, #204]	@ (8004d88 <HAL_UART_RxCpltCallback+0x10f4>)
 8004cba:	781a      	ldrb	r2, [r3, #0]
 8004cbc:	4b33      	ldr	r3, [pc, #204]	@ (8004d8c <HAL_UART_RxCpltCallback+0x10f8>)
 8004cbe:	701a      	strb	r2, [r3, #0]
								selector2y++;
 8004cc0:	4b31      	ldr	r3, [pc, #196]	@ (8004d88 <HAL_UART_RxCpltCallback+0x10f4>)
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	b2da      	uxtb	r2, r3
 8004cc8:	4b2f      	ldr	r3, [pc, #188]	@ (8004d88 <HAL_UART_RxCpltCallback+0x10f4>)
 8004cca:	701a      	strb	r2, [r3, #0]
								if (selector1x == selector2x && selector1y == selector2y){
 8004ccc:	4b30      	ldr	r3, [pc, #192]	@ (8004d90 <HAL_UART_RxCpltCallback+0x10fc>)
 8004cce:	781a      	ldrb	r2, [r3, #0]
 8004cd0:	4b2b      	ldr	r3, [pc, #172]	@ (8004d80 <HAL_UART_RxCpltCallback+0x10ec>)
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d10c      	bne.n	8004cf2 <HAL_UART_RxCpltCallback+0x105e>
 8004cd8:	4b2e      	ldr	r3, [pc, #184]	@ (8004d94 <HAL_UART_RxCpltCallback+0x1100>)
 8004cda:	781a      	ldrb	r2, [r3, #0]
 8004cdc:	4b2a      	ldr	r3, [pc, #168]	@ (8004d88 <HAL_UART_RxCpltCallback+0x10f4>)
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d106      	bne.n	8004cf2 <HAL_UART_RxCpltCallback+0x105e>
									selector2y--;
 8004ce4:	4b28      	ldr	r3, [pc, #160]	@ (8004d88 <HAL_UART_RxCpltCallback+0x10f4>)
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	b2da      	uxtb	r2, r3
 8004cec:	4b26      	ldr	r3, [pc, #152]	@ (8004d88 <HAL_UART_RxCpltCallback+0x10f4>)
 8004cee:	701a      	strb	r2, [r3, #0]
 8004cf0:	e002      	b.n	8004cf8 <HAL_UART_RxCpltCallback+0x1064>
								}else{
									change2=1;
 8004cf2:	4b29      	ldr	r3, [pc, #164]	@ (8004d98 <HAL_UART_RxCpltCallback+0x1104>)
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	701a      	strb	r2, [r3, #0]
								}
								if (selector2y >= 3){
 8004cf8:	4b23      	ldr	r3, [pc, #140]	@ (8004d88 <HAL_UART_RxCpltCallback+0x10f4>)
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	f240 85e2 	bls.w	80058c6 <HAL_UART_RxCpltCallback+0x1c32>
									selector2y = 2;
 8004d02:	4b21      	ldr	r3, [pc, #132]	@ (8004d88 <HAL_UART_RxCpltCallback+0x10f4>)
 8004d04:	2202      	movs	r2, #2
 8004d06:	701a      	strb	r2, [r3, #0]
								}
							}
							break;
 8004d08:	f000 bddd 	b.w	80058c6 <HAL_UART_RxCpltCallback+0x1c32>
						case 'l':
							strcpy(tx_buffer, "l");
 8004d0c:	4b16      	ldr	r3, [pc, #88]	@ (8004d68 <HAL_UART_RxCpltCallback+0x10d4>)
 8004d0e:	226c      	movs	r2, #108	@ 0x6c
 8004d10:	801a      	strh	r2, [r3, #0]
							if (chselect2 != 1){
 8004d12:	4b1a      	ldr	r3, [pc, #104]	@ (8004d7c <HAL_UART_RxCpltCallback+0x10e8>)
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	f000 85d7 	beq.w	80058ca <HAL_UART_RxCpltCallback+0x1c36>
								selector2xAntiguo = selector2x;
 8004d1c:	4b18      	ldr	r3, [pc, #96]	@ (8004d80 <HAL_UART_RxCpltCallback+0x10ec>)
 8004d1e:	781a      	ldrb	r2, [r3, #0]
 8004d20:	4b18      	ldr	r3, [pc, #96]	@ (8004d84 <HAL_UART_RxCpltCallback+0x10f0>)
 8004d22:	701a      	strb	r2, [r3, #0]
								selector2yAntiguo = selector2y;
 8004d24:	4b18      	ldr	r3, [pc, #96]	@ (8004d88 <HAL_UART_RxCpltCallback+0x10f4>)
 8004d26:	781a      	ldrb	r2, [r3, #0]
 8004d28:	4b18      	ldr	r3, [pc, #96]	@ (8004d8c <HAL_UART_RxCpltCallback+0x10f8>)
 8004d2a:	701a      	strb	r2, [r3, #0]
								selector2x++;
 8004d2c:	4b14      	ldr	r3, [pc, #80]	@ (8004d80 <HAL_UART_RxCpltCallback+0x10ec>)
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	3301      	adds	r3, #1
 8004d32:	b2da      	uxtb	r2, r3
 8004d34:	4b12      	ldr	r3, [pc, #72]	@ (8004d80 <HAL_UART_RxCpltCallback+0x10ec>)
 8004d36:	701a      	strb	r2, [r3, #0]
								if (selector1x == selector2x && selector1y == selector2y){
 8004d38:	4b15      	ldr	r3, [pc, #84]	@ (8004d90 <HAL_UART_RxCpltCallback+0x10fc>)
 8004d3a:	781a      	ldrb	r2, [r3, #0]
 8004d3c:	4b10      	ldr	r3, [pc, #64]	@ (8004d80 <HAL_UART_RxCpltCallback+0x10ec>)
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d12b      	bne.n	8004d9c <HAL_UART_RxCpltCallback+0x1108>
 8004d44:	4b13      	ldr	r3, [pc, #76]	@ (8004d94 <HAL_UART_RxCpltCallback+0x1100>)
 8004d46:	781a      	ldrb	r2, [r3, #0]
 8004d48:	4b0f      	ldr	r3, [pc, #60]	@ (8004d88 <HAL_UART_RxCpltCallback+0x10f4>)
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d125      	bne.n	8004d9c <HAL_UART_RxCpltCallback+0x1108>
									selector2x++;
 8004d50:	4b0b      	ldr	r3, [pc, #44]	@ (8004d80 <HAL_UART_RxCpltCallback+0x10ec>)
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	3301      	adds	r3, #1
 8004d56:	b2da      	uxtb	r2, r3
 8004d58:	4b09      	ldr	r3, [pc, #36]	@ (8004d80 <HAL_UART_RxCpltCallback+0x10ec>)
 8004d5a:	701a      	strb	r2, [r3, #0]
 8004d5c:	e021      	b.n	8004da2 <HAL_UART_RxCpltCallback+0x110e>
 8004d5e:	bf00      	nop
 8004d60:	20014090 	.word	0x20014090
 8004d64:	20012f08 	.word	0x20012f08
 8004d68:	20012f10 	.word	0x20012f10
 8004d6c:	20014095 	.word	0x20014095
 8004d70:	20014048 	.word	0x20014048
 8004d74:	40005000 	.word	0x40005000
 8004d78:	20012f0c 	.word	0x20012f0c
 8004d7c:	2001409d 	.word	0x2001409d
 8004d80:	20012e2d 	.word	0x20012e2d
 8004d84:	2001409b 	.word	0x2001409b
 8004d88:	20012e2e 	.word	0x20012e2e
 8004d8c:	2001409c 	.word	0x2001409c
 8004d90:	20012e2a 	.word	0x20012e2a
 8004d94:	20012e2b 	.word	0x20012e2b
 8004d98:	20012e2f 	.word	0x20012e2f
								}else{
									change2=1;
 8004d9c:	4b87      	ldr	r3, [pc, #540]	@ (8004fbc <HAL_UART_RxCpltCallback+0x1328>)
 8004d9e:	2201      	movs	r2, #1
 8004da0:	701a      	strb	r2, [r3, #0]
								}
								if (selector2x >= 3){
 8004da2:	4b87      	ldr	r3, [pc, #540]	@ (8004fc0 <HAL_UART_RxCpltCallback+0x132c>)
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	f240 858f 	bls.w	80058ca <HAL_UART_RxCpltCallback+0x1c36>
									selector2x = 2;
 8004dac:	4b84      	ldr	r3, [pc, #528]	@ (8004fc0 <HAL_UART_RxCpltCallback+0x132c>)
 8004dae:	2202      	movs	r2, #2
 8004db0:	701a      	strb	r2, [r3, #0]
								}
							}
							break;
 8004db2:	f000 bd8a 	b.w	80058ca <HAL_UART_RxCpltCallback+0x1c36>
						case 'o':
							strcpy(tx_buffer, "o");
 8004db6:	4b83      	ldr	r3, [pc, #524]	@ (8004fc4 <HAL_UART_RxCpltCallback+0x1330>)
 8004db8:	226f      	movs	r2, #111	@ 0x6f
 8004dba:	801a      	strh	r2, [r3, #0]
							change2 = 1;				//CAMBIO 2 ES VERDADERO
 8004dbc:	4b7f      	ldr	r3, [pc, #508]	@ (8004fbc <HAL_UART_RxCpltCallback+0x1328>)
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	701a      	strb	r2, [r3, #0]
							chselect2 = 1;				//SE HA SELECCIONADO PERSONAJE
 8004dc2:	4b81      	ldr	r3, [pc, #516]	@ (8004fc8 <HAL_UART_RxCpltCallback+0x1334>)
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	701a      	strb	r2, [r3, #0]
							break;
 8004dc8:	f000 bd8c 	b.w	80058e4 <HAL_UART_RxCpltCallback+0x1c50>
						case 'u':
							strcpy(tx_buffer, "u");
 8004dcc:	4b7d      	ldr	r3, [pc, #500]	@ (8004fc4 <HAL_UART_RxCpltCallback+0x1330>)
 8004dce:	2275      	movs	r2, #117	@ 0x75
 8004dd0:	801a      	strh	r2, [r3, #0]
							change2 = 1;				//CAMBIO 2 ES VERDADERO
 8004dd2:	4b7a      	ldr	r3, [pc, #488]	@ (8004fbc <HAL_UART_RxCpltCallback+0x1328>)
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	701a      	strb	r2, [r3, #0]
							chselect2 = 0;				//NO SE HA SELECCIONADO PERSONAJE
 8004dd8:	4b7b      	ldr	r3, [pc, #492]	@ (8004fc8 <HAL_UART_RxCpltCallback+0x1334>)
 8004dda:	2200      	movs	r2, #0
 8004ddc:	701a      	strb	r2, [r3, #0]
							ch1 = 0;					//REGRESAR VALOR DEL PERSONAJE 0
 8004dde:	4b7b      	ldr	r3, [pc, #492]	@ (8004fcc <HAL_UART_RxCpltCallback+0x1338>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	701a      	strb	r2, [r3, #0]
							break;
 8004de4:	f000 bd7e 	b.w	80058e4 <HAL_UART_RxCpltCallback+0x1c50>
						case 'm':
							strcpy(tx_buffer, "m");
 8004de8:	4b76      	ldr	r3, [pc, #472]	@ (8004fc4 <HAL_UART_RxCpltCallback+0x1330>)
 8004dea:	226d      	movs	r2, #109	@ 0x6d
 8004dec:	801a      	strh	r2, [r3, #0]
							start = 0;
 8004dee:	4b78      	ldr	r3, [pc, #480]	@ (8004fd0 <HAL_UART_RxCpltCallback+0x133c>)
 8004df0:	2200      	movs	r2, #0
 8004df2:	701a      	strb	r2, [r3, #0]
							modo = 9;
 8004df4:	4b77      	ldr	r3, [pc, #476]	@ (8004fd4 <HAL_UART_RxCpltCallback+0x1340>)
 8004df6:	2209      	movs	r2, #9
 8004df8:	701a      	strb	r2, [r3, #0]
							break;
 8004dfa:	f000 bd73 	b.w	80058e4 <HAL_UART_RxCpltCallback+0x1c50>
						default:
							break;
						}
			}else if (modo == 6){
 8004dfe:	4b75      	ldr	r3, [pc, #468]	@ (8004fd4 <HAL_UART_RxCpltCallback+0x1340>)
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	2b06      	cmp	r3, #6
 8004e04:	f040 854a 	bne.w	800589c <HAL_UART_RxCpltCallback+0x1c08>
				if(option2[0] != '\r' && option2[0] != '\n'){
 8004e08:	4b73      	ldr	r3, [pc, #460]	@ (8004fd8 <HAL_UART_RxCpltCallback+0x1344>)
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	2b0d      	cmp	r3, #13
 8004e0e:	d028      	beq.n	8004e62 <HAL_UART_RxCpltCallback+0x11ce>
 8004e10:	4b71      	ldr	r3, [pc, #452]	@ (8004fd8 <HAL_UART_RxCpltCallback+0x1344>)
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	2b0a      	cmp	r3, #10
 8004e16:	d024      	beq.n	8004e62 <HAL_UART_RxCpltCallback+0x11ce>
					// Almacenar la entrada en el buffer
					if (current_index2 < KONAMI_LENGTH) {
 8004e18:	4b70      	ldr	r3, [pc, #448]	@ (8004fdc <HAL_UART_RxCpltCallback+0x1348>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2b04      	cmp	r3, #4
 8004e1e:	dc09      	bgt.n	8004e34 <HAL_UART_RxCpltCallback+0x11a0>
						input_buffer2[current_index2++] = option2[0];
 8004e20:	4b6e      	ldr	r3, [pc, #440]	@ (8004fdc <HAL_UART_RxCpltCallback+0x1348>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	1c5a      	adds	r2, r3, #1
 8004e26:	496d      	ldr	r1, [pc, #436]	@ (8004fdc <HAL_UART_RxCpltCallback+0x1348>)
 8004e28:	600a      	str	r2, [r1, #0]
 8004e2a:	4a6b      	ldr	r2, [pc, #428]	@ (8004fd8 <HAL_UART_RxCpltCallback+0x1344>)
 8004e2c:	7811      	ldrb	r1, [r2, #0]
 8004e2e:	4a6c      	ldr	r2, [pc, #432]	@ (8004fe0 <HAL_UART_RxCpltCallback+0x134c>)
 8004e30:	54d1      	strb	r1, [r2, r3]
 8004e32:	e014      	b.n	8004e5e <HAL_UART_RxCpltCallback+0x11ca>
					} else {
						// Mover el buffer si ya está lleno
						for (int i = 1; i < KONAMI_LENGTH; i++) {
 8004e34:	2301      	movs	r3, #1
 8004e36:	60bb      	str	r3, [r7, #8]
 8004e38:	e00a      	b.n	8004e50 <HAL_UART_RxCpltCallback+0x11bc>
							input_buffer2[i - 1] = input_buffer2[i];
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	4968      	ldr	r1, [pc, #416]	@ (8004fe0 <HAL_UART_RxCpltCallback+0x134c>)
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	440a      	add	r2, r1
 8004e44:	7811      	ldrb	r1, [r2, #0]
 8004e46:	4a66      	ldr	r2, [pc, #408]	@ (8004fe0 <HAL_UART_RxCpltCallback+0x134c>)
 8004e48:	54d1      	strb	r1, [r2, r3]
						for (int i = 1; i < KONAMI_LENGTH; i++) {
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	60bb      	str	r3, [r7, #8]
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	2b04      	cmp	r3, #4
 8004e54:	ddf1      	ble.n	8004e3a <HAL_UART_RxCpltCallback+0x11a6>
						}
						input_buffer2[KONAMI_LENGTH - 1] = option2[0];  // Añadir nueva entrada al final
 8004e56:	4b60      	ldr	r3, [pc, #384]	@ (8004fd8 <HAL_UART_RxCpltCallback+0x1344>)
 8004e58:	781a      	ldrb	r2, [r3, #0]
 8004e5a:	4b61      	ldr	r3, [pc, #388]	@ (8004fe0 <HAL_UART_RxCpltCallback+0x134c>)
 8004e5c:	711a      	strb	r2, [r3, #4]
					}
					// Verificar el código Konami solo después de agregar la nueva entrada
					check_konami_code2();
 8004e5e:	f7fe fee7 	bl	8003c30 <check_konami_code2>
				}
				switch (option2[0]){
 8004e62:	4b5d      	ldr	r3, [pc, #372]	@ (8004fd8 <HAL_UART_RxCpltCallback+0x1344>)
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	3b6a      	subs	r3, #106	@ 0x6a
 8004e68:	2b0b      	cmp	r3, #11
 8004e6a:	f200 8530 	bhi.w	80058ce <HAL_UART_RxCpltCallback+0x1c3a>
 8004e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8004e74 <HAL_UART_RxCpltCallback+0x11e0>)
 8004e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e74:	08004ea5 	.word	0x08004ea5
 8004e78:	080058cf 	.word	0x080058cf
 8004e7c:	0800528b 	.word	0x0800528b
 8004e80:	080058cf 	.word	0x080058cf
 8004e84:	080058cf 	.word	0x080058cf
 8004e88:	08005633 	.word	0x08005633
 8004e8c:	080058cf 	.word	0x080058cf
 8004e90:	080058cf 	.word	0x080058cf
 8004e94:	080058cf 	.word	0x080058cf
 8004e98:	080058cf 	.word	0x080058cf
 8004e9c:	080058cf 	.word	0x080058cf
 8004ea0:	080057cd 	.word	0x080057cd
						case 'j':
							strcpy(tx_buffer, "j");
 8004ea4:	4b47      	ldr	r3, [pc, #284]	@ (8004fc4 <HAL_UART_RxCpltCallback+0x1330>)
 8004ea6:	226a      	movs	r2, #106	@ 0x6a
 8004ea8:	801a      	strh	r2, [r3, #0]
							if (ch2 == 1){
 8004eaa:	4b4e      	ldr	r3, [pc, #312]	@ (8004fe4 <HAL_UART_RxCpltCallback+0x1350>)
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d174      	bne.n	8004f9c <HAL_UART_RxCpltCallback+0x1308>
								if (shooting2 == 1){
 8004eb2:	4b4d      	ldr	r3, [pc, #308]	@ (8004fe8 <HAL_UART_RxCpltCallback+0x1354>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d136      	bne.n	8004f28 <HAL_UART_RxCpltCallback+0x1294>
									x2 = x2-4;
 8004eba:	4b4c      	ldr	r3, [pc, #304]	@ (8004fec <HAL_UART_RxCpltCallback+0x1358>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	3b04      	subs	r3, #4
 8004ec0:	4a4a      	ldr	r2, [pc, #296]	@ (8004fec <HAL_UART_RxCpltCallback+0x1358>)
 8004ec2:	6013      	str	r3, [r2, #0]
									flip22 = 0;				//AHORA FLIP ES 0
 8004ec4:	4b4a      	ldr	r3, [pc, #296]	@ (8004ff0 <HAL_UART_RxCpltCallback+0x135c>)
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	601a      	str	r2, [r3, #0]
									caminarI2 = 1;
 8004eca:	4b4a      	ldr	r3, [pc, #296]	@ (8004ff4 <HAL_UART_RxCpltCallback+0x1360>)
 8004ecc:	2201      	movs	r2, #1
 8004ece:	701a      	strb	r2, [r3, #0]
									//FillRect(x1-1, y1, 1, 25, 0xF800);
									if(caminarI2 == 1){
 8004ed0:	4b48      	ldr	r3, [pc, #288]	@ (8004ff4 <HAL_UART_RxCpltCallback+0x1360>)
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d161      	bne.n	8004f9c <HAL_UART_RxCpltCallback+0x1308>
										running2++;
 8004ed8:	4b47      	ldr	r3, [pc, #284]	@ (8004ff8 <HAL_UART_RxCpltCallback+0x1364>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	3301      	adds	r3, #1
 8004ede:	4a46      	ldr	r2, [pc, #280]	@ (8004ff8 <HAL_UART_RxCpltCallback+0x1364>)
 8004ee0:	6013      	str	r3, [r2, #0]
										if (running2 == 4){
 8004ee2:	4b45      	ldr	r3, [pc, #276]	@ (8004ff8 <HAL_UART_RxCpltCallback+0x1364>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2b04      	cmp	r3, #4
 8004ee8:	d103      	bne.n	8004ef2 <HAL_UART_RxCpltCallback+0x125e>
											frame2=6;
 8004eea:	4b44      	ldr	r3, [pc, #272]	@ (8004ffc <HAL_UART_RxCpltCallback+0x1368>)
 8004eec:	2206      	movs	r2, #6
 8004eee:	601a      	str	r2, [r3, #0]
 8004ef0:	e054      	b.n	8004f9c <HAL_UART_RxCpltCallback+0x1308>
										}else if (running2 == 8){
 8004ef2:	4b41      	ldr	r3, [pc, #260]	@ (8004ff8 <HAL_UART_RxCpltCallback+0x1364>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2b08      	cmp	r3, #8
 8004ef8:	d103      	bne.n	8004f02 <HAL_UART_RxCpltCallback+0x126e>
											frame2=7;
 8004efa:	4b40      	ldr	r3, [pc, #256]	@ (8004ffc <HAL_UART_RxCpltCallback+0x1368>)
 8004efc:	2207      	movs	r2, #7
 8004efe:	601a      	str	r2, [r3, #0]
 8004f00:	e04c      	b.n	8004f9c <HAL_UART_RxCpltCallback+0x1308>
										}else if (running2 == 12){
 8004f02:	4b3d      	ldr	r3, [pc, #244]	@ (8004ff8 <HAL_UART_RxCpltCallback+0x1364>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2b0c      	cmp	r3, #12
 8004f08:	d103      	bne.n	8004f12 <HAL_UART_RxCpltCallback+0x127e>
											frame2=8;
 8004f0a:	4b3c      	ldr	r3, [pc, #240]	@ (8004ffc <HAL_UART_RxCpltCallback+0x1368>)
 8004f0c:	2208      	movs	r2, #8
 8004f0e:	601a      	str	r2, [r3, #0]
 8004f10:	e044      	b.n	8004f9c <HAL_UART_RxCpltCallback+0x1308>
										}else if (running2 >= 16){
 8004f12:	4b39      	ldr	r3, [pc, #228]	@ (8004ff8 <HAL_UART_RxCpltCallback+0x1364>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2b0f      	cmp	r3, #15
 8004f18:	dd40      	ble.n	8004f9c <HAL_UART_RxCpltCallback+0x1308>
											frame2=7;
 8004f1a:	4b38      	ldr	r3, [pc, #224]	@ (8004ffc <HAL_UART_RxCpltCallback+0x1368>)
 8004f1c:	2207      	movs	r2, #7
 8004f1e:	601a      	str	r2, [r3, #0]
											running2=0;
 8004f20:	4b35      	ldr	r3, [pc, #212]	@ (8004ff8 <HAL_UART_RxCpltCallback+0x1364>)
 8004f22:	2200      	movs	r2, #0
 8004f24:	601a      	str	r2, [r3, #0]
 8004f26:	e039      	b.n	8004f9c <HAL_UART_RxCpltCallback+0x1308>
										}
									}
								}else if (shooting2 == 0){
 8004f28:	4b2f      	ldr	r3, [pc, #188]	@ (8004fe8 <HAL_UART_RxCpltCallback+0x1354>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d135      	bne.n	8004f9c <HAL_UART_RxCpltCallback+0x1308>
									x2 = x2-4;
 8004f30:	4b2e      	ldr	r3, [pc, #184]	@ (8004fec <HAL_UART_RxCpltCallback+0x1358>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	3b04      	subs	r3, #4
 8004f36:	4a2d      	ldr	r2, [pc, #180]	@ (8004fec <HAL_UART_RxCpltCallback+0x1358>)
 8004f38:	6013      	str	r3, [r2, #0]
									flip22 = 0;
 8004f3a:	4b2d      	ldr	r3, [pc, #180]	@ (8004ff0 <HAL_UART_RxCpltCallback+0x135c>)
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	601a      	str	r2, [r3, #0]
									caminarI2 = 1;
 8004f40:	4b2c      	ldr	r3, [pc, #176]	@ (8004ff4 <HAL_UART_RxCpltCallback+0x1360>)
 8004f42:	2201      	movs	r2, #1
 8004f44:	701a      	strb	r2, [r3, #0]
									//FillRect(x1-1, y1, 1, 25, 0xF800);
									if(caminarI2 == 1){
 8004f46:	4b2b      	ldr	r3, [pc, #172]	@ (8004ff4 <HAL_UART_RxCpltCallback+0x1360>)
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d126      	bne.n	8004f9c <HAL_UART_RxCpltCallback+0x1308>
										running2++;
 8004f4e:	4b2a      	ldr	r3, [pc, #168]	@ (8004ff8 <HAL_UART_RxCpltCallback+0x1364>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	3301      	adds	r3, #1
 8004f54:	4a28      	ldr	r2, [pc, #160]	@ (8004ff8 <HAL_UART_RxCpltCallback+0x1364>)
 8004f56:	6013      	str	r3, [r2, #0]
										if (running2 == 4){
 8004f58:	4b27      	ldr	r3, [pc, #156]	@ (8004ff8 <HAL_UART_RxCpltCallback+0x1364>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2b04      	cmp	r3, #4
 8004f5e:	d103      	bne.n	8004f68 <HAL_UART_RxCpltCallback+0x12d4>
											frame2=1;
 8004f60:	4b26      	ldr	r3, [pc, #152]	@ (8004ffc <HAL_UART_RxCpltCallback+0x1368>)
 8004f62:	2201      	movs	r2, #1
 8004f64:	601a      	str	r2, [r3, #0]
 8004f66:	e019      	b.n	8004f9c <HAL_UART_RxCpltCallback+0x1308>
										}else if (running2 == 8){
 8004f68:	4b23      	ldr	r3, [pc, #140]	@ (8004ff8 <HAL_UART_RxCpltCallback+0x1364>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2b08      	cmp	r3, #8
 8004f6e:	d103      	bne.n	8004f78 <HAL_UART_RxCpltCallback+0x12e4>
											frame2=2;
 8004f70:	4b22      	ldr	r3, [pc, #136]	@ (8004ffc <HAL_UART_RxCpltCallback+0x1368>)
 8004f72:	2202      	movs	r2, #2
 8004f74:	601a      	str	r2, [r3, #0]
 8004f76:	e011      	b.n	8004f9c <HAL_UART_RxCpltCallback+0x1308>
										}else if (running2 == 12){
 8004f78:	4b1f      	ldr	r3, [pc, #124]	@ (8004ff8 <HAL_UART_RxCpltCallback+0x1364>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2b0c      	cmp	r3, #12
 8004f7e:	d103      	bne.n	8004f88 <HAL_UART_RxCpltCallback+0x12f4>
											frame2=3;
 8004f80:	4b1e      	ldr	r3, [pc, #120]	@ (8004ffc <HAL_UART_RxCpltCallback+0x1368>)
 8004f82:	2203      	movs	r2, #3
 8004f84:	601a      	str	r2, [r3, #0]
 8004f86:	e009      	b.n	8004f9c <HAL_UART_RxCpltCallback+0x1308>
										}else if (running2 >= 16){
 8004f88:	4b1b      	ldr	r3, [pc, #108]	@ (8004ff8 <HAL_UART_RxCpltCallback+0x1364>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2b0f      	cmp	r3, #15
 8004f8e:	dd05      	ble.n	8004f9c <HAL_UART_RxCpltCallback+0x1308>
											frame2=2;
 8004f90:	4b1a      	ldr	r3, [pc, #104]	@ (8004ffc <HAL_UART_RxCpltCallback+0x1368>)
 8004f92:	2202      	movs	r2, #2
 8004f94:	601a      	str	r2, [r3, #0]
											running2=0;
 8004f96:	4b18      	ldr	r3, [pc, #96]	@ (8004ff8 <HAL_UART_RxCpltCallback+0x1364>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	601a      	str	r2, [r3, #0]
										}
									}
								}
							}if (ch2 == 5){
 8004f9c:	4b11      	ldr	r3, [pc, #68]	@ (8004fe4 <HAL_UART_RxCpltCallback+0x1350>)
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	2b05      	cmp	r3, #5
 8004fa2:	d167      	bne.n	8005074 <HAL_UART_RxCpltCallback+0x13e0>
								if (shooting2 == 1 || shooting2 == 2){
 8004fa4:	4b10      	ldr	r3, [pc, #64]	@ (8004fe8 <HAL_UART_RxCpltCallback+0x1354>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d003      	beq.n	8004fb4 <HAL_UART_RxCpltCallback+0x1320>
 8004fac:	4b0e      	ldr	r3, [pc, #56]	@ (8004fe8 <HAL_UART_RxCpltCallback+0x1354>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d125      	bne.n	8005000 <HAL_UART_RxCpltCallback+0x136c>
									flip22 = 0;
 8004fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8004ff0 <HAL_UART_RxCpltCallback+0x135c>)
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	601a      	str	r2, [r3, #0]
 8004fba:	e05b      	b.n	8005074 <HAL_UART_RxCpltCallback+0x13e0>
 8004fbc:	20012e2f 	.word	0x20012e2f
 8004fc0:	20012e2d 	.word	0x20012e2d
 8004fc4:	20012f10 	.word	0x20012f10
 8004fc8:	2001409d 	.word	0x2001409d
 8004fcc:	2001409a 	.word	0x2001409a
 8004fd0:	20014095 	.word	0x20014095
 8004fd4:	20014090 	.word	0x20014090
 8004fd8:	20012f0c 	.word	0x20012f0c
 8004fdc:	20014174 	.word	0x20014174
 8004fe0:	20014178 	.word	0x20014178
 8004fe4:	2001409e 	.word	0x2001409e
 8004fe8:	20014124 	.word	0x20014124
 8004fec:	20012e4c 	.word	0x20012e4c
 8004ff0:	2001410c 	.word	0x2001410c
 8004ff4:	20014094 	.word	0x20014094
 8004ff8:	20014120 	.word	0x20014120
 8004ffc:	20012e58 	.word	0x20012e58
								}else if (shooting2 == 0){
 8005000:	4b89      	ldr	r3, [pc, #548]	@ (8005228 <HAL_UART_RxCpltCallback+0x1594>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d135      	bne.n	8005074 <HAL_UART_RxCpltCallback+0x13e0>
									x2 = x2-4;
 8005008:	4b88      	ldr	r3, [pc, #544]	@ (800522c <HAL_UART_RxCpltCallback+0x1598>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	3b04      	subs	r3, #4
 800500e:	4a87      	ldr	r2, [pc, #540]	@ (800522c <HAL_UART_RxCpltCallback+0x1598>)
 8005010:	6013      	str	r3, [r2, #0]
									flip22 = 0;
 8005012:	4b87      	ldr	r3, [pc, #540]	@ (8005230 <HAL_UART_RxCpltCallback+0x159c>)
 8005014:	2200      	movs	r2, #0
 8005016:	601a      	str	r2, [r3, #0]
									caminarI2 = 1;
 8005018:	4b86      	ldr	r3, [pc, #536]	@ (8005234 <HAL_UART_RxCpltCallback+0x15a0>)
 800501a:	2201      	movs	r2, #1
 800501c:	701a      	strb	r2, [r3, #0]
									//FillRect(x1-1, y1, 1, 25, 0xF800);
									if(caminarI2 == 1){
 800501e:	4b85      	ldr	r3, [pc, #532]	@ (8005234 <HAL_UART_RxCpltCallback+0x15a0>)
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	2b01      	cmp	r3, #1
 8005024:	d126      	bne.n	8005074 <HAL_UART_RxCpltCallback+0x13e0>
										running2++;
 8005026:	4b84      	ldr	r3, [pc, #528]	@ (8005238 <HAL_UART_RxCpltCallback+0x15a4>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	3301      	adds	r3, #1
 800502c:	4a82      	ldr	r2, [pc, #520]	@ (8005238 <HAL_UART_RxCpltCallback+0x15a4>)
 800502e:	6013      	str	r3, [r2, #0]
										if (running2 == 4){
 8005030:	4b81      	ldr	r3, [pc, #516]	@ (8005238 <HAL_UART_RxCpltCallback+0x15a4>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2b04      	cmp	r3, #4
 8005036:	d103      	bne.n	8005040 <HAL_UART_RxCpltCallback+0x13ac>
											frame2=1;
 8005038:	4b80      	ldr	r3, [pc, #512]	@ (800523c <HAL_UART_RxCpltCallback+0x15a8>)
 800503a:	2201      	movs	r2, #1
 800503c:	601a      	str	r2, [r3, #0]
 800503e:	e019      	b.n	8005074 <HAL_UART_RxCpltCallback+0x13e0>
										}else if (running2 == 8){
 8005040:	4b7d      	ldr	r3, [pc, #500]	@ (8005238 <HAL_UART_RxCpltCallback+0x15a4>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2b08      	cmp	r3, #8
 8005046:	d103      	bne.n	8005050 <HAL_UART_RxCpltCallback+0x13bc>
											frame2=2;
 8005048:	4b7c      	ldr	r3, [pc, #496]	@ (800523c <HAL_UART_RxCpltCallback+0x15a8>)
 800504a:	2202      	movs	r2, #2
 800504c:	601a      	str	r2, [r3, #0]
 800504e:	e011      	b.n	8005074 <HAL_UART_RxCpltCallback+0x13e0>
										}else if (running2 == 12){
 8005050:	4b79      	ldr	r3, [pc, #484]	@ (8005238 <HAL_UART_RxCpltCallback+0x15a4>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b0c      	cmp	r3, #12
 8005056:	d103      	bne.n	8005060 <HAL_UART_RxCpltCallback+0x13cc>
											frame2=3;
 8005058:	4b78      	ldr	r3, [pc, #480]	@ (800523c <HAL_UART_RxCpltCallback+0x15a8>)
 800505a:	2203      	movs	r2, #3
 800505c:	601a      	str	r2, [r3, #0]
 800505e:	e009      	b.n	8005074 <HAL_UART_RxCpltCallback+0x13e0>
										}else if (running2 >= 16){
 8005060:	4b75      	ldr	r3, [pc, #468]	@ (8005238 <HAL_UART_RxCpltCallback+0x15a4>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2b0f      	cmp	r3, #15
 8005066:	dd05      	ble.n	8005074 <HAL_UART_RxCpltCallback+0x13e0>
											frame2=2;
 8005068:	4b74      	ldr	r3, [pc, #464]	@ (800523c <HAL_UART_RxCpltCallback+0x15a8>)
 800506a:	2202      	movs	r2, #2
 800506c:	601a      	str	r2, [r3, #0]
											running2=0;
 800506e:	4b72      	ldr	r3, [pc, #456]	@ (8005238 <HAL_UART_RxCpltCallback+0x15a4>)
 8005070:	2200      	movs	r2, #0
 8005072:	601a      	str	r2, [r3, #0]
										}
									}
								}
							}if (ch2 == 8){
 8005074:	4b72      	ldr	r3, [pc, #456]	@ (8005240 <HAL_UART_RxCpltCallback+0x15ac>)
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	2b08      	cmp	r3, #8
 800507a:	d174      	bne.n	8005166 <HAL_UART_RxCpltCallback+0x14d2>
								if (shooting2 == 1){
 800507c:	4b6a      	ldr	r3, [pc, #424]	@ (8005228 <HAL_UART_RxCpltCallback+0x1594>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d136      	bne.n	80050f2 <HAL_UART_RxCpltCallback+0x145e>
									x2 = x2-4;
 8005084:	4b69      	ldr	r3, [pc, #420]	@ (800522c <HAL_UART_RxCpltCallback+0x1598>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	3b04      	subs	r3, #4
 800508a:	4a68      	ldr	r2, [pc, #416]	@ (800522c <HAL_UART_RxCpltCallback+0x1598>)
 800508c:	6013      	str	r3, [r2, #0]
									flip22 = 0;
 800508e:	4b68      	ldr	r3, [pc, #416]	@ (8005230 <HAL_UART_RxCpltCallback+0x159c>)
 8005090:	2200      	movs	r2, #0
 8005092:	601a      	str	r2, [r3, #0]
									caminarI2 = 1;
 8005094:	4b67      	ldr	r3, [pc, #412]	@ (8005234 <HAL_UART_RxCpltCallback+0x15a0>)
 8005096:	2201      	movs	r2, #1
 8005098:	701a      	strb	r2, [r3, #0]
									//FillRect(x1-1, y1, 1, 25, 0xF800);
									if(caminarI2 == 1){
 800509a:	4b66      	ldr	r3, [pc, #408]	@ (8005234 <HAL_UART_RxCpltCallback+0x15a0>)
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d161      	bne.n	8005166 <HAL_UART_RxCpltCallback+0x14d2>
										running2++;
 80050a2:	4b65      	ldr	r3, [pc, #404]	@ (8005238 <HAL_UART_RxCpltCallback+0x15a4>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	3301      	adds	r3, #1
 80050a8:	4a63      	ldr	r2, [pc, #396]	@ (8005238 <HAL_UART_RxCpltCallback+0x15a4>)
 80050aa:	6013      	str	r3, [r2, #0]
										if (running2 == 4){
 80050ac:	4b62      	ldr	r3, [pc, #392]	@ (8005238 <HAL_UART_RxCpltCallback+0x15a4>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2b04      	cmp	r3, #4
 80050b2:	d103      	bne.n	80050bc <HAL_UART_RxCpltCallback+0x1428>
											frame2=6;
 80050b4:	4b61      	ldr	r3, [pc, #388]	@ (800523c <HAL_UART_RxCpltCallback+0x15a8>)
 80050b6:	2206      	movs	r2, #6
 80050b8:	601a      	str	r2, [r3, #0]
 80050ba:	e054      	b.n	8005166 <HAL_UART_RxCpltCallback+0x14d2>
										}else if (running2 == 8){
 80050bc:	4b5e      	ldr	r3, [pc, #376]	@ (8005238 <HAL_UART_RxCpltCallback+0x15a4>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2b08      	cmp	r3, #8
 80050c2:	d103      	bne.n	80050cc <HAL_UART_RxCpltCallback+0x1438>
											frame2=7;
 80050c4:	4b5d      	ldr	r3, [pc, #372]	@ (800523c <HAL_UART_RxCpltCallback+0x15a8>)
 80050c6:	2207      	movs	r2, #7
 80050c8:	601a      	str	r2, [r3, #0]
 80050ca:	e04c      	b.n	8005166 <HAL_UART_RxCpltCallback+0x14d2>
										}else if (running2 == 12){
 80050cc:	4b5a      	ldr	r3, [pc, #360]	@ (8005238 <HAL_UART_RxCpltCallback+0x15a4>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2b0c      	cmp	r3, #12
 80050d2:	d103      	bne.n	80050dc <HAL_UART_RxCpltCallback+0x1448>
											frame2=8;
 80050d4:	4b59      	ldr	r3, [pc, #356]	@ (800523c <HAL_UART_RxCpltCallback+0x15a8>)
 80050d6:	2208      	movs	r2, #8
 80050d8:	601a      	str	r2, [r3, #0]
 80050da:	e044      	b.n	8005166 <HAL_UART_RxCpltCallback+0x14d2>
										}else if (running2 >= 16){
 80050dc:	4b56      	ldr	r3, [pc, #344]	@ (8005238 <HAL_UART_RxCpltCallback+0x15a4>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2b0f      	cmp	r3, #15
 80050e2:	dd40      	ble.n	8005166 <HAL_UART_RxCpltCallback+0x14d2>
											frame2=7;
 80050e4:	4b55      	ldr	r3, [pc, #340]	@ (800523c <HAL_UART_RxCpltCallback+0x15a8>)
 80050e6:	2207      	movs	r2, #7
 80050e8:	601a      	str	r2, [r3, #0]
											running2=0;
 80050ea:	4b53      	ldr	r3, [pc, #332]	@ (8005238 <HAL_UART_RxCpltCallback+0x15a4>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	601a      	str	r2, [r3, #0]
 80050f0:	e039      	b.n	8005166 <HAL_UART_RxCpltCallback+0x14d2>
										}
									}
								}else if (shooting2 == 0){
 80050f2:	4b4d      	ldr	r3, [pc, #308]	@ (8005228 <HAL_UART_RxCpltCallback+0x1594>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d135      	bne.n	8005166 <HAL_UART_RxCpltCallback+0x14d2>
									x2 = x2-4;
 80050fa:	4b4c      	ldr	r3, [pc, #304]	@ (800522c <HAL_UART_RxCpltCallback+0x1598>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	3b04      	subs	r3, #4
 8005100:	4a4a      	ldr	r2, [pc, #296]	@ (800522c <HAL_UART_RxCpltCallback+0x1598>)
 8005102:	6013      	str	r3, [r2, #0]
									flip22 = 0;
 8005104:	4b4a      	ldr	r3, [pc, #296]	@ (8005230 <HAL_UART_RxCpltCallback+0x159c>)
 8005106:	2200      	movs	r2, #0
 8005108:	601a      	str	r2, [r3, #0]
									caminarI2 = 1;
 800510a:	4b4a      	ldr	r3, [pc, #296]	@ (8005234 <HAL_UART_RxCpltCallback+0x15a0>)
 800510c:	2201      	movs	r2, #1
 800510e:	701a      	strb	r2, [r3, #0]
									//FillRect(x1-1, y1, 1, 25, 0xF800);
									if(caminarI2 == 1){
 8005110:	4b48      	ldr	r3, [pc, #288]	@ (8005234 <HAL_UART_RxCpltCallback+0x15a0>)
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d126      	bne.n	8005166 <HAL_UART_RxCpltCallback+0x14d2>
										running2++;
 8005118:	4b47      	ldr	r3, [pc, #284]	@ (8005238 <HAL_UART_RxCpltCallback+0x15a4>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	3301      	adds	r3, #1
 800511e:	4a46      	ldr	r2, [pc, #280]	@ (8005238 <HAL_UART_RxCpltCallback+0x15a4>)
 8005120:	6013      	str	r3, [r2, #0]
										if (running2 == 4){
 8005122:	4b45      	ldr	r3, [pc, #276]	@ (8005238 <HAL_UART_RxCpltCallback+0x15a4>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2b04      	cmp	r3, #4
 8005128:	d103      	bne.n	8005132 <HAL_UART_RxCpltCallback+0x149e>
											frame2=1;
 800512a:	4b44      	ldr	r3, [pc, #272]	@ (800523c <HAL_UART_RxCpltCallback+0x15a8>)
 800512c:	2201      	movs	r2, #1
 800512e:	601a      	str	r2, [r3, #0]
 8005130:	e019      	b.n	8005166 <HAL_UART_RxCpltCallback+0x14d2>
										}else if (running2 == 8){
 8005132:	4b41      	ldr	r3, [pc, #260]	@ (8005238 <HAL_UART_RxCpltCallback+0x15a4>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2b08      	cmp	r3, #8
 8005138:	d103      	bne.n	8005142 <HAL_UART_RxCpltCallback+0x14ae>
											frame2=2;
 800513a:	4b40      	ldr	r3, [pc, #256]	@ (800523c <HAL_UART_RxCpltCallback+0x15a8>)
 800513c:	2202      	movs	r2, #2
 800513e:	601a      	str	r2, [r3, #0]
 8005140:	e011      	b.n	8005166 <HAL_UART_RxCpltCallback+0x14d2>
										}else if (running2 == 12){
 8005142:	4b3d      	ldr	r3, [pc, #244]	@ (8005238 <HAL_UART_RxCpltCallback+0x15a4>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2b0c      	cmp	r3, #12
 8005148:	d103      	bne.n	8005152 <HAL_UART_RxCpltCallback+0x14be>
											frame2=3;
 800514a:	4b3c      	ldr	r3, [pc, #240]	@ (800523c <HAL_UART_RxCpltCallback+0x15a8>)
 800514c:	2203      	movs	r2, #3
 800514e:	601a      	str	r2, [r3, #0]
 8005150:	e009      	b.n	8005166 <HAL_UART_RxCpltCallback+0x14d2>
										}else if (running2 >= 16){
 8005152:	4b39      	ldr	r3, [pc, #228]	@ (8005238 <HAL_UART_RxCpltCallback+0x15a4>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2b0f      	cmp	r3, #15
 8005158:	dd05      	ble.n	8005166 <HAL_UART_RxCpltCallback+0x14d2>
											frame2=2;
 800515a:	4b38      	ldr	r3, [pc, #224]	@ (800523c <HAL_UART_RxCpltCallback+0x15a8>)
 800515c:	2202      	movs	r2, #2
 800515e:	601a      	str	r2, [r3, #0]
											running2=0;
 8005160:	4b35      	ldr	r3, [pc, #212]	@ (8005238 <HAL_UART_RxCpltCallback+0x15a4>)
 8005162:	2200      	movs	r2, #0
 8005164:	601a      	str	r2, [r3, #0]
										}
									}
								}
							}if (ch2 == 9){
 8005166:	4b36      	ldr	r3, [pc, #216]	@ (8005240 <HAL_UART_RxCpltCallback+0x15ac>)
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	2b09      	cmp	r3, #9
 800516c:	f040 8084 	bne.w	8005278 <HAL_UART_RxCpltCallback+0x15e4>
								if (shooting2 == 1){
 8005170:	4b2d      	ldr	r3, [pc, #180]	@ (8005228 <HAL_UART_RxCpltCallback+0x1594>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d136      	bne.n	80051e6 <HAL_UART_RxCpltCallback+0x1552>
									x2 = x2-4;
 8005178:	4b2c      	ldr	r3, [pc, #176]	@ (800522c <HAL_UART_RxCpltCallback+0x1598>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	3b04      	subs	r3, #4
 800517e:	4a2b      	ldr	r2, [pc, #172]	@ (800522c <HAL_UART_RxCpltCallback+0x1598>)
 8005180:	6013      	str	r3, [r2, #0]
									flip22 = 0;
 8005182:	4b2b      	ldr	r3, [pc, #172]	@ (8005230 <HAL_UART_RxCpltCallback+0x159c>)
 8005184:	2200      	movs	r2, #0
 8005186:	601a      	str	r2, [r3, #0]
									caminarI2 = 1;
 8005188:	4b2a      	ldr	r3, [pc, #168]	@ (8005234 <HAL_UART_RxCpltCallback+0x15a0>)
 800518a:	2201      	movs	r2, #1
 800518c:	701a      	strb	r2, [r3, #0]
									//FillRect(x1-1, y1, 1, 25, 0xF800);
									if(caminarI2 == 1){
 800518e:	4b29      	ldr	r3, [pc, #164]	@ (8005234 <HAL_UART_RxCpltCallback+0x15a0>)
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	2b01      	cmp	r3, #1
 8005194:	d170      	bne.n	8005278 <HAL_UART_RxCpltCallback+0x15e4>
										running2++;
 8005196:	4b28      	ldr	r3, [pc, #160]	@ (8005238 <HAL_UART_RxCpltCallback+0x15a4>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	3301      	adds	r3, #1
 800519c:	4a26      	ldr	r2, [pc, #152]	@ (8005238 <HAL_UART_RxCpltCallback+0x15a4>)
 800519e:	6013      	str	r3, [r2, #0]
										if (running2 == 4){
 80051a0:	4b25      	ldr	r3, [pc, #148]	@ (8005238 <HAL_UART_RxCpltCallback+0x15a4>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2b04      	cmp	r3, #4
 80051a6:	d103      	bne.n	80051b0 <HAL_UART_RxCpltCallback+0x151c>
											frame2=6;
 80051a8:	4b24      	ldr	r3, [pc, #144]	@ (800523c <HAL_UART_RxCpltCallback+0x15a8>)
 80051aa:	2206      	movs	r2, #6
 80051ac:	601a      	str	r2, [r3, #0]
 80051ae:	e063      	b.n	8005278 <HAL_UART_RxCpltCallback+0x15e4>
										}else if (running2 == 8){
 80051b0:	4b21      	ldr	r3, [pc, #132]	@ (8005238 <HAL_UART_RxCpltCallback+0x15a4>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2b08      	cmp	r3, #8
 80051b6:	d103      	bne.n	80051c0 <HAL_UART_RxCpltCallback+0x152c>
											frame2=7;
 80051b8:	4b20      	ldr	r3, [pc, #128]	@ (800523c <HAL_UART_RxCpltCallback+0x15a8>)
 80051ba:	2207      	movs	r2, #7
 80051bc:	601a      	str	r2, [r3, #0]
 80051be:	e05b      	b.n	8005278 <HAL_UART_RxCpltCallback+0x15e4>
										}else if (running2 == 12){
 80051c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005238 <HAL_UART_RxCpltCallback+0x15a4>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2b0c      	cmp	r3, #12
 80051c6:	d103      	bne.n	80051d0 <HAL_UART_RxCpltCallback+0x153c>
											frame2=8;
 80051c8:	4b1c      	ldr	r3, [pc, #112]	@ (800523c <HAL_UART_RxCpltCallback+0x15a8>)
 80051ca:	2208      	movs	r2, #8
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	e053      	b.n	8005278 <HAL_UART_RxCpltCallback+0x15e4>
										}else if (running2 >= 16){
 80051d0:	4b19      	ldr	r3, [pc, #100]	@ (8005238 <HAL_UART_RxCpltCallback+0x15a4>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2b0f      	cmp	r3, #15
 80051d6:	dd4f      	ble.n	8005278 <HAL_UART_RxCpltCallback+0x15e4>
											frame2=7;
 80051d8:	4b18      	ldr	r3, [pc, #96]	@ (800523c <HAL_UART_RxCpltCallback+0x15a8>)
 80051da:	2207      	movs	r2, #7
 80051dc:	601a      	str	r2, [r3, #0]
											running2=0;
 80051de:	4b16      	ldr	r3, [pc, #88]	@ (8005238 <HAL_UART_RxCpltCallback+0x15a4>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	601a      	str	r2, [r3, #0]
 80051e4:	e048      	b.n	8005278 <HAL_UART_RxCpltCallback+0x15e4>
										}
									}
								}else if (shooting2 == 0){
 80051e6:	4b10      	ldr	r3, [pc, #64]	@ (8005228 <HAL_UART_RxCpltCallback+0x1594>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d144      	bne.n	8005278 <HAL_UART_RxCpltCallback+0x15e4>
									x2 = x2-4;
 80051ee:	4b0f      	ldr	r3, [pc, #60]	@ (800522c <HAL_UART_RxCpltCallback+0x1598>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	3b04      	subs	r3, #4
 80051f4:	4a0d      	ldr	r2, [pc, #52]	@ (800522c <HAL_UART_RxCpltCallback+0x1598>)
 80051f6:	6013      	str	r3, [r2, #0]
									flip22 = 0;
 80051f8:	4b0d      	ldr	r3, [pc, #52]	@ (8005230 <HAL_UART_RxCpltCallback+0x159c>)
 80051fa:	2200      	movs	r2, #0
 80051fc:	601a      	str	r2, [r3, #0]
									caminarI2 = 1;
 80051fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005234 <HAL_UART_RxCpltCallback+0x15a0>)
 8005200:	2201      	movs	r2, #1
 8005202:	701a      	strb	r2, [r3, #0]
									//FillRect(x1-1, y1, 1, 25, 0xF800);
									if(caminarI2 == 1){
 8005204:	4b0b      	ldr	r3, [pc, #44]	@ (8005234 <HAL_UART_RxCpltCallback+0x15a0>)
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d135      	bne.n	8005278 <HAL_UART_RxCpltCallback+0x15e4>
										running2++;
 800520c:	4b0a      	ldr	r3, [pc, #40]	@ (8005238 <HAL_UART_RxCpltCallback+0x15a4>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	3301      	adds	r3, #1
 8005212:	4a09      	ldr	r2, [pc, #36]	@ (8005238 <HAL_UART_RxCpltCallback+0x15a4>)
 8005214:	6013      	str	r3, [r2, #0]
										if (running2 == 4){
 8005216:	4b08      	ldr	r3, [pc, #32]	@ (8005238 <HAL_UART_RxCpltCallback+0x15a4>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2b04      	cmp	r3, #4
 800521c:	d112      	bne.n	8005244 <HAL_UART_RxCpltCallback+0x15b0>
											frame2=1;
 800521e:	4b07      	ldr	r3, [pc, #28]	@ (800523c <HAL_UART_RxCpltCallback+0x15a8>)
 8005220:	2201      	movs	r2, #1
 8005222:	601a      	str	r2, [r3, #0]
 8005224:	e028      	b.n	8005278 <HAL_UART_RxCpltCallback+0x15e4>
 8005226:	bf00      	nop
 8005228:	20014124 	.word	0x20014124
 800522c:	20012e4c 	.word	0x20012e4c
 8005230:	2001410c 	.word	0x2001410c
 8005234:	20014094 	.word	0x20014094
 8005238:	20014120 	.word	0x20014120
 800523c:	20012e58 	.word	0x20012e58
 8005240:	2001409e 	.word	0x2001409e
										}else if (running2 == 8){
 8005244:	4b8a      	ldr	r3, [pc, #552]	@ (8005470 <HAL_UART_RxCpltCallback+0x17dc>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2b08      	cmp	r3, #8
 800524a:	d103      	bne.n	8005254 <HAL_UART_RxCpltCallback+0x15c0>
											frame2=2;
 800524c:	4b89      	ldr	r3, [pc, #548]	@ (8005474 <HAL_UART_RxCpltCallback+0x17e0>)
 800524e:	2202      	movs	r2, #2
 8005250:	601a      	str	r2, [r3, #0]
 8005252:	e011      	b.n	8005278 <HAL_UART_RxCpltCallback+0x15e4>
										}else if (running2 == 12){
 8005254:	4b86      	ldr	r3, [pc, #536]	@ (8005470 <HAL_UART_RxCpltCallback+0x17dc>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2b0c      	cmp	r3, #12
 800525a:	d103      	bne.n	8005264 <HAL_UART_RxCpltCallback+0x15d0>
											frame2=3;
 800525c:	4b85      	ldr	r3, [pc, #532]	@ (8005474 <HAL_UART_RxCpltCallback+0x17e0>)
 800525e:	2203      	movs	r2, #3
 8005260:	601a      	str	r2, [r3, #0]
 8005262:	e009      	b.n	8005278 <HAL_UART_RxCpltCallback+0x15e4>
										}else if (running2 >= 16){
 8005264:	4b82      	ldr	r3, [pc, #520]	@ (8005470 <HAL_UART_RxCpltCallback+0x17dc>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2b0f      	cmp	r3, #15
 800526a:	dd05      	ble.n	8005278 <HAL_UART_RxCpltCallback+0x15e4>
											frame2=2;
 800526c:	4b81      	ldr	r3, [pc, #516]	@ (8005474 <HAL_UART_RxCpltCallback+0x17e0>)
 800526e:	2202      	movs	r2, #2
 8005270:	601a      	str	r2, [r3, #0]
											running2=0;
 8005272:	4b7f      	ldr	r3, [pc, #508]	@ (8005470 <HAL_UART_RxCpltCallback+0x17dc>)
 8005274:	2200      	movs	r2, #0
 8005276:	601a      	str	r2, [r3, #0]
										}
									}
								}
							}
							if(x2 <= 2){
 8005278:	4b7f      	ldr	r3, [pc, #508]	@ (8005478 <HAL_UART_RxCpltCallback+0x17e4>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2b02      	cmp	r3, #2
 800527e:	f300 8328 	bgt.w	80058d2 <HAL_UART_RxCpltCallback+0x1c3e>
								x2 = 2;
 8005282:	4b7d      	ldr	r3, [pc, #500]	@ (8005478 <HAL_UART_RxCpltCallback+0x17e4>)
 8005284:	2202      	movs	r2, #2
 8005286:	601a      	str	r2, [r3, #0]
							}
							break;
 8005288:	e323      	b.n	80058d2 <HAL_UART_RxCpltCallback+0x1c3e>
						case 'l':
							strcpy(tx_buffer, "l");
 800528a:	4b7c      	ldr	r3, [pc, #496]	@ (800547c <HAL_UART_RxCpltCallback+0x17e8>)
 800528c:	226c      	movs	r2, #108	@ 0x6c
 800528e:	801a      	strh	r2, [r3, #0]
							if (ch2 == 1){
 8005290:	4b7b      	ldr	r3, [pc, #492]	@ (8005480 <HAL_UART_RxCpltCallback+0x17ec>)
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d174      	bne.n	8005382 <HAL_UART_RxCpltCallback+0x16ee>
							if (shooting2 == 1){
 8005298:	4b7a      	ldr	r3, [pc, #488]	@ (8005484 <HAL_UART_RxCpltCallback+0x17f0>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d136      	bne.n	800530e <HAL_UART_RxCpltCallback+0x167a>
								x2 = x2+4;
 80052a0:	4b75      	ldr	r3, [pc, #468]	@ (8005478 <HAL_UART_RxCpltCallback+0x17e4>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	3304      	adds	r3, #4
 80052a6:	4a74      	ldr	r2, [pc, #464]	@ (8005478 <HAL_UART_RxCpltCallback+0x17e4>)
 80052a8:	6013      	str	r3, [r2, #0]
								flip22 = 1;				//AHORA FLIP ES 0
 80052aa:	4b77      	ldr	r3, [pc, #476]	@ (8005488 <HAL_UART_RxCpltCallback+0x17f4>)
 80052ac:	2201      	movs	r2, #1
 80052ae:	601a      	str	r2, [r3, #0]
								caminarD2 = 1;
 80052b0:	4b76      	ldr	r3, [pc, #472]	@ (800548c <HAL_UART_RxCpltCallback+0x17f8>)
 80052b2:	2201      	movs	r2, #1
 80052b4:	701a      	strb	r2, [r3, #0]
								//FillRect(x1-1, y1, 1, 25, 0xF800);
								if(caminarD2 == 1){
 80052b6:	4b75      	ldr	r3, [pc, #468]	@ (800548c <HAL_UART_RxCpltCallback+0x17f8>)
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d161      	bne.n	8005382 <HAL_UART_RxCpltCallback+0x16ee>
									running2++;
 80052be:	4b6c      	ldr	r3, [pc, #432]	@ (8005470 <HAL_UART_RxCpltCallback+0x17dc>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	3301      	adds	r3, #1
 80052c4:	4a6a      	ldr	r2, [pc, #424]	@ (8005470 <HAL_UART_RxCpltCallback+0x17dc>)
 80052c6:	6013      	str	r3, [r2, #0]
									if (running2 == 4){
 80052c8:	4b69      	ldr	r3, [pc, #420]	@ (8005470 <HAL_UART_RxCpltCallback+0x17dc>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2b04      	cmp	r3, #4
 80052ce:	d103      	bne.n	80052d8 <HAL_UART_RxCpltCallback+0x1644>
										frame2=6;
 80052d0:	4b68      	ldr	r3, [pc, #416]	@ (8005474 <HAL_UART_RxCpltCallback+0x17e0>)
 80052d2:	2206      	movs	r2, #6
 80052d4:	601a      	str	r2, [r3, #0]
 80052d6:	e054      	b.n	8005382 <HAL_UART_RxCpltCallback+0x16ee>
									}else if (running2 == 8){
 80052d8:	4b65      	ldr	r3, [pc, #404]	@ (8005470 <HAL_UART_RxCpltCallback+0x17dc>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2b08      	cmp	r3, #8
 80052de:	d103      	bne.n	80052e8 <HAL_UART_RxCpltCallback+0x1654>
										frame2=7;
 80052e0:	4b64      	ldr	r3, [pc, #400]	@ (8005474 <HAL_UART_RxCpltCallback+0x17e0>)
 80052e2:	2207      	movs	r2, #7
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	e04c      	b.n	8005382 <HAL_UART_RxCpltCallback+0x16ee>
									}else if (running2 == 12){
 80052e8:	4b61      	ldr	r3, [pc, #388]	@ (8005470 <HAL_UART_RxCpltCallback+0x17dc>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2b0c      	cmp	r3, #12
 80052ee:	d103      	bne.n	80052f8 <HAL_UART_RxCpltCallback+0x1664>
										frame2=8;
 80052f0:	4b60      	ldr	r3, [pc, #384]	@ (8005474 <HAL_UART_RxCpltCallback+0x17e0>)
 80052f2:	2208      	movs	r2, #8
 80052f4:	601a      	str	r2, [r3, #0]
 80052f6:	e044      	b.n	8005382 <HAL_UART_RxCpltCallback+0x16ee>
									}else if (running2 >= 16){
 80052f8:	4b5d      	ldr	r3, [pc, #372]	@ (8005470 <HAL_UART_RxCpltCallback+0x17dc>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2b0f      	cmp	r3, #15
 80052fe:	dd40      	ble.n	8005382 <HAL_UART_RxCpltCallback+0x16ee>
										frame2=7;
 8005300:	4b5c      	ldr	r3, [pc, #368]	@ (8005474 <HAL_UART_RxCpltCallback+0x17e0>)
 8005302:	2207      	movs	r2, #7
 8005304:	601a      	str	r2, [r3, #0]
										running2=0;
 8005306:	4b5a      	ldr	r3, [pc, #360]	@ (8005470 <HAL_UART_RxCpltCallback+0x17dc>)
 8005308:	2200      	movs	r2, #0
 800530a:	601a      	str	r2, [r3, #0]
 800530c:	e039      	b.n	8005382 <HAL_UART_RxCpltCallback+0x16ee>
									}
								}
							}else if (shooting2 == 0){
 800530e:	4b5d      	ldr	r3, [pc, #372]	@ (8005484 <HAL_UART_RxCpltCallback+0x17f0>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d135      	bne.n	8005382 <HAL_UART_RxCpltCallback+0x16ee>
								x2 = x2+4;
 8005316:	4b58      	ldr	r3, [pc, #352]	@ (8005478 <HAL_UART_RxCpltCallback+0x17e4>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	3304      	adds	r3, #4
 800531c:	4a56      	ldr	r2, [pc, #344]	@ (8005478 <HAL_UART_RxCpltCallback+0x17e4>)
 800531e:	6013      	str	r3, [r2, #0]
								flip22 = 1;
 8005320:	4b59      	ldr	r3, [pc, #356]	@ (8005488 <HAL_UART_RxCpltCallback+0x17f4>)
 8005322:	2201      	movs	r2, #1
 8005324:	601a      	str	r2, [r3, #0]
								caminarD2 = 1;
 8005326:	4b59      	ldr	r3, [pc, #356]	@ (800548c <HAL_UART_RxCpltCallback+0x17f8>)
 8005328:	2201      	movs	r2, #1
 800532a:	701a      	strb	r2, [r3, #0]
								//FillRect(x1-1, y1, 1, 25, 0xF800);
								if(caminarD2 == 1){
 800532c:	4b57      	ldr	r3, [pc, #348]	@ (800548c <HAL_UART_RxCpltCallback+0x17f8>)
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d126      	bne.n	8005382 <HAL_UART_RxCpltCallback+0x16ee>
									running2++;
 8005334:	4b4e      	ldr	r3, [pc, #312]	@ (8005470 <HAL_UART_RxCpltCallback+0x17dc>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	3301      	adds	r3, #1
 800533a:	4a4d      	ldr	r2, [pc, #308]	@ (8005470 <HAL_UART_RxCpltCallback+0x17dc>)
 800533c:	6013      	str	r3, [r2, #0]
									if (running2 == 4){
 800533e:	4b4c      	ldr	r3, [pc, #304]	@ (8005470 <HAL_UART_RxCpltCallback+0x17dc>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2b04      	cmp	r3, #4
 8005344:	d103      	bne.n	800534e <HAL_UART_RxCpltCallback+0x16ba>
										frame2=1;
 8005346:	4b4b      	ldr	r3, [pc, #300]	@ (8005474 <HAL_UART_RxCpltCallback+0x17e0>)
 8005348:	2201      	movs	r2, #1
 800534a:	601a      	str	r2, [r3, #0]
 800534c:	e019      	b.n	8005382 <HAL_UART_RxCpltCallback+0x16ee>
									}else if (running2 == 8){
 800534e:	4b48      	ldr	r3, [pc, #288]	@ (8005470 <HAL_UART_RxCpltCallback+0x17dc>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2b08      	cmp	r3, #8
 8005354:	d103      	bne.n	800535e <HAL_UART_RxCpltCallback+0x16ca>
										frame2=2;
 8005356:	4b47      	ldr	r3, [pc, #284]	@ (8005474 <HAL_UART_RxCpltCallback+0x17e0>)
 8005358:	2202      	movs	r2, #2
 800535a:	601a      	str	r2, [r3, #0]
 800535c:	e011      	b.n	8005382 <HAL_UART_RxCpltCallback+0x16ee>
									}else if (running2 == 12){
 800535e:	4b44      	ldr	r3, [pc, #272]	@ (8005470 <HAL_UART_RxCpltCallback+0x17dc>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2b0c      	cmp	r3, #12
 8005364:	d103      	bne.n	800536e <HAL_UART_RxCpltCallback+0x16da>
										frame2=3;
 8005366:	4b43      	ldr	r3, [pc, #268]	@ (8005474 <HAL_UART_RxCpltCallback+0x17e0>)
 8005368:	2203      	movs	r2, #3
 800536a:	601a      	str	r2, [r3, #0]
 800536c:	e009      	b.n	8005382 <HAL_UART_RxCpltCallback+0x16ee>
									}else if (running2 >= 16){
 800536e:	4b40      	ldr	r3, [pc, #256]	@ (8005470 <HAL_UART_RxCpltCallback+0x17dc>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2b0f      	cmp	r3, #15
 8005374:	dd05      	ble.n	8005382 <HAL_UART_RxCpltCallback+0x16ee>
										frame2=2;
 8005376:	4b3f      	ldr	r3, [pc, #252]	@ (8005474 <HAL_UART_RxCpltCallback+0x17e0>)
 8005378:	2202      	movs	r2, #2
 800537a:	601a      	str	r2, [r3, #0]
										running2=0;
 800537c:	4b3c      	ldr	r3, [pc, #240]	@ (8005470 <HAL_UART_RxCpltCallback+0x17dc>)
 800537e:	2200      	movs	r2, #0
 8005380:	601a      	str	r2, [r3, #0]
									}
								}
							}
						}if (ch2 == 5){
 8005382:	4b3f      	ldr	r3, [pc, #252]	@ (8005480 <HAL_UART_RxCpltCallback+0x17ec>)
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	2b05      	cmp	r3, #5
 8005388:	d145      	bne.n	8005416 <HAL_UART_RxCpltCallback+0x1782>
							if (shooting2 == 1 || shooting2 == 2){
 800538a:	4b3e      	ldr	r3, [pc, #248]	@ (8005484 <HAL_UART_RxCpltCallback+0x17f0>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2b01      	cmp	r3, #1
 8005390:	d003      	beq.n	800539a <HAL_UART_RxCpltCallback+0x1706>
 8005392:	4b3c      	ldr	r3, [pc, #240]	@ (8005484 <HAL_UART_RxCpltCallback+0x17f0>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2b02      	cmp	r3, #2
 8005398:	d103      	bne.n	80053a2 <HAL_UART_RxCpltCallback+0x170e>
								flip22 = 1;
 800539a:	4b3b      	ldr	r3, [pc, #236]	@ (8005488 <HAL_UART_RxCpltCallback+0x17f4>)
 800539c:	2201      	movs	r2, #1
 800539e:	601a      	str	r2, [r3, #0]
 80053a0:	e039      	b.n	8005416 <HAL_UART_RxCpltCallback+0x1782>
							}else if (shooting2 == 0){
 80053a2:	4b38      	ldr	r3, [pc, #224]	@ (8005484 <HAL_UART_RxCpltCallback+0x17f0>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d135      	bne.n	8005416 <HAL_UART_RxCpltCallback+0x1782>
								x2 = x2+4;
 80053aa:	4b33      	ldr	r3, [pc, #204]	@ (8005478 <HAL_UART_RxCpltCallback+0x17e4>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	3304      	adds	r3, #4
 80053b0:	4a31      	ldr	r2, [pc, #196]	@ (8005478 <HAL_UART_RxCpltCallback+0x17e4>)
 80053b2:	6013      	str	r3, [r2, #0]
								flip22 = 1;
 80053b4:	4b34      	ldr	r3, [pc, #208]	@ (8005488 <HAL_UART_RxCpltCallback+0x17f4>)
 80053b6:	2201      	movs	r2, #1
 80053b8:	601a      	str	r2, [r3, #0]
								caminarD2 = 1;
 80053ba:	4b34      	ldr	r3, [pc, #208]	@ (800548c <HAL_UART_RxCpltCallback+0x17f8>)
 80053bc:	2201      	movs	r2, #1
 80053be:	701a      	strb	r2, [r3, #0]
								//FillRect(x1-1, y1, 1, 25, 0xF800);
								if(caminarD2 == 1){
 80053c0:	4b32      	ldr	r3, [pc, #200]	@ (800548c <HAL_UART_RxCpltCallback+0x17f8>)
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d126      	bne.n	8005416 <HAL_UART_RxCpltCallback+0x1782>
									running2++;
 80053c8:	4b29      	ldr	r3, [pc, #164]	@ (8005470 <HAL_UART_RxCpltCallback+0x17dc>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	3301      	adds	r3, #1
 80053ce:	4a28      	ldr	r2, [pc, #160]	@ (8005470 <HAL_UART_RxCpltCallback+0x17dc>)
 80053d0:	6013      	str	r3, [r2, #0]
									if (running2 == 4){
 80053d2:	4b27      	ldr	r3, [pc, #156]	@ (8005470 <HAL_UART_RxCpltCallback+0x17dc>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2b04      	cmp	r3, #4
 80053d8:	d103      	bne.n	80053e2 <HAL_UART_RxCpltCallback+0x174e>
										frame2=1;
 80053da:	4b26      	ldr	r3, [pc, #152]	@ (8005474 <HAL_UART_RxCpltCallback+0x17e0>)
 80053dc:	2201      	movs	r2, #1
 80053de:	601a      	str	r2, [r3, #0]
 80053e0:	e019      	b.n	8005416 <HAL_UART_RxCpltCallback+0x1782>
									}else if (running2 == 8){
 80053e2:	4b23      	ldr	r3, [pc, #140]	@ (8005470 <HAL_UART_RxCpltCallback+0x17dc>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2b08      	cmp	r3, #8
 80053e8:	d103      	bne.n	80053f2 <HAL_UART_RxCpltCallback+0x175e>
										frame2=2;
 80053ea:	4b22      	ldr	r3, [pc, #136]	@ (8005474 <HAL_UART_RxCpltCallback+0x17e0>)
 80053ec:	2202      	movs	r2, #2
 80053ee:	601a      	str	r2, [r3, #0]
 80053f0:	e011      	b.n	8005416 <HAL_UART_RxCpltCallback+0x1782>
									}else if (running2 == 12){
 80053f2:	4b1f      	ldr	r3, [pc, #124]	@ (8005470 <HAL_UART_RxCpltCallback+0x17dc>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2b0c      	cmp	r3, #12
 80053f8:	d103      	bne.n	8005402 <HAL_UART_RxCpltCallback+0x176e>
										frame2=3;
 80053fa:	4b1e      	ldr	r3, [pc, #120]	@ (8005474 <HAL_UART_RxCpltCallback+0x17e0>)
 80053fc:	2203      	movs	r2, #3
 80053fe:	601a      	str	r2, [r3, #0]
 8005400:	e009      	b.n	8005416 <HAL_UART_RxCpltCallback+0x1782>
									}else if (running2 >= 16){
 8005402:	4b1b      	ldr	r3, [pc, #108]	@ (8005470 <HAL_UART_RxCpltCallback+0x17dc>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2b0f      	cmp	r3, #15
 8005408:	dd05      	ble.n	8005416 <HAL_UART_RxCpltCallback+0x1782>
										frame2=2;
 800540a:	4b1a      	ldr	r3, [pc, #104]	@ (8005474 <HAL_UART_RxCpltCallback+0x17e0>)
 800540c:	2202      	movs	r2, #2
 800540e:	601a      	str	r2, [r3, #0]
										running2=0;
 8005410:	4b17      	ldr	r3, [pc, #92]	@ (8005470 <HAL_UART_RxCpltCallback+0x17dc>)
 8005412:	2200      	movs	r2, #0
 8005414:	601a      	str	r2, [r3, #0]
									}
								}
							}
						}if (ch2 == 8){
 8005416:	4b1a      	ldr	r3, [pc, #104]	@ (8005480 <HAL_UART_RxCpltCallback+0x17ec>)
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	2b08      	cmp	r3, #8
 800541c:	f040 8085 	bne.w	800552a <HAL_UART_RxCpltCallback+0x1896>
							if (shooting2 == 1){
 8005420:	4b18      	ldr	r3, [pc, #96]	@ (8005484 <HAL_UART_RxCpltCallback+0x17f0>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2b01      	cmp	r3, #1
 8005426:	d146      	bne.n	80054b6 <HAL_UART_RxCpltCallback+0x1822>
								x2 = x2+4;
 8005428:	4b13      	ldr	r3, [pc, #76]	@ (8005478 <HAL_UART_RxCpltCallback+0x17e4>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	3304      	adds	r3, #4
 800542e:	4a12      	ldr	r2, [pc, #72]	@ (8005478 <HAL_UART_RxCpltCallback+0x17e4>)
 8005430:	6013      	str	r3, [r2, #0]
								flip22 = 1;
 8005432:	4b15      	ldr	r3, [pc, #84]	@ (8005488 <HAL_UART_RxCpltCallback+0x17f4>)
 8005434:	2201      	movs	r2, #1
 8005436:	601a      	str	r2, [r3, #0]
								caminarD2 = 1;
 8005438:	4b14      	ldr	r3, [pc, #80]	@ (800548c <HAL_UART_RxCpltCallback+0x17f8>)
 800543a:	2201      	movs	r2, #1
 800543c:	701a      	strb	r2, [r3, #0]
								//FillRect(x1-1, y1, 1, 25, 0xF800);
								if(caminarD2 == 1){
 800543e:	4b13      	ldr	r3, [pc, #76]	@ (800548c <HAL_UART_RxCpltCallback+0x17f8>)
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	2b01      	cmp	r3, #1
 8005444:	d171      	bne.n	800552a <HAL_UART_RxCpltCallback+0x1896>
									running2++;
 8005446:	4b0a      	ldr	r3, [pc, #40]	@ (8005470 <HAL_UART_RxCpltCallback+0x17dc>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	3301      	adds	r3, #1
 800544c:	4a08      	ldr	r2, [pc, #32]	@ (8005470 <HAL_UART_RxCpltCallback+0x17dc>)
 800544e:	6013      	str	r3, [r2, #0]
									if (running2 == 4){
 8005450:	4b07      	ldr	r3, [pc, #28]	@ (8005470 <HAL_UART_RxCpltCallback+0x17dc>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2b04      	cmp	r3, #4
 8005456:	d103      	bne.n	8005460 <HAL_UART_RxCpltCallback+0x17cc>
										frame2=6;
 8005458:	4b06      	ldr	r3, [pc, #24]	@ (8005474 <HAL_UART_RxCpltCallback+0x17e0>)
 800545a:	2206      	movs	r2, #6
 800545c:	601a      	str	r2, [r3, #0]
 800545e:	e064      	b.n	800552a <HAL_UART_RxCpltCallback+0x1896>
									}else if (running2 == 8){
 8005460:	4b03      	ldr	r3, [pc, #12]	@ (8005470 <HAL_UART_RxCpltCallback+0x17dc>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2b08      	cmp	r3, #8
 8005466:	d113      	bne.n	8005490 <HAL_UART_RxCpltCallback+0x17fc>
										frame2=7;
 8005468:	4b02      	ldr	r3, [pc, #8]	@ (8005474 <HAL_UART_RxCpltCallback+0x17e0>)
 800546a:	2207      	movs	r2, #7
 800546c:	601a      	str	r2, [r3, #0]
 800546e:	e05c      	b.n	800552a <HAL_UART_RxCpltCallback+0x1896>
 8005470:	20014120 	.word	0x20014120
 8005474:	20012e58 	.word	0x20012e58
 8005478:	20012e4c 	.word	0x20012e4c
 800547c:	20012f10 	.word	0x20012f10
 8005480:	2001409e 	.word	0x2001409e
 8005484:	20014124 	.word	0x20014124
 8005488:	2001410c 	.word	0x2001410c
 800548c:	20014093 	.word	0x20014093
									}else if (running2 == 12){
 8005490:	4b7f      	ldr	r3, [pc, #508]	@ (8005690 <HAL_UART_RxCpltCallback+0x19fc>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2b0c      	cmp	r3, #12
 8005496:	d103      	bne.n	80054a0 <HAL_UART_RxCpltCallback+0x180c>
										frame2=8;
 8005498:	4b7e      	ldr	r3, [pc, #504]	@ (8005694 <HAL_UART_RxCpltCallback+0x1a00>)
 800549a:	2208      	movs	r2, #8
 800549c:	601a      	str	r2, [r3, #0]
 800549e:	e044      	b.n	800552a <HAL_UART_RxCpltCallback+0x1896>
									}else if (running2 >= 16){
 80054a0:	4b7b      	ldr	r3, [pc, #492]	@ (8005690 <HAL_UART_RxCpltCallback+0x19fc>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2b0f      	cmp	r3, #15
 80054a6:	dd40      	ble.n	800552a <HAL_UART_RxCpltCallback+0x1896>
										frame2=7;
 80054a8:	4b7a      	ldr	r3, [pc, #488]	@ (8005694 <HAL_UART_RxCpltCallback+0x1a00>)
 80054aa:	2207      	movs	r2, #7
 80054ac:	601a      	str	r2, [r3, #0]
										running2=0;
 80054ae:	4b78      	ldr	r3, [pc, #480]	@ (8005690 <HAL_UART_RxCpltCallback+0x19fc>)
 80054b0:	2200      	movs	r2, #0
 80054b2:	601a      	str	r2, [r3, #0]
 80054b4:	e039      	b.n	800552a <HAL_UART_RxCpltCallback+0x1896>
									}
								}
							}else if (shooting2 == 0){
 80054b6:	4b78      	ldr	r3, [pc, #480]	@ (8005698 <HAL_UART_RxCpltCallback+0x1a04>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d135      	bne.n	800552a <HAL_UART_RxCpltCallback+0x1896>
								x2 = x2+4;
 80054be:	4b77      	ldr	r3, [pc, #476]	@ (800569c <HAL_UART_RxCpltCallback+0x1a08>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	3304      	adds	r3, #4
 80054c4:	4a75      	ldr	r2, [pc, #468]	@ (800569c <HAL_UART_RxCpltCallback+0x1a08>)
 80054c6:	6013      	str	r3, [r2, #0]
								flip22 = 1;
 80054c8:	4b75      	ldr	r3, [pc, #468]	@ (80056a0 <HAL_UART_RxCpltCallback+0x1a0c>)
 80054ca:	2201      	movs	r2, #1
 80054cc:	601a      	str	r2, [r3, #0]
								caminarD2 = 1;
 80054ce:	4b75      	ldr	r3, [pc, #468]	@ (80056a4 <HAL_UART_RxCpltCallback+0x1a10>)
 80054d0:	2201      	movs	r2, #1
 80054d2:	701a      	strb	r2, [r3, #0]
								//FillRect(x1-1, y1, 1, 25, 0xF800);
								if(caminarD2 == 1){
 80054d4:	4b73      	ldr	r3, [pc, #460]	@ (80056a4 <HAL_UART_RxCpltCallback+0x1a10>)
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d126      	bne.n	800552a <HAL_UART_RxCpltCallback+0x1896>
									running2++;
 80054dc:	4b6c      	ldr	r3, [pc, #432]	@ (8005690 <HAL_UART_RxCpltCallback+0x19fc>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	3301      	adds	r3, #1
 80054e2:	4a6b      	ldr	r2, [pc, #428]	@ (8005690 <HAL_UART_RxCpltCallback+0x19fc>)
 80054e4:	6013      	str	r3, [r2, #0]
									if (running2 == 4){
 80054e6:	4b6a      	ldr	r3, [pc, #424]	@ (8005690 <HAL_UART_RxCpltCallback+0x19fc>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2b04      	cmp	r3, #4
 80054ec:	d103      	bne.n	80054f6 <HAL_UART_RxCpltCallback+0x1862>
										frame2=1;
 80054ee:	4b69      	ldr	r3, [pc, #420]	@ (8005694 <HAL_UART_RxCpltCallback+0x1a00>)
 80054f0:	2201      	movs	r2, #1
 80054f2:	601a      	str	r2, [r3, #0]
 80054f4:	e019      	b.n	800552a <HAL_UART_RxCpltCallback+0x1896>
									}else if (running2 == 8){
 80054f6:	4b66      	ldr	r3, [pc, #408]	@ (8005690 <HAL_UART_RxCpltCallback+0x19fc>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2b08      	cmp	r3, #8
 80054fc:	d103      	bne.n	8005506 <HAL_UART_RxCpltCallback+0x1872>
										frame2=2;
 80054fe:	4b65      	ldr	r3, [pc, #404]	@ (8005694 <HAL_UART_RxCpltCallback+0x1a00>)
 8005500:	2202      	movs	r2, #2
 8005502:	601a      	str	r2, [r3, #0]
 8005504:	e011      	b.n	800552a <HAL_UART_RxCpltCallback+0x1896>
									}else if (running2 == 12){
 8005506:	4b62      	ldr	r3, [pc, #392]	@ (8005690 <HAL_UART_RxCpltCallback+0x19fc>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2b0c      	cmp	r3, #12
 800550c:	d103      	bne.n	8005516 <HAL_UART_RxCpltCallback+0x1882>
										frame2=3;
 800550e:	4b61      	ldr	r3, [pc, #388]	@ (8005694 <HAL_UART_RxCpltCallback+0x1a00>)
 8005510:	2203      	movs	r2, #3
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	e009      	b.n	800552a <HAL_UART_RxCpltCallback+0x1896>
									}else if (running2 >= 16){
 8005516:	4b5e      	ldr	r3, [pc, #376]	@ (8005690 <HAL_UART_RxCpltCallback+0x19fc>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2b0f      	cmp	r3, #15
 800551c:	dd05      	ble.n	800552a <HAL_UART_RxCpltCallback+0x1896>
										frame2=2;
 800551e:	4b5d      	ldr	r3, [pc, #372]	@ (8005694 <HAL_UART_RxCpltCallback+0x1a00>)
 8005520:	2202      	movs	r2, #2
 8005522:	601a      	str	r2, [r3, #0]
										running2=0;
 8005524:	4b5a      	ldr	r3, [pc, #360]	@ (8005690 <HAL_UART_RxCpltCallback+0x19fc>)
 8005526:	2200      	movs	r2, #0
 8005528:	601a      	str	r2, [r3, #0]
									}
								}
							}
						}if (ch2 == 9){
 800552a:	4b5f      	ldr	r3, [pc, #380]	@ (80056a8 <HAL_UART_RxCpltCallback+0x1a14>)
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	2b09      	cmp	r3, #9
 8005530:	d174      	bne.n	800561c <HAL_UART_RxCpltCallback+0x1988>
							if (shooting2 == 1){
 8005532:	4b59      	ldr	r3, [pc, #356]	@ (8005698 <HAL_UART_RxCpltCallback+0x1a04>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d136      	bne.n	80055a8 <HAL_UART_RxCpltCallback+0x1914>
								x2 = x2+4;
 800553a:	4b58      	ldr	r3, [pc, #352]	@ (800569c <HAL_UART_RxCpltCallback+0x1a08>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	3304      	adds	r3, #4
 8005540:	4a56      	ldr	r2, [pc, #344]	@ (800569c <HAL_UART_RxCpltCallback+0x1a08>)
 8005542:	6013      	str	r3, [r2, #0]
								flip22 = 1;
 8005544:	4b56      	ldr	r3, [pc, #344]	@ (80056a0 <HAL_UART_RxCpltCallback+0x1a0c>)
 8005546:	2201      	movs	r2, #1
 8005548:	601a      	str	r2, [r3, #0]
								caminarD2 = 1;
 800554a:	4b56      	ldr	r3, [pc, #344]	@ (80056a4 <HAL_UART_RxCpltCallback+0x1a10>)
 800554c:	2201      	movs	r2, #1
 800554e:	701a      	strb	r2, [r3, #0]
								//FillRect(x1-1, y1, 1, 25, 0xF800);
								if(caminarD2 == 1){
 8005550:	4b54      	ldr	r3, [pc, #336]	@ (80056a4 <HAL_UART_RxCpltCallback+0x1a10>)
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d161      	bne.n	800561c <HAL_UART_RxCpltCallback+0x1988>
									running2++;
 8005558:	4b4d      	ldr	r3, [pc, #308]	@ (8005690 <HAL_UART_RxCpltCallback+0x19fc>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	3301      	adds	r3, #1
 800555e:	4a4c      	ldr	r2, [pc, #304]	@ (8005690 <HAL_UART_RxCpltCallback+0x19fc>)
 8005560:	6013      	str	r3, [r2, #0]
									if (running2 == 4){
 8005562:	4b4b      	ldr	r3, [pc, #300]	@ (8005690 <HAL_UART_RxCpltCallback+0x19fc>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2b04      	cmp	r3, #4
 8005568:	d103      	bne.n	8005572 <HAL_UART_RxCpltCallback+0x18de>
										frame2=6;
 800556a:	4b4a      	ldr	r3, [pc, #296]	@ (8005694 <HAL_UART_RxCpltCallback+0x1a00>)
 800556c:	2206      	movs	r2, #6
 800556e:	601a      	str	r2, [r3, #0]
 8005570:	e054      	b.n	800561c <HAL_UART_RxCpltCallback+0x1988>
									}else if (running2 == 8){
 8005572:	4b47      	ldr	r3, [pc, #284]	@ (8005690 <HAL_UART_RxCpltCallback+0x19fc>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2b08      	cmp	r3, #8
 8005578:	d103      	bne.n	8005582 <HAL_UART_RxCpltCallback+0x18ee>
										frame2=7;
 800557a:	4b46      	ldr	r3, [pc, #280]	@ (8005694 <HAL_UART_RxCpltCallback+0x1a00>)
 800557c:	2207      	movs	r2, #7
 800557e:	601a      	str	r2, [r3, #0]
 8005580:	e04c      	b.n	800561c <HAL_UART_RxCpltCallback+0x1988>
									}else if (running2 == 12){
 8005582:	4b43      	ldr	r3, [pc, #268]	@ (8005690 <HAL_UART_RxCpltCallback+0x19fc>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2b0c      	cmp	r3, #12
 8005588:	d103      	bne.n	8005592 <HAL_UART_RxCpltCallback+0x18fe>
										frame2=8;
 800558a:	4b42      	ldr	r3, [pc, #264]	@ (8005694 <HAL_UART_RxCpltCallback+0x1a00>)
 800558c:	2208      	movs	r2, #8
 800558e:	601a      	str	r2, [r3, #0]
 8005590:	e044      	b.n	800561c <HAL_UART_RxCpltCallback+0x1988>
									}else if (running2 >= 16){
 8005592:	4b3f      	ldr	r3, [pc, #252]	@ (8005690 <HAL_UART_RxCpltCallback+0x19fc>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2b0f      	cmp	r3, #15
 8005598:	dd40      	ble.n	800561c <HAL_UART_RxCpltCallback+0x1988>
										frame2=7;
 800559a:	4b3e      	ldr	r3, [pc, #248]	@ (8005694 <HAL_UART_RxCpltCallback+0x1a00>)
 800559c:	2207      	movs	r2, #7
 800559e:	601a      	str	r2, [r3, #0]
										running2=0;
 80055a0:	4b3b      	ldr	r3, [pc, #236]	@ (8005690 <HAL_UART_RxCpltCallback+0x19fc>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	601a      	str	r2, [r3, #0]
 80055a6:	e039      	b.n	800561c <HAL_UART_RxCpltCallback+0x1988>
									}
								}
							}else if (shooting2 == 0){
 80055a8:	4b3b      	ldr	r3, [pc, #236]	@ (8005698 <HAL_UART_RxCpltCallback+0x1a04>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d135      	bne.n	800561c <HAL_UART_RxCpltCallback+0x1988>
								x2 = x2+4;
 80055b0:	4b3a      	ldr	r3, [pc, #232]	@ (800569c <HAL_UART_RxCpltCallback+0x1a08>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	3304      	adds	r3, #4
 80055b6:	4a39      	ldr	r2, [pc, #228]	@ (800569c <HAL_UART_RxCpltCallback+0x1a08>)
 80055b8:	6013      	str	r3, [r2, #0]
								flip22 = 1;
 80055ba:	4b39      	ldr	r3, [pc, #228]	@ (80056a0 <HAL_UART_RxCpltCallback+0x1a0c>)
 80055bc:	2201      	movs	r2, #1
 80055be:	601a      	str	r2, [r3, #0]
								caminarD2 = 1;
 80055c0:	4b38      	ldr	r3, [pc, #224]	@ (80056a4 <HAL_UART_RxCpltCallback+0x1a10>)
 80055c2:	2201      	movs	r2, #1
 80055c4:	701a      	strb	r2, [r3, #0]
								//FillRect(x1-1, y1, 1, 25, 0xF800);
								if(caminarD2 == 1){
 80055c6:	4b37      	ldr	r3, [pc, #220]	@ (80056a4 <HAL_UART_RxCpltCallback+0x1a10>)
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d126      	bne.n	800561c <HAL_UART_RxCpltCallback+0x1988>
									running2++;
 80055ce:	4b30      	ldr	r3, [pc, #192]	@ (8005690 <HAL_UART_RxCpltCallback+0x19fc>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	3301      	adds	r3, #1
 80055d4:	4a2e      	ldr	r2, [pc, #184]	@ (8005690 <HAL_UART_RxCpltCallback+0x19fc>)
 80055d6:	6013      	str	r3, [r2, #0]
									if (running2 == 4){
 80055d8:	4b2d      	ldr	r3, [pc, #180]	@ (8005690 <HAL_UART_RxCpltCallback+0x19fc>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2b04      	cmp	r3, #4
 80055de:	d103      	bne.n	80055e8 <HAL_UART_RxCpltCallback+0x1954>
										frame2=1;
 80055e0:	4b2c      	ldr	r3, [pc, #176]	@ (8005694 <HAL_UART_RxCpltCallback+0x1a00>)
 80055e2:	2201      	movs	r2, #1
 80055e4:	601a      	str	r2, [r3, #0]
 80055e6:	e019      	b.n	800561c <HAL_UART_RxCpltCallback+0x1988>
									}else if (running2 == 8){
 80055e8:	4b29      	ldr	r3, [pc, #164]	@ (8005690 <HAL_UART_RxCpltCallback+0x19fc>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2b08      	cmp	r3, #8
 80055ee:	d103      	bne.n	80055f8 <HAL_UART_RxCpltCallback+0x1964>
										frame2=2;
 80055f0:	4b28      	ldr	r3, [pc, #160]	@ (8005694 <HAL_UART_RxCpltCallback+0x1a00>)
 80055f2:	2202      	movs	r2, #2
 80055f4:	601a      	str	r2, [r3, #0]
 80055f6:	e011      	b.n	800561c <HAL_UART_RxCpltCallback+0x1988>
									}else if (running2 == 12){
 80055f8:	4b25      	ldr	r3, [pc, #148]	@ (8005690 <HAL_UART_RxCpltCallback+0x19fc>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2b0c      	cmp	r3, #12
 80055fe:	d103      	bne.n	8005608 <HAL_UART_RxCpltCallback+0x1974>
										frame2=3;
 8005600:	4b24      	ldr	r3, [pc, #144]	@ (8005694 <HAL_UART_RxCpltCallback+0x1a00>)
 8005602:	2203      	movs	r2, #3
 8005604:	601a      	str	r2, [r3, #0]
 8005606:	e009      	b.n	800561c <HAL_UART_RxCpltCallback+0x1988>
									}else if (running2 >= 16){
 8005608:	4b21      	ldr	r3, [pc, #132]	@ (8005690 <HAL_UART_RxCpltCallback+0x19fc>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2b0f      	cmp	r3, #15
 800560e:	dd05      	ble.n	800561c <HAL_UART_RxCpltCallback+0x1988>
										frame2=2;
 8005610:	4b20      	ldr	r3, [pc, #128]	@ (8005694 <HAL_UART_RxCpltCallback+0x1a00>)
 8005612:	2202      	movs	r2, #2
 8005614:	601a      	str	r2, [r3, #0]
										running2=0;
 8005616:	4b1e      	ldr	r3, [pc, #120]	@ (8005690 <HAL_UART_RxCpltCallback+0x19fc>)
 8005618:	2200      	movs	r2, #0
 800561a:	601a      	str	r2, [r3, #0]
									}
								}
							}
						}
						if(x2 >= 281){
 800561c:	4b1f      	ldr	r3, [pc, #124]	@ (800569c <HAL_UART_RxCpltCallback+0x1a08>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8005624:	f340 8157 	ble.w	80058d6 <HAL_UART_RxCpltCallback+0x1c42>
							x2 = 280;
 8005628:	4b1c      	ldr	r3, [pc, #112]	@ (800569c <HAL_UART_RxCpltCallback+0x1a08>)
 800562a:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800562e:	601a      	str	r2, [r3, #0]
						}
							break;
 8005630:	e151      	b.n	80058d6 <HAL_UART_RxCpltCallback+0x1c42>
						case 'o':
							strcpy(tx_buffer, "o");
 8005632:	4b1e      	ldr	r3, [pc, #120]	@ (80056ac <HAL_UART_RxCpltCallback+0x1a18>)
 8005634:	226f      	movs	r2, #111	@ 0x6f
 8005636:	801a      	strh	r2, [r3, #0]
							transmit_uart3("z");
 8005638:	481d      	ldr	r0, [pc, #116]	@ (80056b0 <HAL_UART_RxCpltCallback+0x1a1c>)
 800563a:	f7fe fa9b 	bl	8003b74 <transmit_uart3>
							if (ch2 == 1){
 800563e:	4b1a      	ldr	r3, [pc, #104]	@ (80056a8 <HAL_UART_RxCpltCallback+0x1a14>)
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d13e      	bne.n	80056c4 <HAL_UART_RxCpltCallback+0x1a30>
								if (jumpcount2 != 2){
 8005646:	4b1b      	ldr	r3, [pc, #108]	@ (80056b4 <HAL_UART_RxCpltCallback+0x1a20>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2b02      	cmp	r3, #2
 800564c:	f000 8145 	beq.w	80058da <HAL_UART_RxCpltCallback+0x1c46>
									vY2 = -8;
 8005650:	4b19      	ldr	r3, [pc, #100]	@ (80056b8 <HAL_UART_RxCpltCallback+0x1a24>)
 8005652:	f06f 0207 	mvn.w	r2, #7
 8005656:	601a      	str	r2, [r3, #0]
									jump2 = 1;
 8005658:	4b18      	ldr	r3, [pc, #96]	@ (80056bc <HAL_UART_RxCpltCallback+0x1a28>)
 800565a:	2201      	movs	r2, #1
 800565c:	601a      	str	r2, [r3, #0]
									jumpcount2++;
 800565e:	4b15      	ldr	r3, [pc, #84]	@ (80056b4 <HAL_UART_RxCpltCallback+0x1a20>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	3301      	adds	r3, #1
 8005664:	4a13      	ldr	r2, [pc, #76]	@ (80056b4 <HAL_UART_RxCpltCallback+0x1a20>)
 8005666:	6013      	str	r3, [r2, #0]
									falling2 = 0;
 8005668:	4b15      	ldr	r3, [pc, #84]	@ (80056c0 <HAL_UART_RxCpltCallback+0x1a2c>)
 800566a:	2200      	movs	r2, #0
 800566c:	601a      	str	r2, [r3, #0]
									if (shooting2 == 0){
 800566e:	4b0a      	ldr	r3, [pc, #40]	@ (8005698 <HAL_UART_RxCpltCallback+0x1a04>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d103      	bne.n	800567e <HAL_UART_RxCpltCallback+0x19ea>
										frame2 = 4;
 8005676:	4b07      	ldr	r3, [pc, #28]	@ (8005694 <HAL_UART_RxCpltCallback+0x1a00>)
 8005678:	2204      	movs	r2, #4
 800567a:	601a      	str	r2, [r3, #0]
									}else if (shooting2 == 1){
										frame2 = 9;
									}
								}
							}
							break;
 800567c:	e12d      	b.n	80058da <HAL_UART_RxCpltCallback+0x1c46>
									}else if (shooting2 == 1){
 800567e:	4b06      	ldr	r3, [pc, #24]	@ (8005698 <HAL_UART_RxCpltCallback+0x1a04>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2b01      	cmp	r3, #1
 8005684:	f040 8129 	bne.w	80058da <HAL_UART_RxCpltCallback+0x1c46>
										frame2 = 9;
 8005688:	4b02      	ldr	r3, [pc, #8]	@ (8005694 <HAL_UART_RxCpltCallback+0x1a00>)
 800568a:	2209      	movs	r2, #9
 800568c:	601a      	str	r2, [r3, #0]
							break;
 800568e:	e124      	b.n	80058da <HAL_UART_RxCpltCallback+0x1c46>
 8005690:	20014120 	.word	0x20014120
 8005694:	20012e58 	.word	0x20012e58
 8005698:	20014124 	.word	0x20014124
 800569c:	20012e4c 	.word	0x20012e4c
 80056a0:	2001410c 	.word	0x2001410c
 80056a4:	20014093 	.word	0x20014093
 80056a8:	2001409e 	.word	0x2001409e
 80056ac:	20012f10 	.word	0x20012f10
 80056b0:	0800970c 	.word	0x0800970c
 80056b4:	2001411c 	.word	0x2001411c
 80056b8:	20014114 	.word	0x20014114
 80056bc:	20014118 	.word	0x20014118
 80056c0:	20012e5c 	.word	0x20012e5c
							}else if (ch2 == 5){
 80056c4:	4b8c      	ldr	r3, [pc, #560]	@ (80058f8 <HAL_UART_RxCpltCallback+0x1c64>)
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	2b05      	cmp	r3, #5
 80056ca:	d12c      	bne.n	8005726 <HAL_UART_RxCpltCallback+0x1a92>
								if (jumpcount2 != 2){
 80056cc:	4b8b      	ldr	r3, [pc, #556]	@ (80058fc <HAL_UART_RxCpltCallback+0x1c68>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	f000 8102 	beq.w	80058da <HAL_UART_RxCpltCallback+0x1c46>
									vY2 = -8;
 80056d6:	4b8a      	ldr	r3, [pc, #552]	@ (8005900 <HAL_UART_RxCpltCallback+0x1c6c>)
 80056d8:	f06f 0207 	mvn.w	r2, #7
 80056dc:	601a      	str	r2, [r3, #0]
									jump2 = 1;
 80056de:	4b89      	ldr	r3, [pc, #548]	@ (8005904 <HAL_UART_RxCpltCallback+0x1c70>)
 80056e0:	2201      	movs	r2, #1
 80056e2:	601a      	str	r2, [r3, #0]
									jumpcount2++;
 80056e4:	4b85      	ldr	r3, [pc, #532]	@ (80058fc <HAL_UART_RxCpltCallback+0x1c68>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	3301      	adds	r3, #1
 80056ea:	4a84      	ldr	r2, [pc, #528]	@ (80058fc <HAL_UART_RxCpltCallback+0x1c68>)
 80056ec:	6013      	str	r3, [r2, #0]
									falling2 = 0;
 80056ee:	4b86      	ldr	r3, [pc, #536]	@ (8005908 <HAL_UART_RxCpltCallback+0x1c74>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	601a      	str	r2, [r3, #0]
									if (shooting2 == 0){
 80056f4:	4b85      	ldr	r3, [pc, #532]	@ (800590c <HAL_UART_RxCpltCallback+0x1c78>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d103      	bne.n	8005704 <HAL_UART_RxCpltCallback+0x1a70>
										frame2 = 4;
 80056fc:	4b84      	ldr	r3, [pc, #528]	@ (8005910 <HAL_UART_RxCpltCallback+0x1c7c>)
 80056fe:	2204      	movs	r2, #4
 8005700:	601a      	str	r2, [r3, #0]
							break;
 8005702:	e0ea      	b.n	80058da <HAL_UART_RxCpltCallback+0x1c46>
									}else if (shooting2 == 1){
 8005704:	4b81      	ldr	r3, [pc, #516]	@ (800590c <HAL_UART_RxCpltCallback+0x1c78>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d103      	bne.n	8005714 <HAL_UART_RxCpltCallback+0x1a80>
										frame2 = 4;
 800570c:	4b80      	ldr	r3, [pc, #512]	@ (8005910 <HAL_UART_RxCpltCallback+0x1c7c>)
 800570e:	2204      	movs	r2, #4
 8005710:	601a      	str	r2, [r3, #0]
							break;
 8005712:	e0e2      	b.n	80058da <HAL_UART_RxCpltCallback+0x1c46>
									}else if (shooting2 == 2){
 8005714:	4b7d      	ldr	r3, [pc, #500]	@ (800590c <HAL_UART_RxCpltCallback+0x1c78>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2b02      	cmp	r3, #2
 800571a:	f040 80de 	bne.w	80058da <HAL_UART_RxCpltCallback+0x1c46>
										frame2 = 8;
 800571e:	4b7c      	ldr	r3, [pc, #496]	@ (8005910 <HAL_UART_RxCpltCallback+0x1c7c>)
 8005720:	2208      	movs	r2, #8
 8005722:	601a      	str	r2, [r3, #0]
							break;
 8005724:	e0d9      	b.n	80058da <HAL_UART_RxCpltCallback+0x1c46>
							}else if (ch2 == 8){
 8005726:	4b74      	ldr	r3, [pc, #464]	@ (80058f8 <HAL_UART_RxCpltCallback+0x1c64>)
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	2b08      	cmp	r3, #8
 800572c:	d124      	bne.n	8005778 <HAL_UART_RxCpltCallback+0x1ae4>
								if (jumpcount2 != 2){
 800572e:	4b73      	ldr	r3, [pc, #460]	@ (80058fc <HAL_UART_RxCpltCallback+0x1c68>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2b02      	cmp	r3, #2
 8005734:	f000 80d1 	beq.w	80058da <HAL_UART_RxCpltCallback+0x1c46>
									vY2 = -8;
 8005738:	4b71      	ldr	r3, [pc, #452]	@ (8005900 <HAL_UART_RxCpltCallback+0x1c6c>)
 800573a:	f06f 0207 	mvn.w	r2, #7
 800573e:	601a      	str	r2, [r3, #0]
									jump2 = 1;
 8005740:	4b70      	ldr	r3, [pc, #448]	@ (8005904 <HAL_UART_RxCpltCallback+0x1c70>)
 8005742:	2201      	movs	r2, #1
 8005744:	601a      	str	r2, [r3, #0]
									jumpcount2++;
 8005746:	4b6d      	ldr	r3, [pc, #436]	@ (80058fc <HAL_UART_RxCpltCallback+0x1c68>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	3301      	adds	r3, #1
 800574c:	4a6b      	ldr	r2, [pc, #428]	@ (80058fc <HAL_UART_RxCpltCallback+0x1c68>)
 800574e:	6013      	str	r3, [r2, #0]
									falling2 = 0;
 8005750:	4b6d      	ldr	r3, [pc, #436]	@ (8005908 <HAL_UART_RxCpltCallback+0x1c74>)
 8005752:	2200      	movs	r2, #0
 8005754:	601a      	str	r2, [r3, #0]
									if (shooting2 == 0){
 8005756:	4b6d      	ldr	r3, [pc, #436]	@ (800590c <HAL_UART_RxCpltCallback+0x1c78>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d103      	bne.n	8005766 <HAL_UART_RxCpltCallback+0x1ad2>
										frame2 = 4;
 800575e:	4b6c      	ldr	r3, [pc, #432]	@ (8005910 <HAL_UART_RxCpltCallback+0x1c7c>)
 8005760:	2204      	movs	r2, #4
 8005762:	601a      	str	r2, [r3, #0]
							break;
 8005764:	e0b9      	b.n	80058da <HAL_UART_RxCpltCallback+0x1c46>
									}else if (shooting2 == 1){
 8005766:	4b69      	ldr	r3, [pc, #420]	@ (800590c <HAL_UART_RxCpltCallback+0x1c78>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2b01      	cmp	r3, #1
 800576c:	f040 80b5 	bne.w	80058da <HAL_UART_RxCpltCallback+0x1c46>
										frame2 = 9;
 8005770:	4b67      	ldr	r3, [pc, #412]	@ (8005910 <HAL_UART_RxCpltCallback+0x1c7c>)
 8005772:	2209      	movs	r2, #9
 8005774:	601a      	str	r2, [r3, #0]
							break;
 8005776:	e0b0      	b.n	80058da <HAL_UART_RxCpltCallback+0x1c46>
							}else if (ch2 == 9){
 8005778:	4b5f      	ldr	r3, [pc, #380]	@ (80058f8 <HAL_UART_RxCpltCallback+0x1c64>)
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	2b09      	cmp	r3, #9
 800577e:	f040 80ac 	bne.w	80058da <HAL_UART_RxCpltCallback+0x1c46>
								if (jumpcount2 != 2){
 8005782:	4b5e      	ldr	r3, [pc, #376]	@ (80058fc <HAL_UART_RxCpltCallback+0x1c68>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2b02      	cmp	r3, #2
 8005788:	f000 80a7 	beq.w	80058da <HAL_UART_RxCpltCallback+0x1c46>
									vY2 = -8;
 800578c:	4b5c      	ldr	r3, [pc, #368]	@ (8005900 <HAL_UART_RxCpltCallback+0x1c6c>)
 800578e:	f06f 0207 	mvn.w	r2, #7
 8005792:	601a      	str	r2, [r3, #0]
									jump2 = 1;
 8005794:	4b5b      	ldr	r3, [pc, #364]	@ (8005904 <HAL_UART_RxCpltCallback+0x1c70>)
 8005796:	2201      	movs	r2, #1
 8005798:	601a      	str	r2, [r3, #0]
									jumpcount2++;
 800579a:	4b58      	ldr	r3, [pc, #352]	@ (80058fc <HAL_UART_RxCpltCallback+0x1c68>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	3301      	adds	r3, #1
 80057a0:	4a56      	ldr	r2, [pc, #344]	@ (80058fc <HAL_UART_RxCpltCallback+0x1c68>)
 80057a2:	6013      	str	r3, [r2, #0]
									falling2 = 0;
 80057a4:	4b58      	ldr	r3, [pc, #352]	@ (8005908 <HAL_UART_RxCpltCallback+0x1c74>)
 80057a6:	2200      	movs	r2, #0
 80057a8:	601a      	str	r2, [r3, #0]
									if (shooting2 == 0){
 80057aa:	4b58      	ldr	r3, [pc, #352]	@ (800590c <HAL_UART_RxCpltCallback+0x1c78>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d103      	bne.n	80057ba <HAL_UART_RxCpltCallback+0x1b26>
										frame2 = 4;
 80057b2:	4b57      	ldr	r3, [pc, #348]	@ (8005910 <HAL_UART_RxCpltCallback+0x1c7c>)
 80057b4:	2204      	movs	r2, #4
 80057b6:	601a      	str	r2, [r3, #0]
							break;
 80057b8:	e08f      	b.n	80058da <HAL_UART_RxCpltCallback+0x1c46>
									}else if (shooting2 == 1){
 80057ba:	4b54      	ldr	r3, [pc, #336]	@ (800590c <HAL_UART_RxCpltCallback+0x1c78>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2b01      	cmp	r3, #1
 80057c0:	f040 808b 	bne.w	80058da <HAL_UART_RxCpltCallback+0x1c46>
										frame2 = 9;
 80057c4:	4b52      	ldr	r3, [pc, #328]	@ (8005910 <HAL_UART_RxCpltCallback+0x1c7c>)
 80057c6:	2209      	movs	r2, #9
 80057c8:	601a      	str	r2, [r3, #0]
							break;
 80057ca:	e086      	b.n	80058da <HAL_UART_RxCpltCallback+0x1c46>
						case 'u':
							strcpy(tx_buffer, "u");
 80057cc:	4b51      	ldr	r3, [pc, #324]	@ (8005914 <HAL_UART_RxCpltCallback+0x1c80>)
 80057ce:	2275      	movs	r2, #117	@ 0x75
 80057d0:	801a      	strh	r2, [r3, #0]
							transmit_uart3("s");
 80057d2:	4851      	ldr	r0, [pc, #324]	@ (8005918 <HAL_UART_RxCpltCallback+0x1c84>)
 80057d4:	f7fe f9ce 	bl	8003b74 <transmit_uart3>
							if (ch2==1){
 80057d8:	4b47      	ldr	r3, [pc, #284]	@ (80058f8 <HAL_UART_RxCpltCallback+0x1c64>)
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d109      	bne.n	80057f4 <HAL_UART_RxCpltCallback+0x1b60>
								shooting2 = 1;
 80057e0:	4b4a      	ldr	r3, [pc, #296]	@ (800590c <HAL_UART_RxCpltCallback+0x1c78>)
 80057e2:	2201      	movs	r2, #1
 80057e4:	601a      	str	r2, [r3, #0]
								frame2 = 5;
 80057e6:	4b4a      	ldr	r3, [pc, #296]	@ (8005910 <HAL_UART_RxCpltCallback+0x1c7c>)
 80057e8:	2205      	movs	r2, #5
 80057ea:	601a      	str	r2, [r3, #0]
								bala2 = 1;
 80057ec:	4b4b      	ldr	r3, [pc, #300]	@ (800591c <HAL_UART_RxCpltCallback+0x1c88>)
 80057ee:	2201      	movs	r2, #1
 80057f0:	601a      	str	r2, [r3, #0]
							}else if (ch2 == 9){
								shooting2 = 1;
								frame2 = 5;
								bala2 = 1;
							}
							break;
 80057f2:	e074      	b.n	80058de <HAL_UART_RxCpltCallback+0x1c4a>
							}else if (ch2 == 5){
 80057f4:	4b40      	ldr	r3, [pc, #256]	@ (80058f8 <HAL_UART_RxCpltCallback+0x1c64>)
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	2b05      	cmp	r3, #5
 80057fa:	d133      	bne.n	8005864 <HAL_UART_RxCpltCallback+0x1bd0>
								shooting2++;
 80057fc:	4b43      	ldr	r3, [pc, #268]	@ (800590c <HAL_UART_RxCpltCallback+0x1c78>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	3301      	adds	r3, #1
 8005802:	4a42      	ldr	r2, [pc, #264]	@ (800590c <HAL_UART_RxCpltCallback+0x1c78>)
 8005804:	6013      	str	r3, [r2, #0]
								if (jump2 == 1 && shooting2 == 3){
 8005806:	4b3f      	ldr	r3, [pc, #252]	@ (8005904 <HAL_UART_RxCpltCallback+0x1c70>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2b01      	cmp	r3, #1
 800580c:	d10c      	bne.n	8005828 <HAL_UART_RxCpltCallback+0x1b94>
 800580e:	4b3f      	ldr	r3, [pc, #252]	@ (800590c <HAL_UART_RxCpltCallback+0x1c78>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2b03      	cmp	r3, #3
 8005814:	d108      	bne.n	8005828 <HAL_UART_RxCpltCallback+0x1b94>
									frame2 = 9;
 8005816:	4b3e      	ldr	r3, [pc, #248]	@ (8005910 <HAL_UART_RxCpltCallback+0x1c7c>)
 8005818:	2209      	movs	r2, #9
 800581a:	601a      	str	r2, [r3, #0]
									bala2 = 1;
 800581c:	4b3f      	ldr	r3, [pc, #252]	@ (800591c <HAL_UART_RxCpltCallback+0x1c88>)
 800581e:	2201      	movs	r2, #1
 8005820:	601a      	str	r2, [r3, #0]
									shooting2 = 0;
 8005822:	4b3a      	ldr	r3, [pc, #232]	@ (800590c <HAL_UART_RxCpltCallback+0x1c78>)
 8005824:	2200      	movs	r2, #0
 8005826:	601a      	str	r2, [r3, #0]
								if (shooting2==1){
 8005828:	4b38      	ldr	r3, [pc, #224]	@ (800590c <HAL_UART_RxCpltCallback+0x1c78>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d103      	bne.n	8005838 <HAL_UART_RxCpltCallback+0x1ba4>
									frame2 = 5;
 8005830:	4b37      	ldr	r3, [pc, #220]	@ (8005910 <HAL_UART_RxCpltCallback+0x1c7c>)
 8005832:	2205      	movs	r2, #5
 8005834:	601a      	str	r2, [r3, #0]
							break;
 8005836:	e052      	b.n	80058de <HAL_UART_RxCpltCallback+0x1c4a>
								}else if (shooting2==2){
 8005838:	4b34      	ldr	r3, [pc, #208]	@ (800590c <HAL_UART_RxCpltCallback+0x1c78>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2b02      	cmp	r3, #2
 800583e:	d103      	bne.n	8005848 <HAL_UART_RxCpltCallback+0x1bb4>
									frame2 = 6;
 8005840:	4b33      	ldr	r3, [pc, #204]	@ (8005910 <HAL_UART_RxCpltCallback+0x1c7c>)
 8005842:	2206      	movs	r2, #6
 8005844:	601a      	str	r2, [r3, #0]
							break;
 8005846:	e04a      	b.n	80058de <HAL_UART_RxCpltCallback+0x1c4a>
								}else if (shooting2 == 3){
 8005848:	4b30      	ldr	r3, [pc, #192]	@ (800590c <HAL_UART_RxCpltCallback+0x1c78>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2b03      	cmp	r3, #3
 800584e:	d146      	bne.n	80058de <HAL_UART_RxCpltCallback+0x1c4a>
									frame2 = 7;
 8005850:	4b2f      	ldr	r3, [pc, #188]	@ (8005910 <HAL_UART_RxCpltCallback+0x1c7c>)
 8005852:	2207      	movs	r2, #7
 8005854:	601a      	str	r2, [r3, #0]
									bala2 = 1;
 8005856:	4b31      	ldr	r3, [pc, #196]	@ (800591c <HAL_UART_RxCpltCallback+0x1c88>)
 8005858:	2201      	movs	r2, #1
 800585a:	601a      	str	r2, [r3, #0]
									shooting2 = 0;
 800585c:	4b2b      	ldr	r3, [pc, #172]	@ (800590c <HAL_UART_RxCpltCallback+0x1c78>)
 800585e:	2200      	movs	r2, #0
 8005860:	601a      	str	r2, [r3, #0]
							break;
 8005862:	e03c      	b.n	80058de <HAL_UART_RxCpltCallback+0x1c4a>
							}else if (ch2 == 8){
 8005864:	4b24      	ldr	r3, [pc, #144]	@ (80058f8 <HAL_UART_RxCpltCallback+0x1c64>)
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	2b08      	cmp	r3, #8
 800586a:	d109      	bne.n	8005880 <HAL_UART_RxCpltCallback+0x1bec>
								shooting2 = 1;
 800586c:	4b27      	ldr	r3, [pc, #156]	@ (800590c <HAL_UART_RxCpltCallback+0x1c78>)
 800586e:	2201      	movs	r2, #1
 8005870:	601a      	str	r2, [r3, #0]
								frame2 = 5;
 8005872:	4b27      	ldr	r3, [pc, #156]	@ (8005910 <HAL_UART_RxCpltCallback+0x1c7c>)
 8005874:	2205      	movs	r2, #5
 8005876:	601a      	str	r2, [r3, #0]
								bala2 = 1;
 8005878:	4b28      	ldr	r3, [pc, #160]	@ (800591c <HAL_UART_RxCpltCallback+0x1c88>)
 800587a:	2201      	movs	r2, #1
 800587c:	601a      	str	r2, [r3, #0]
							break;
 800587e:	e02e      	b.n	80058de <HAL_UART_RxCpltCallback+0x1c4a>
							}else if (ch2 == 9){
 8005880:	4b1d      	ldr	r3, [pc, #116]	@ (80058f8 <HAL_UART_RxCpltCallback+0x1c64>)
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	2b09      	cmp	r3, #9
 8005886:	d12a      	bne.n	80058de <HAL_UART_RxCpltCallback+0x1c4a>
								shooting2 = 1;
 8005888:	4b20      	ldr	r3, [pc, #128]	@ (800590c <HAL_UART_RxCpltCallback+0x1c78>)
 800588a:	2201      	movs	r2, #1
 800588c:	601a      	str	r2, [r3, #0]
								frame2 = 5;
 800588e:	4b20      	ldr	r3, [pc, #128]	@ (8005910 <HAL_UART_RxCpltCallback+0x1c7c>)
 8005890:	2205      	movs	r2, #5
 8005892:	601a      	str	r2, [r3, #0]
								bala2 = 1;
 8005894:	4b21      	ldr	r3, [pc, #132]	@ (800591c <HAL_UART_RxCpltCallback+0x1c88>)
 8005896:	2201      	movs	r2, #1
 8005898:	601a      	str	r2, [r3, #0]
							break;
 800589a:	e020      	b.n	80058de <HAL_UART_RxCpltCallback+0x1c4a>
						default:
							break;
						}
			}else if (modo == 8){
 800589c:	4b20      	ldr	r3, [pc, #128]	@ (8005920 <HAL_UART_RxCpltCallback+0x1c8c>)
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	2b08      	cmp	r3, #8
 80058a2:	d11f      	bne.n	80058e4 <HAL_UART_RxCpltCallback+0x1c50>
				switch (option2[0]){
 80058a4:	4b1f      	ldr	r3, [pc, #124]	@ (8005924 <HAL_UART_RxCpltCallback+0x1c90>)
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	2b6d      	cmp	r3, #109	@ 0x6d
 80058aa:	d11a      	bne.n	80058e2 <HAL_UART_RxCpltCallback+0x1c4e>
				case 'm':
					strcpy(tx_buffer, "m");
 80058ac:	4b19      	ldr	r3, [pc, #100]	@ (8005914 <HAL_UART_RxCpltCallback+0x1c80>)
 80058ae:	226d      	movs	r2, #109	@ 0x6d
 80058b0:	801a      	strh	r2, [r3, #0]
					start = 1;
 80058b2:	4b1d      	ldr	r3, [pc, #116]	@ (8005928 <HAL_UART_RxCpltCallback+0x1c94>)
 80058b4:	2201      	movs	r2, #1
 80058b6:	701a      	strb	r2, [r3, #0]
					break;
 80058b8:	e014      	b.n	80058e4 <HAL_UART_RxCpltCallback+0x1c50>
							break;
 80058ba:	bf00      	nop
 80058bc:	e012      	b.n	80058e4 <HAL_UART_RxCpltCallback+0x1c50>
							break;
 80058be:	bf00      	nop
 80058c0:	e010      	b.n	80058e4 <HAL_UART_RxCpltCallback+0x1c50>
							break;
 80058c2:	bf00      	nop
 80058c4:	e00e      	b.n	80058e4 <HAL_UART_RxCpltCallback+0x1c50>
							break;
 80058c6:	bf00      	nop
 80058c8:	e00c      	b.n	80058e4 <HAL_UART_RxCpltCallback+0x1c50>
							break;
 80058ca:	bf00      	nop
 80058cc:	e00a      	b.n	80058e4 <HAL_UART_RxCpltCallback+0x1c50>
							break;
 80058ce:	bf00      	nop
 80058d0:	e008      	b.n	80058e4 <HAL_UART_RxCpltCallback+0x1c50>
							break;
 80058d2:	bf00      	nop
 80058d4:	e006      	b.n	80058e4 <HAL_UART_RxCpltCallback+0x1c50>
							break;
 80058d6:	bf00      	nop
 80058d8:	e004      	b.n	80058e4 <HAL_UART_RxCpltCallback+0x1c50>
							break;
 80058da:	bf00      	nop
 80058dc:	e002      	b.n	80058e4 <HAL_UART_RxCpltCallback+0x1c50>
							break;
 80058de:	bf00      	nop
 80058e0:	e000      	b.n	80058e4 <HAL_UART_RxCpltCallback+0x1c50>
					default:
					break;
 80058e2:	bf00      	nop
				}
			}
			//transmit_uart2(option2);
			HAL_UART_Receive_IT(&huart5, option2, 1);  // EMPEZAR RECEPCIÓN
 80058e4:	2201      	movs	r2, #1
 80058e6:	490f      	ldr	r1, [pc, #60]	@ (8005924 <HAL_UART_RxCpltCallback+0x1c90>)
 80058e8:	4810      	ldr	r0, [pc, #64]	@ (800592c <HAL_UART_RxCpltCallback+0x1c98>)
 80058ea:	f001 fcf1 	bl	80072d0 <HAL_UART_Receive_IT>
	}
}
 80058ee:	bf00      	nop
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	2001409e 	.word	0x2001409e
 80058fc:	2001411c 	.word	0x2001411c
 8005900:	20014114 	.word	0x20014114
 8005904:	20014118 	.word	0x20014118
 8005908:	20012e5c 	.word	0x20012e5c
 800590c:	20014124 	.word	0x20014124
 8005910:	20012e58 	.word	0x20012e58
 8005914:	20012f10 	.word	0x20012f10
 8005918:	08009710 	.word	0x08009710
 800591c:	20014138 	.word	0x20014138
 8005920:	20014090 	.word	0x20014090
 8005924:	20012f0c 	.word	0x20012f0c
 8005928:	20014095 	.word	0x20014095
 800592c:	20013fb8 	.word	0x20013fb8

08005930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005930:	b480      	push	{r7}
 8005932:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005934:	b672      	cpsid	i
}
 8005936:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8005938:	bf00      	nop
 800593a:	e7fd      	b.n	8005938 <Error_Handler+0x8>

0800593c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005942:	2300      	movs	r3, #0
 8005944:	607b      	str	r3, [r7, #4]
 8005946:	4b10      	ldr	r3, [pc, #64]	@ (8005988 <HAL_MspInit+0x4c>)
 8005948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800594a:	4a0f      	ldr	r2, [pc, #60]	@ (8005988 <HAL_MspInit+0x4c>)
 800594c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005950:	6453      	str	r3, [r2, #68]	@ 0x44
 8005952:	4b0d      	ldr	r3, [pc, #52]	@ (8005988 <HAL_MspInit+0x4c>)
 8005954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005956:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800595a:	607b      	str	r3, [r7, #4]
 800595c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800595e:	2300      	movs	r3, #0
 8005960:	603b      	str	r3, [r7, #0]
 8005962:	4b09      	ldr	r3, [pc, #36]	@ (8005988 <HAL_MspInit+0x4c>)
 8005964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005966:	4a08      	ldr	r2, [pc, #32]	@ (8005988 <HAL_MspInit+0x4c>)
 8005968:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800596c:	6413      	str	r3, [r2, #64]	@ 0x40
 800596e:	4b06      	ldr	r3, [pc, #24]	@ (8005988 <HAL_MspInit+0x4c>)
 8005970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005972:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005976:	603b      	str	r3, [r7, #0]
 8005978:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800597a:	bf00      	nop
 800597c:	370c      	adds	r7, #12
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	40023800 	.word	0x40023800

0800598c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b08a      	sub	sp, #40	@ 0x28
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005994:	f107 0314 	add.w	r3, r7, #20
 8005998:	2200      	movs	r2, #0
 800599a:	601a      	str	r2, [r3, #0]
 800599c:	605a      	str	r2, [r3, #4]
 800599e:	609a      	str	r2, [r3, #8]
 80059a0:	60da      	str	r2, [r3, #12]
 80059a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a19      	ldr	r2, [pc, #100]	@ (8005a10 <HAL_SPI_MspInit+0x84>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d12b      	bne.n	8005a06 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80059ae:	2300      	movs	r3, #0
 80059b0:	613b      	str	r3, [r7, #16]
 80059b2:	4b18      	ldr	r3, [pc, #96]	@ (8005a14 <HAL_SPI_MspInit+0x88>)
 80059b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059b6:	4a17      	ldr	r2, [pc, #92]	@ (8005a14 <HAL_SPI_MspInit+0x88>)
 80059b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80059bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80059be:	4b15      	ldr	r3, [pc, #84]	@ (8005a14 <HAL_SPI_MspInit+0x88>)
 80059c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80059c6:	613b      	str	r3, [r7, #16]
 80059c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059ca:	2300      	movs	r3, #0
 80059cc:	60fb      	str	r3, [r7, #12]
 80059ce:	4b11      	ldr	r3, [pc, #68]	@ (8005a14 <HAL_SPI_MspInit+0x88>)
 80059d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059d2:	4a10      	ldr	r2, [pc, #64]	@ (8005a14 <HAL_SPI_MspInit+0x88>)
 80059d4:	f043 0301 	orr.w	r3, r3, #1
 80059d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80059da:	4b0e      	ldr	r3, [pc, #56]	@ (8005a14 <HAL_SPI_MspInit+0x88>)
 80059dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059de:	f003 0301 	and.w	r3, r3, #1
 80059e2:	60fb      	str	r3, [r7, #12]
 80059e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80059e6:	23e0      	movs	r3, #224	@ 0xe0
 80059e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059ea:	2302      	movs	r3, #2
 80059ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059ee:	2300      	movs	r3, #0
 80059f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059f2:	2303      	movs	r3, #3
 80059f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80059f6:	2305      	movs	r3, #5
 80059f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059fa:	f107 0314 	add.w	r3, r7, #20
 80059fe:	4619      	mov	r1, r3
 8005a00:	4805      	ldr	r0, [pc, #20]	@ (8005a18 <HAL_SPI_MspInit+0x8c>)
 8005a02:	f000 fbf1 	bl	80061e8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8005a06:	bf00      	nop
 8005a08:	3728      	adds	r7, #40	@ 0x28
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	40013000 	.word	0x40013000
 8005a14:	40023800 	.word	0x40023800
 8005a18:	40020000 	.word	0x40020000

08005a1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b08e      	sub	sp, #56	@ 0x38
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a28:	2200      	movs	r2, #0
 8005a2a:	601a      	str	r2, [r3, #0]
 8005a2c:	605a      	str	r2, [r3, #4]
 8005a2e:	609a      	str	r2, [r3, #8]
 8005a30:	60da      	str	r2, [r3, #12]
 8005a32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a67      	ldr	r2, [pc, #412]	@ (8005bd8 <HAL_UART_MspInit+0x1bc>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d153      	bne.n	8005ae6 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8005a3e:	2300      	movs	r3, #0
 8005a40:	623b      	str	r3, [r7, #32]
 8005a42:	4b66      	ldr	r3, [pc, #408]	@ (8005bdc <HAL_UART_MspInit+0x1c0>)
 8005a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a46:	4a65      	ldr	r2, [pc, #404]	@ (8005bdc <HAL_UART_MspInit+0x1c0>)
 8005a48:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a4e:	4b63      	ldr	r3, [pc, #396]	@ (8005bdc <HAL_UART_MspInit+0x1c0>)
 8005a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a56:	623b      	str	r3, [r7, #32]
 8005a58:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	61fb      	str	r3, [r7, #28]
 8005a5e:	4b5f      	ldr	r3, [pc, #380]	@ (8005bdc <HAL_UART_MspInit+0x1c0>)
 8005a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a62:	4a5e      	ldr	r2, [pc, #376]	@ (8005bdc <HAL_UART_MspInit+0x1c0>)
 8005a64:	f043 0304 	orr.w	r3, r3, #4
 8005a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a6a:	4b5c      	ldr	r3, [pc, #368]	@ (8005bdc <HAL_UART_MspInit+0x1c0>)
 8005a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a6e:	f003 0304 	and.w	r3, r3, #4
 8005a72:	61fb      	str	r3, [r7, #28]
 8005a74:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005a76:	2300      	movs	r3, #0
 8005a78:	61bb      	str	r3, [r7, #24]
 8005a7a:	4b58      	ldr	r3, [pc, #352]	@ (8005bdc <HAL_UART_MspInit+0x1c0>)
 8005a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a7e:	4a57      	ldr	r2, [pc, #348]	@ (8005bdc <HAL_UART_MspInit+0x1c0>)
 8005a80:	f043 0308 	orr.w	r3, r3, #8
 8005a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a86:	4b55      	ldr	r3, [pc, #340]	@ (8005bdc <HAL_UART_MspInit+0x1c0>)
 8005a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a8a:	f003 0308 	and.w	r3, r3, #8
 8005a8e:	61bb      	str	r3, [r7, #24]
 8005a90:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005a92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005a96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a98:	2302      	movs	r3, #2
 8005a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005aa4:	2308      	movs	r3, #8
 8005aa6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005aa8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005aac:	4619      	mov	r1, r3
 8005aae:	484c      	ldr	r0, [pc, #304]	@ (8005be0 <HAL_UART_MspInit+0x1c4>)
 8005ab0:	f000 fb9a 	bl	80061e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005ab4:	2304      	movs	r3, #4
 8005ab6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ab8:	2302      	movs	r3, #2
 8005aba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005abc:	2300      	movs	r3, #0
 8005abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005ac4:	2308      	movs	r3, #8
 8005ac6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005ac8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005acc:	4619      	mov	r1, r3
 8005ace:	4845      	ldr	r0, [pc, #276]	@ (8005be4 <HAL_UART_MspInit+0x1c8>)
 8005ad0:	f000 fb8a 	bl	80061e8 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	2100      	movs	r1, #0
 8005ad8:	2035      	movs	r0, #53	@ 0x35
 8005ada:	f000 fabc 	bl	8006056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8005ade:	2035      	movs	r0, #53	@ 0x35
 8005ae0:	f000 fad5 	bl	800608e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005ae4:	e073      	b.n	8005bce <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART2)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a3f      	ldr	r2, [pc, #252]	@ (8005be8 <HAL_UART_MspInit+0x1cc>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d134      	bne.n	8005b5a <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005af0:	2300      	movs	r3, #0
 8005af2:	617b      	str	r3, [r7, #20]
 8005af4:	4b39      	ldr	r3, [pc, #228]	@ (8005bdc <HAL_UART_MspInit+0x1c0>)
 8005af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af8:	4a38      	ldr	r2, [pc, #224]	@ (8005bdc <HAL_UART_MspInit+0x1c0>)
 8005afa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005afe:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b00:	4b36      	ldr	r3, [pc, #216]	@ (8005bdc <HAL_UART_MspInit+0x1c0>)
 8005b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b08:	617b      	str	r3, [r7, #20]
 8005b0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	613b      	str	r3, [r7, #16]
 8005b10:	4b32      	ldr	r3, [pc, #200]	@ (8005bdc <HAL_UART_MspInit+0x1c0>)
 8005b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b14:	4a31      	ldr	r2, [pc, #196]	@ (8005bdc <HAL_UART_MspInit+0x1c0>)
 8005b16:	f043 0301 	orr.w	r3, r3, #1
 8005b1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b1c:	4b2f      	ldr	r3, [pc, #188]	@ (8005bdc <HAL_UART_MspInit+0x1c0>)
 8005b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b20:	f003 0301 	and.w	r3, r3, #1
 8005b24:	613b      	str	r3, [r7, #16]
 8005b26:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005b28:	230c      	movs	r3, #12
 8005b2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b2c:	2302      	movs	r3, #2
 8005b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b30:	2300      	movs	r3, #0
 8005b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b34:	2303      	movs	r3, #3
 8005b36:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005b38:	2307      	movs	r3, #7
 8005b3a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b40:	4619      	mov	r1, r3
 8005b42:	482a      	ldr	r0, [pc, #168]	@ (8005bec <HAL_UART_MspInit+0x1d0>)
 8005b44:	f000 fb50 	bl	80061e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005b48:	2200      	movs	r2, #0
 8005b4a:	2100      	movs	r1, #0
 8005b4c:	2026      	movs	r0, #38	@ 0x26
 8005b4e:	f000 fa82 	bl	8006056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005b52:	2026      	movs	r0, #38	@ 0x26
 8005b54:	f000 fa9b 	bl	800608e <HAL_NVIC_EnableIRQ>
}
 8005b58:	e039      	b.n	8005bce <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a24      	ldr	r2, [pc, #144]	@ (8005bf0 <HAL_UART_MspInit+0x1d4>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d134      	bne.n	8005bce <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005b64:	2300      	movs	r3, #0
 8005b66:	60fb      	str	r3, [r7, #12]
 8005b68:	4b1c      	ldr	r3, [pc, #112]	@ (8005bdc <HAL_UART_MspInit+0x1c0>)
 8005b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b6c:	4a1b      	ldr	r2, [pc, #108]	@ (8005bdc <HAL_UART_MspInit+0x1c0>)
 8005b6e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005b72:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b74:	4b19      	ldr	r3, [pc, #100]	@ (8005bdc <HAL_UART_MspInit+0x1c0>)
 8005b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b7c:	60fb      	str	r3, [r7, #12]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b80:	2300      	movs	r3, #0
 8005b82:	60bb      	str	r3, [r7, #8]
 8005b84:	4b15      	ldr	r3, [pc, #84]	@ (8005bdc <HAL_UART_MspInit+0x1c0>)
 8005b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b88:	4a14      	ldr	r2, [pc, #80]	@ (8005bdc <HAL_UART_MspInit+0x1c0>)
 8005b8a:	f043 0304 	orr.w	r3, r3, #4
 8005b8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b90:	4b12      	ldr	r3, [pc, #72]	@ (8005bdc <HAL_UART_MspInit+0x1c0>)
 8005b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b94:	f003 0304 	and.w	r3, r3, #4
 8005b98:	60bb      	str	r3, [r7, #8]
 8005b9a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 8005b9c:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8005ba0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ba2:	2302      	movs	r3, #2
 8005ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005baa:	2303      	movs	r3, #3
 8005bac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005bae:	2307      	movs	r3, #7
 8005bb0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005bb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	4809      	ldr	r0, [pc, #36]	@ (8005be0 <HAL_UART_MspInit+0x1c4>)
 8005bba:	f000 fb15 	bl	80061e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	2100      	movs	r1, #0
 8005bc2:	2027      	movs	r0, #39	@ 0x27
 8005bc4:	f000 fa47 	bl	8006056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005bc8:	2027      	movs	r0, #39	@ 0x27
 8005bca:	f000 fa60 	bl	800608e <HAL_NVIC_EnableIRQ>
}
 8005bce:	bf00      	nop
 8005bd0:	3738      	adds	r7, #56	@ 0x38
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	40005000 	.word	0x40005000
 8005bdc:	40023800 	.word	0x40023800
 8005be0:	40020800 	.word	0x40020800
 8005be4:	40020c00 	.word	0x40020c00
 8005be8:	40004400 	.word	0x40004400
 8005bec:	40020000 	.word	0x40020000
 8005bf0:	40004800 	.word	0x40004800

08005bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005bf8:	bf00      	nop
 8005bfa:	e7fd      	b.n	8005bf8 <NMI_Handler+0x4>

08005bfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005c00:	bf00      	nop
 8005c02:	e7fd      	b.n	8005c00 <HardFault_Handler+0x4>

08005c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005c04:	b480      	push	{r7}
 8005c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005c08:	bf00      	nop
 8005c0a:	e7fd      	b.n	8005c08 <MemManage_Handler+0x4>

08005c0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005c10:	bf00      	nop
 8005c12:	e7fd      	b.n	8005c10 <BusFault_Handler+0x4>

08005c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005c14:	b480      	push	{r7}
 8005c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005c18:	bf00      	nop
 8005c1a:	e7fd      	b.n	8005c18 <UsageFault_Handler+0x4>

08005c1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005c20:	bf00      	nop
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr

08005c2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005c2e:	bf00      	nop
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005c3c:	bf00      	nop
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr

08005c46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005c46:	b580      	push	{r7, lr}
 8005c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005c4a:	f000 f8e5 	bl	8005e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005c4e:	bf00      	nop
 8005c50:	bd80      	pop	{r7, pc}
	...

08005c54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005c58:	4802      	ldr	r0, [pc, #8]	@ (8005c64 <USART2_IRQHandler+0x10>)
 8005c5a:	f001 fb5f 	bl	800731c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005c5e:	bf00      	nop
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	20014000 	.word	0x20014000

08005c68 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005c6c:	4802      	ldr	r0, [pc, #8]	@ (8005c78 <USART3_IRQHandler+0x10>)
 8005c6e:	f001 fb55 	bl	800731c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005c72:	bf00      	nop
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	20014048 	.word	0x20014048

08005c7c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8005c80:	4802      	ldr	r0, [pc, #8]	@ (8005c8c <UART5_IRQHandler+0x10>)
 8005c82:	f001 fb4b 	bl	800731c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8005c86:	bf00      	nop
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	20013fb8 	.word	0x20013fb8

08005c90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005c98:	4a14      	ldr	r2, [pc, #80]	@ (8005cec <_sbrk+0x5c>)
 8005c9a:	4b15      	ldr	r3, [pc, #84]	@ (8005cf0 <_sbrk+0x60>)
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005ca4:	4b13      	ldr	r3, [pc, #76]	@ (8005cf4 <_sbrk+0x64>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d102      	bne.n	8005cb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005cac:	4b11      	ldr	r3, [pc, #68]	@ (8005cf4 <_sbrk+0x64>)
 8005cae:	4a12      	ldr	r2, [pc, #72]	@ (8005cf8 <_sbrk+0x68>)
 8005cb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005cb2:	4b10      	ldr	r3, [pc, #64]	@ (8005cf4 <_sbrk+0x64>)
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4413      	add	r3, r2
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d207      	bcs.n	8005cd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005cc0:	f003 f848 	bl	8008d54 <__errno>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	220c      	movs	r2, #12
 8005cc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005cca:	f04f 33ff 	mov.w	r3, #4294967295
 8005cce:	e009      	b.n	8005ce4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005cd0:	4b08      	ldr	r3, [pc, #32]	@ (8005cf4 <_sbrk+0x64>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005cd6:	4b07      	ldr	r3, [pc, #28]	@ (8005cf4 <_sbrk+0x64>)
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4413      	add	r3, r2
 8005cde:	4a05      	ldr	r2, [pc, #20]	@ (8005cf4 <_sbrk+0x64>)
 8005ce0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3718      	adds	r7, #24
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	20020000 	.word	0x20020000
 8005cf0:	00000400 	.word	0x00000400
 8005cf4:	20014184 	.word	0x20014184
 8005cf8:	20014510 	.word	0x20014510

08005cfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005d00:	4b06      	ldr	r3, [pc, #24]	@ (8005d1c <SystemInit+0x20>)
 8005d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d06:	4a05      	ldr	r2, [pc, #20]	@ (8005d1c <SystemInit+0x20>)
 8005d08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005d0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005d10:	bf00      	nop
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	e000ed00 	.word	0xe000ed00

08005d20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005d20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005d58 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005d24:	f7ff ffea 	bl	8005cfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005d28:	480c      	ldr	r0, [pc, #48]	@ (8005d5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005d2a:	490d      	ldr	r1, [pc, #52]	@ (8005d60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005d2c:	4a0d      	ldr	r2, [pc, #52]	@ (8005d64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005d30:	e002      	b.n	8005d38 <LoopCopyDataInit>

08005d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005d36:	3304      	adds	r3, #4

08005d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005d3c:	d3f9      	bcc.n	8005d32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8005d68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005d40:	4c0a      	ldr	r4, [pc, #40]	@ (8005d6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8005d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005d44:	e001      	b.n	8005d4a <LoopFillZerobss>

08005d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005d48:	3204      	adds	r2, #4

08005d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005d4c:	d3fb      	bcc.n	8005d46 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8005d4e:	f003 f807 	bl	8008d60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005d52:	f7fb f995 	bl	8001080 <main>
  bx  lr    
 8005d56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005d58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005d60:	20012eec 	.word	0x20012eec
  ldr r2, =_sidata
 8005d64:	08021a54 	.word	0x08021a54
  ldr r2, =_sbss
 8005d68:	20012eec 	.word	0x20012eec
  ldr r4, =_ebss
 8005d6c:	20014510 	.word	0x20014510

08005d70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005d70:	e7fe      	b.n	8005d70 <ADC_IRQHandler>
	...

08005d74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005d78:	4b0e      	ldr	r3, [pc, #56]	@ (8005db4 <HAL_Init+0x40>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8005db4 <HAL_Init+0x40>)
 8005d7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005d82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005d84:	4b0b      	ldr	r3, [pc, #44]	@ (8005db4 <HAL_Init+0x40>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a0a      	ldr	r2, [pc, #40]	@ (8005db4 <HAL_Init+0x40>)
 8005d8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005d8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005d90:	4b08      	ldr	r3, [pc, #32]	@ (8005db4 <HAL_Init+0x40>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a07      	ldr	r2, [pc, #28]	@ (8005db4 <HAL_Init+0x40>)
 8005d96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d9c:	2003      	movs	r0, #3
 8005d9e:	f000 f94f 	bl	8006040 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005da2:	200f      	movs	r0, #15
 8005da4:	f000 f808 	bl	8005db8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005da8:	f7ff fdc8 	bl	800593c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	40023c00 	.word	0x40023c00

08005db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005dc0:	4b12      	ldr	r3, [pc, #72]	@ (8005e0c <HAL_InitTick+0x54>)
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	4b12      	ldr	r3, [pc, #72]	@ (8005e10 <HAL_InitTick+0x58>)
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	4619      	mov	r1, r3
 8005dca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8005dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f000 f967 	bl	80060aa <HAL_SYSTICK_Config>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d001      	beq.n	8005de6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e00e      	b.n	8005e04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2b0f      	cmp	r3, #15
 8005dea:	d80a      	bhi.n	8005e02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005dec:	2200      	movs	r2, #0
 8005dee:	6879      	ldr	r1, [r7, #4]
 8005df0:	f04f 30ff 	mov.w	r0, #4294967295
 8005df4:	f000 f92f 	bl	8006056 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005df8:	4a06      	ldr	r2, [pc, #24]	@ (8005e14 <HAL_InitTick+0x5c>)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	e000      	b.n	8005e04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3708      	adds	r7, #8
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	20012e7c 	.word	0x20012e7c
 8005e10:	20012e84 	.word	0x20012e84
 8005e14:	20012e80 	.word	0x20012e80

08005e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005e1c:	4b06      	ldr	r3, [pc, #24]	@ (8005e38 <HAL_IncTick+0x20>)
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	461a      	mov	r2, r3
 8005e22:	4b06      	ldr	r3, [pc, #24]	@ (8005e3c <HAL_IncTick+0x24>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4413      	add	r3, r2
 8005e28:	4a04      	ldr	r2, [pc, #16]	@ (8005e3c <HAL_IncTick+0x24>)
 8005e2a:	6013      	str	r3, [r2, #0]
}
 8005e2c:	bf00      	nop
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	20012e84 	.word	0x20012e84
 8005e3c:	20014188 	.word	0x20014188

08005e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e40:	b480      	push	{r7}
 8005e42:	af00      	add	r7, sp, #0
  return uwTick;
 8005e44:	4b03      	ldr	r3, [pc, #12]	@ (8005e54 <HAL_GetTick+0x14>)
 8005e46:	681b      	ldr	r3, [r3, #0]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	20014188 	.word	0x20014188

08005e58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005e60:	f7ff ffee 	bl	8005e40 <HAL_GetTick>
 8005e64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e70:	d005      	beq.n	8005e7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005e72:	4b0a      	ldr	r3, [pc, #40]	@ (8005e9c <HAL_Delay+0x44>)
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	461a      	mov	r2, r3
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005e7e:	bf00      	nop
 8005e80:	f7ff ffde 	bl	8005e40 <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d8f7      	bhi.n	8005e80 <HAL_Delay+0x28>
  {
  }
}
 8005e90:	bf00      	nop
 8005e92:	bf00      	nop
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	20012e84 	.word	0x20012e84

08005ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f003 0307 	and.w	r3, r3, #7
 8005eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8005ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005eb6:	68ba      	ldr	r2, [r7, #8]
 8005eb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ec8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005ecc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005ed2:	4a04      	ldr	r2, [pc, #16]	@ (8005ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	60d3      	str	r3, [r2, #12]
}
 8005ed8:	bf00      	nop
 8005eda:	3714      	adds	r7, #20
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr
 8005ee4:	e000ed00 	.word	0xe000ed00

08005ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005eec:	4b04      	ldr	r3, [pc, #16]	@ (8005f00 <__NVIC_GetPriorityGrouping+0x18>)
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	0a1b      	lsrs	r3, r3, #8
 8005ef2:	f003 0307 	and.w	r3, r3, #7
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr
 8005f00:	e000ed00 	.word	0xe000ed00

08005f04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	db0b      	blt.n	8005f2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f16:	79fb      	ldrb	r3, [r7, #7]
 8005f18:	f003 021f 	and.w	r2, r3, #31
 8005f1c:	4907      	ldr	r1, [pc, #28]	@ (8005f3c <__NVIC_EnableIRQ+0x38>)
 8005f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f22:	095b      	lsrs	r3, r3, #5
 8005f24:	2001      	movs	r0, #1
 8005f26:	fa00 f202 	lsl.w	r2, r0, r2
 8005f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005f2e:	bf00      	nop
 8005f30:	370c      	adds	r7, #12
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	e000e100 	.word	0xe000e100

08005f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	4603      	mov	r3, r0
 8005f48:	6039      	str	r1, [r7, #0]
 8005f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	db0a      	blt.n	8005f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	b2da      	uxtb	r2, r3
 8005f58:	490c      	ldr	r1, [pc, #48]	@ (8005f8c <__NVIC_SetPriority+0x4c>)
 8005f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f5e:	0112      	lsls	r2, r2, #4
 8005f60:	b2d2      	uxtb	r2, r2
 8005f62:	440b      	add	r3, r1
 8005f64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f68:	e00a      	b.n	8005f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	b2da      	uxtb	r2, r3
 8005f6e:	4908      	ldr	r1, [pc, #32]	@ (8005f90 <__NVIC_SetPriority+0x50>)
 8005f70:	79fb      	ldrb	r3, [r7, #7]
 8005f72:	f003 030f 	and.w	r3, r3, #15
 8005f76:	3b04      	subs	r3, #4
 8005f78:	0112      	lsls	r2, r2, #4
 8005f7a:	b2d2      	uxtb	r2, r2
 8005f7c:	440b      	add	r3, r1
 8005f7e:	761a      	strb	r2, [r3, #24]
}
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr
 8005f8c:	e000e100 	.word	0xe000e100
 8005f90:	e000ed00 	.word	0xe000ed00

08005f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b089      	sub	sp, #36	@ 0x24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f003 0307 	and.w	r3, r3, #7
 8005fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	f1c3 0307 	rsb	r3, r3, #7
 8005fae:	2b04      	cmp	r3, #4
 8005fb0:	bf28      	it	cs
 8005fb2:	2304      	movcs	r3, #4
 8005fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	3304      	adds	r3, #4
 8005fba:	2b06      	cmp	r3, #6
 8005fbc:	d902      	bls.n	8005fc4 <NVIC_EncodePriority+0x30>
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	3b03      	subs	r3, #3
 8005fc2:	e000      	b.n	8005fc6 <NVIC_EncodePriority+0x32>
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd2:	43da      	mvns	r2, r3
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	401a      	ands	r2, r3
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8005fe6:	43d9      	mvns	r1, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fec:	4313      	orrs	r3, r2
         );
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3724      	adds	r7, #36	@ 0x24
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
	...

08005ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	3b01      	subs	r3, #1
 8006008:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800600c:	d301      	bcc.n	8006012 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800600e:	2301      	movs	r3, #1
 8006010:	e00f      	b.n	8006032 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006012:	4a0a      	ldr	r2, [pc, #40]	@ (800603c <SysTick_Config+0x40>)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	3b01      	subs	r3, #1
 8006018:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800601a:	210f      	movs	r1, #15
 800601c:	f04f 30ff 	mov.w	r0, #4294967295
 8006020:	f7ff ff8e 	bl	8005f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006024:	4b05      	ldr	r3, [pc, #20]	@ (800603c <SysTick_Config+0x40>)
 8006026:	2200      	movs	r2, #0
 8006028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800602a:	4b04      	ldr	r3, [pc, #16]	@ (800603c <SysTick_Config+0x40>)
 800602c:	2207      	movs	r2, #7
 800602e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3708      	adds	r7, #8
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	e000e010 	.word	0xe000e010

08006040 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f7ff ff29 	bl	8005ea0 <__NVIC_SetPriorityGrouping>
}
 800604e:	bf00      	nop
 8006050:	3708      	adds	r7, #8
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006056:	b580      	push	{r7, lr}
 8006058:	b086      	sub	sp, #24
 800605a:	af00      	add	r7, sp, #0
 800605c:	4603      	mov	r3, r0
 800605e:	60b9      	str	r1, [r7, #8]
 8006060:	607a      	str	r2, [r7, #4]
 8006062:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006064:	2300      	movs	r3, #0
 8006066:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006068:	f7ff ff3e 	bl	8005ee8 <__NVIC_GetPriorityGrouping>
 800606c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	68b9      	ldr	r1, [r7, #8]
 8006072:	6978      	ldr	r0, [r7, #20]
 8006074:	f7ff ff8e 	bl	8005f94 <NVIC_EncodePriority>
 8006078:	4602      	mov	r2, r0
 800607a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800607e:	4611      	mov	r1, r2
 8006080:	4618      	mov	r0, r3
 8006082:	f7ff ff5d 	bl	8005f40 <__NVIC_SetPriority>
}
 8006086:	bf00      	nop
 8006088:	3718      	adds	r7, #24
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}

0800608e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800608e:	b580      	push	{r7, lr}
 8006090:	b082      	sub	sp, #8
 8006092:	af00      	add	r7, sp, #0
 8006094:	4603      	mov	r3, r0
 8006096:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800609c:	4618      	mov	r0, r3
 800609e:	f7ff ff31 	bl	8005f04 <__NVIC_EnableIRQ>
}
 80060a2:	bf00      	nop
 80060a4:	3708      	adds	r7, #8
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}

080060aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b082      	sub	sp, #8
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f7ff ffa2 	bl	8005ffc <SysTick_Config>
 80060b8:	4603      	mov	r3, r0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3708      	adds	r7, #8
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b084      	sub	sp, #16
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060ce:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80060d0:	f7ff feb6 	bl	8005e40 <HAL_GetTick>
 80060d4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d008      	beq.n	80060f4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2280      	movs	r2, #128	@ 0x80
 80060e6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e052      	b.n	800619a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f022 0216 	bic.w	r2, r2, #22
 8006102:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	695a      	ldr	r2, [r3, #20]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006112:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006118:	2b00      	cmp	r3, #0
 800611a:	d103      	bne.n	8006124 <HAL_DMA_Abort+0x62>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006120:	2b00      	cmp	r3, #0
 8006122:	d007      	beq.n	8006134 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f022 0208 	bic.w	r2, r2, #8
 8006132:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f022 0201 	bic.w	r2, r2, #1
 8006142:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006144:	e013      	b.n	800616e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006146:	f7ff fe7b 	bl	8005e40 <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	2b05      	cmp	r3, #5
 8006152:	d90c      	bls.n	800616e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2220      	movs	r2, #32
 8006158:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2203      	movs	r2, #3
 800615e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e015      	b.n	800619a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0301 	and.w	r3, r3, #1
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1e4      	bne.n	8006146 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006180:	223f      	movs	r2, #63	@ 0x3f
 8006182:	409a      	lsls	r2, r3
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80061a2:	b480      	push	{r7}
 80061a4:	b083      	sub	sp, #12
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d004      	beq.n	80061c0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2280      	movs	r2, #128	@ 0x80
 80061ba:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e00c      	b.n	80061da <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2205      	movs	r2, #5
 80061c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f022 0201 	bic.w	r2, r2, #1
 80061d6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	370c      	adds	r7, #12
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
	...

080061e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b089      	sub	sp, #36	@ 0x24
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80061f2:	2300      	movs	r3, #0
 80061f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80061f6:	2300      	movs	r3, #0
 80061f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80061fa:	2300      	movs	r3, #0
 80061fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80061fe:	2300      	movs	r3, #0
 8006200:	61fb      	str	r3, [r7, #28]
 8006202:	e165      	b.n	80064d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006204:	2201      	movs	r2, #1
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	fa02 f303 	lsl.w	r3, r2, r3
 800620c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	4013      	ands	r3, r2
 8006216:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	429a      	cmp	r2, r3
 800621e:	f040 8154 	bne.w	80064ca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	f003 0303 	and.w	r3, r3, #3
 800622a:	2b01      	cmp	r3, #1
 800622c:	d005      	beq.n	800623a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006236:	2b02      	cmp	r3, #2
 8006238:	d130      	bne.n	800629c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	005b      	lsls	r3, r3, #1
 8006244:	2203      	movs	r2, #3
 8006246:	fa02 f303 	lsl.w	r3, r2, r3
 800624a:	43db      	mvns	r3, r3
 800624c:	69ba      	ldr	r2, [r7, #24]
 800624e:	4013      	ands	r3, r2
 8006250:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	68da      	ldr	r2, [r3, #12]
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	005b      	lsls	r3, r3, #1
 800625a:	fa02 f303 	lsl.w	r3, r2, r3
 800625e:	69ba      	ldr	r2, [r7, #24]
 8006260:	4313      	orrs	r3, r2
 8006262:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	69ba      	ldr	r2, [r7, #24]
 8006268:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006270:	2201      	movs	r2, #1
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	fa02 f303 	lsl.w	r3, r2, r3
 8006278:	43db      	mvns	r3, r3
 800627a:	69ba      	ldr	r2, [r7, #24]
 800627c:	4013      	ands	r3, r2
 800627e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	091b      	lsrs	r3, r3, #4
 8006286:	f003 0201 	and.w	r2, r3, #1
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	fa02 f303 	lsl.w	r3, r2, r3
 8006290:	69ba      	ldr	r2, [r7, #24]
 8006292:	4313      	orrs	r3, r2
 8006294:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	69ba      	ldr	r2, [r7, #24]
 800629a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	f003 0303 	and.w	r3, r3, #3
 80062a4:	2b03      	cmp	r3, #3
 80062a6:	d017      	beq.n	80062d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	005b      	lsls	r3, r3, #1
 80062b2:	2203      	movs	r2, #3
 80062b4:	fa02 f303 	lsl.w	r3, r2, r3
 80062b8:	43db      	mvns	r3, r3
 80062ba:	69ba      	ldr	r2, [r7, #24]
 80062bc:	4013      	ands	r3, r2
 80062be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	689a      	ldr	r2, [r3, #8]
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	005b      	lsls	r3, r3, #1
 80062c8:	fa02 f303 	lsl.w	r3, r2, r3
 80062cc:	69ba      	ldr	r2, [r7, #24]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	69ba      	ldr	r2, [r7, #24]
 80062d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	f003 0303 	and.w	r3, r3, #3
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d123      	bne.n	800632c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	08da      	lsrs	r2, r3, #3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	3208      	adds	r2, #8
 80062ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	f003 0307 	and.w	r3, r3, #7
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	220f      	movs	r2, #15
 80062fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006300:	43db      	mvns	r3, r3
 8006302:	69ba      	ldr	r2, [r7, #24]
 8006304:	4013      	ands	r3, r2
 8006306:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	691a      	ldr	r2, [r3, #16]
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	f003 0307 	and.w	r3, r3, #7
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	fa02 f303 	lsl.w	r3, r2, r3
 8006318:	69ba      	ldr	r2, [r7, #24]
 800631a:	4313      	orrs	r3, r2
 800631c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	08da      	lsrs	r2, r3, #3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	3208      	adds	r2, #8
 8006326:	69b9      	ldr	r1, [r7, #24]
 8006328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	005b      	lsls	r3, r3, #1
 8006336:	2203      	movs	r2, #3
 8006338:	fa02 f303 	lsl.w	r3, r2, r3
 800633c:	43db      	mvns	r3, r3
 800633e:	69ba      	ldr	r2, [r7, #24]
 8006340:	4013      	ands	r3, r2
 8006342:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	f003 0203 	and.w	r2, r3, #3
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	005b      	lsls	r3, r3, #1
 8006350:	fa02 f303 	lsl.w	r3, r2, r3
 8006354:	69ba      	ldr	r2, [r7, #24]
 8006356:	4313      	orrs	r3, r2
 8006358:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	69ba      	ldr	r2, [r7, #24]
 800635e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006368:	2b00      	cmp	r3, #0
 800636a:	f000 80ae 	beq.w	80064ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800636e:	2300      	movs	r3, #0
 8006370:	60fb      	str	r3, [r7, #12]
 8006372:	4b5d      	ldr	r3, [pc, #372]	@ (80064e8 <HAL_GPIO_Init+0x300>)
 8006374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006376:	4a5c      	ldr	r2, [pc, #368]	@ (80064e8 <HAL_GPIO_Init+0x300>)
 8006378:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800637c:	6453      	str	r3, [r2, #68]	@ 0x44
 800637e:	4b5a      	ldr	r3, [pc, #360]	@ (80064e8 <HAL_GPIO_Init+0x300>)
 8006380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006382:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006386:	60fb      	str	r3, [r7, #12]
 8006388:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800638a:	4a58      	ldr	r2, [pc, #352]	@ (80064ec <HAL_GPIO_Init+0x304>)
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	089b      	lsrs	r3, r3, #2
 8006390:	3302      	adds	r3, #2
 8006392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006396:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	f003 0303 	and.w	r3, r3, #3
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	220f      	movs	r2, #15
 80063a2:	fa02 f303 	lsl.w	r3, r2, r3
 80063a6:	43db      	mvns	r3, r3
 80063a8:	69ba      	ldr	r2, [r7, #24]
 80063aa:	4013      	ands	r3, r2
 80063ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a4f      	ldr	r2, [pc, #316]	@ (80064f0 <HAL_GPIO_Init+0x308>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d025      	beq.n	8006402 <HAL_GPIO_Init+0x21a>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a4e      	ldr	r2, [pc, #312]	@ (80064f4 <HAL_GPIO_Init+0x30c>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d01f      	beq.n	80063fe <HAL_GPIO_Init+0x216>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a4d      	ldr	r2, [pc, #308]	@ (80064f8 <HAL_GPIO_Init+0x310>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d019      	beq.n	80063fa <HAL_GPIO_Init+0x212>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a4c      	ldr	r2, [pc, #304]	@ (80064fc <HAL_GPIO_Init+0x314>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d013      	beq.n	80063f6 <HAL_GPIO_Init+0x20e>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a4b      	ldr	r2, [pc, #300]	@ (8006500 <HAL_GPIO_Init+0x318>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d00d      	beq.n	80063f2 <HAL_GPIO_Init+0x20a>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a4a      	ldr	r2, [pc, #296]	@ (8006504 <HAL_GPIO_Init+0x31c>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d007      	beq.n	80063ee <HAL_GPIO_Init+0x206>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a49      	ldr	r2, [pc, #292]	@ (8006508 <HAL_GPIO_Init+0x320>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d101      	bne.n	80063ea <HAL_GPIO_Init+0x202>
 80063e6:	2306      	movs	r3, #6
 80063e8:	e00c      	b.n	8006404 <HAL_GPIO_Init+0x21c>
 80063ea:	2307      	movs	r3, #7
 80063ec:	e00a      	b.n	8006404 <HAL_GPIO_Init+0x21c>
 80063ee:	2305      	movs	r3, #5
 80063f0:	e008      	b.n	8006404 <HAL_GPIO_Init+0x21c>
 80063f2:	2304      	movs	r3, #4
 80063f4:	e006      	b.n	8006404 <HAL_GPIO_Init+0x21c>
 80063f6:	2303      	movs	r3, #3
 80063f8:	e004      	b.n	8006404 <HAL_GPIO_Init+0x21c>
 80063fa:	2302      	movs	r3, #2
 80063fc:	e002      	b.n	8006404 <HAL_GPIO_Init+0x21c>
 80063fe:	2301      	movs	r3, #1
 8006400:	e000      	b.n	8006404 <HAL_GPIO_Init+0x21c>
 8006402:	2300      	movs	r3, #0
 8006404:	69fa      	ldr	r2, [r7, #28]
 8006406:	f002 0203 	and.w	r2, r2, #3
 800640a:	0092      	lsls	r2, r2, #2
 800640c:	4093      	lsls	r3, r2
 800640e:	69ba      	ldr	r2, [r7, #24]
 8006410:	4313      	orrs	r3, r2
 8006412:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006414:	4935      	ldr	r1, [pc, #212]	@ (80064ec <HAL_GPIO_Init+0x304>)
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	089b      	lsrs	r3, r3, #2
 800641a:	3302      	adds	r3, #2
 800641c:	69ba      	ldr	r2, [r7, #24]
 800641e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006422:	4b3a      	ldr	r3, [pc, #232]	@ (800650c <HAL_GPIO_Init+0x324>)
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	43db      	mvns	r3, r3
 800642c:	69ba      	ldr	r2, [r7, #24]
 800642e:	4013      	ands	r3, r2
 8006430:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800643a:	2b00      	cmp	r3, #0
 800643c:	d003      	beq.n	8006446 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800643e:	69ba      	ldr	r2, [r7, #24]
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	4313      	orrs	r3, r2
 8006444:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006446:	4a31      	ldr	r2, [pc, #196]	@ (800650c <HAL_GPIO_Init+0x324>)
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800644c:	4b2f      	ldr	r3, [pc, #188]	@ (800650c <HAL_GPIO_Init+0x324>)
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	43db      	mvns	r3, r3
 8006456:	69ba      	ldr	r2, [r7, #24]
 8006458:	4013      	ands	r3, r2
 800645a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006464:	2b00      	cmp	r3, #0
 8006466:	d003      	beq.n	8006470 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006468:	69ba      	ldr	r2, [r7, #24]
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	4313      	orrs	r3, r2
 800646e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006470:	4a26      	ldr	r2, [pc, #152]	@ (800650c <HAL_GPIO_Init+0x324>)
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006476:	4b25      	ldr	r3, [pc, #148]	@ (800650c <HAL_GPIO_Init+0x324>)
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	43db      	mvns	r3, r3
 8006480:	69ba      	ldr	r2, [r7, #24]
 8006482:	4013      	ands	r3, r2
 8006484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d003      	beq.n	800649a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8006492:	69ba      	ldr	r2, [r7, #24]
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	4313      	orrs	r3, r2
 8006498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800649a:	4a1c      	ldr	r2, [pc, #112]	@ (800650c <HAL_GPIO_Init+0x324>)
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80064a0:	4b1a      	ldr	r3, [pc, #104]	@ (800650c <HAL_GPIO_Init+0x324>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	43db      	mvns	r3, r3
 80064aa:	69ba      	ldr	r2, [r7, #24]
 80064ac:	4013      	ands	r3, r2
 80064ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d003      	beq.n	80064c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80064bc:	69ba      	ldr	r2, [r7, #24]
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80064c4:	4a11      	ldr	r2, [pc, #68]	@ (800650c <HAL_GPIO_Init+0x324>)
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	3301      	adds	r3, #1
 80064ce:	61fb      	str	r3, [r7, #28]
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	2b0f      	cmp	r3, #15
 80064d4:	f67f ae96 	bls.w	8006204 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80064d8:	bf00      	nop
 80064da:	bf00      	nop
 80064dc:	3724      	adds	r7, #36	@ 0x24
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop
 80064e8:	40023800 	.word	0x40023800
 80064ec:	40013800 	.word	0x40013800
 80064f0:	40020000 	.word	0x40020000
 80064f4:	40020400 	.word	0x40020400
 80064f8:	40020800 	.word	0x40020800
 80064fc:	40020c00 	.word	0x40020c00
 8006500:	40021000 	.word	0x40021000
 8006504:	40021400 	.word	0x40021400
 8006508:	40021800 	.word	0x40021800
 800650c:	40013c00 	.word	0x40013c00

08006510 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	460b      	mov	r3, r1
 800651a:	807b      	strh	r3, [r7, #2]
 800651c:	4613      	mov	r3, r2
 800651e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006520:	787b      	ldrb	r3, [r7, #1]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d003      	beq.n	800652e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006526:	887a      	ldrh	r2, [r7, #2]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800652c:	e003      	b.n	8006536 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800652e:	887b      	ldrh	r3, [r7, #2]
 8006530:	041a      	lsls	r2, r3, #16
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	619a      	str	r2, [r3, #24]
}
 8006536:	bf00      	nop
 8006538:	370c      	adds	r7, #12
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
	...

08006544 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d101      	bne.n	8006558 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	e0cc      	b.n	80066f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006558:	4b68      	ldr	r3, [pc, #416]	@ (80066fc <HAL_RCC_ClockConfig+0x1b8>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 030f 	and.w	r3, r3, #15
 8006560:	683a      	ldr	r2, [r7, #0]
 8006562:	429a      	cmp	r2, r3
 8006564:	d90c      	bls.n	8006580 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006566:	4b65      	ldr	r3, [pc, #404]	@ (80066fc <HAL_RCC_ClockConfig+0x1b8>)
 8006568:	683a      	ldr	r2, [r7, #0]
 800656a:	b2d2      	uxtb	r2, r2
 800656c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800656e:	4b63      	ldr	r3, [pc, #396]	@ (80066fc <HAL_RCC_ClockConfig+0x1b8>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 030f 	and.w	r3, r3, #15
 8006576:	683a      	ldr	r2, [r7, #0]
 8006578:	429a      	cmp	r2, r3
 800657a:	d001      	beq.n	8006580 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e0b8      	b.n	80066f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 0302 	and.w	r3, r3, #2
 8006588:	2b00      	cmp	r3, #0
 800658a:	d020      	beq.n	80065ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0304 	and.w	r3, r3, #4
 8006594:	2b00      	cmp	r3, #0
 8006596:	d005      	beq.n	80065a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006598:	4b59      	ldr	r3, [pc, #356]	@ (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	4a58      	ldr	r2, [pc, #352]	@ (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 800659e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80065a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 0308 	and.w	r3, r3, #8
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d005      	beq.n	80065bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80065b0:	4b53      	ldr	r3, [pc, #332]	@ (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	4a52      	ldr	r2, [pc, #328]	@ (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 80065b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80065ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065bc:	4b50      	ldr	r3, [pc, #320]	@ (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	494d      	ldr	r1, [pc, #308]	@ (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 80065ca:	4313      	orrs	r3, r2
 80065cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d044      	beq.n	8006664 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d107      	bne.n	80065f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065e2:	4b47      	ldr	r3, [pc, #284]	@ (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d119      	bne.n	8006622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e07f      	b.n	80066f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d003      	beq.n	8006602 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065fe:	2b03      	cmp	r3, #3
 8006600:	d107      	bne.n	8006612 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006602:	4b3f      	ldr	r3, [pc, #252]	@ (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d109      	bne.n	8006622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e06f      	b.n	80066f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006612:	4b3b      	ldr	r3, [pc, #236]	@ (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 0302 	and.w	r3, r3, #2
 800661a:	2b00      	cmp	r3, #0
 800661c:	d101      	bne.n	8006622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e067      	b.n	80066f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006622:	4b37      	ldr	r3, [pc, #220]	@ (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	f023 0203 	bic.w	r2, r3, #3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	4934      	ldr	r1, [pc, #208]	@ (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 8006630:	4313      	orrs	r3, r2
 8006632:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006634:	f7ff fc04 	bl	8005e40 <HAL_GetTick>
 8006638:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800663a:	e00a      	b.n	8006652 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800663c:	f7ff fc00 	bl	8005e40 <HAL_GetTick>
 8006640:	4602      	mov	r2, r0
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	f241 3288 	movw	r2, #5000	@ 0x1388
 800664a:	4293      	cmp	r3, r2
 800664c:	d901      	bls.n	8006652 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e04f      	b.n	80066f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006652:	4b2b      	ldr	r3, [pc, #172]	@ (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	f003 020c 	and.w	r2, r3, #12
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	429a      	cmp	r2, r3
 8006662:	d1eb      	bne.n	800663c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006664:	4b25      	ldr	r3, [pc, #148]	@ (80066fc <HAL_RCC_ClockConfig+0x1b8>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 030f 	and.w	r3, r3, #15
 800666c:	683a      	ldr	r2, [r7, #0]
 800666e:	429a      	cmp	r2, r3
 8006670:	d20c      	bcs.n	800668c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006672:	4b22      	ldr	r3, [pc, #136]	@ (80066fc <HAL_RCC_ClockConfig+0x1b8>)
 8006674:	683a      	ldr	r2, [r7, #0]
 8006676:	b2d2      	uxtb	r2, r2
 8006678:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800667a:	4b20      	ldr	r3, [pc, #128]	@ (80066fc <HAL_RCC_ClockConfig+0x1b8>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 030f 	and.w	r3, r3, #15
 8006682:	683a      	ldr	r2, [r7, #0]
 8006684:	429a      	cmp	r2, r3
 8006686:	d001      	beq.n	800668c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e032      	b.n	80066f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0304 	and.w	r3, r3, #4
 8006694:	2b00      	cmp	r3, #0
 8006696:	d008      	beq.n	80066aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006698:	4b19      	ldr	r3, [pc, #100]	@ (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	4916      	ldr	r1, [pc, #88]	@ (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 80066a6:	4313      	orrs	r3, r2
 80066a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 0308 	and.w	r3, r3, #8
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d009      	beq.n	80066ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80066b6:	4b12      	ldr	r3, [pc, #72]	@ (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	00db      	lsls	r3, r3, #3
 80066c4:	490e      	ldr	r1, [pc, #56]	@ (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 80066c6:	4313      	orrs	r3, r2
 80066c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80066ca:	f000 f855 	bl	8006778 <HAL_RCC_GetSysClockFreq>
 80066ce:	4602      	mov	r2, r0
 80066d0:	4b0b      	ldr	r3, [pc, #44]	@ (8006700 <HAL_RCC_ClockConfig+0x1bc>)
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	091b      	lsrs	r3, r3, #4
 80066d6:	f003 030f 	and.w	r3, r3, #15
 80066da:	490a      	ldr	r1, [pc, #40]	@ (8006704 <HAL_RCC_ClockConfig+0x1c0>)
 80066dc:	5ccb      	ldrb	r3, [r1, r3]
 80066de:	fa22 f303 	lsr.w	r3, r2, r3
 80066e2:	4a09      	ldr	r2, [pc, #36]	@ (8006708 <HAL_RCC_ClockConfig+0x1c4>)
 80066e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80066e6:	4b09      	ldr	r3, [pc, #36]	@ (800670c <HAL_RCC_ClockConfig+0x1c8>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7ff fb64 	bl	8005db8 <HAL_InitTick>

  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3710      	adds	r7, #16
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	40023c00 	.word	0x40023c00
 8006700:	40023800 	.word	0x40023800
 8006704:	080219f8 	.word	0x080219f8
 8006708:	20012e7c 	.word	0x20012e7c
 800670c:	20012e80 	.word	0x20012e80

08006710 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006710:	b480      	push	{r7}
 8006712:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006714:	4b03      	ldr	r3, [pc, #12]	@ (8006724 <HAL_RCC_GetHCLKFreq+0x14>)
 8006716:	681b      	ldr	r3, [r3, #0]
}
 8006718:	4618      	mov	r0, r3
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	20012e7c 	.word	0x20012e7c

08006728 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800672c:	f7ff fff0 	bl	8006710 <HAL_RCC_GetHCLKFreq>
 8006730:	4602      	mov	r2, r0
 8006732:	4b05      	ldr	r3, [pc, #20]	@ (8006748 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	0a9b      	lsrs	r3, r3, #10
 8006738:	f003 0307 	and.w	r3, r3, #7
 800673c:	4903      	ldr	r1, [pc, #12]	@ (800674c <HAL_RCC_GetPCLK1Freq+0x24>)
 800673e:	5ccb      	ldrb	r3, [r1, r3]
 8006740:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006744:	4618      	mov	r0, r3
 8006746:	bd80      	pop	{r7, pc}
 8006748:	40023800 	.word	0x40023800
 800674c:	08021a08 	.word	0x08021a08

08006750 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006754:	f7ff ffdc 	bl	8006710 <HAL_RCC_GetHCLKFreq>
 8006758:	4602      	mov	r2, r0
 800675a:	4b05      	ldr	r3, [pc, #20]	@ (8006770 <HAL_RCC_GetPCLK2Freq+0x20>)
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	0b5b      	lsrs	r3, r3, #13
 8006760:	f003 0307 	and.w	r3, r3, #7
 8006764:	4903      	ldr	r1, [pc, #12]	@ (8006774 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006766:	5ccb      	ldrb	r3, [r1, r3]
 8006768:	fa22 f303 	lsr.w	r3, r2, r3
}
 800676c:	4618      	mov	r0, r3
 800676e:	bd80      	pop	{r7, pc}
 8006770:	40023800 	.word	0x40023800
 8006774:	08021a08 	.word	0x08021a08

08006778 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006778:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800677c:	b0a6      	sub	sp, #152	@ 0x98
 800677e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006780:	2300      	movs	r3, #0
 8006782:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8006786:	2300      	movs	r3, #0
 8006788:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 800678c:	2300      	movs	r3, #0
 800678e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8006792:	2300      	movs	r3, #0
 8006794:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8006798:	2300      	movs	r3, #0
 800679a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800679e:	4bc8      	ldr	r3, [pc, #800]	@ (8006ac0 <HAL_RCC_GetSysClockFreq+0x348>)
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	f003 030c 	and.w	r3, r3, #12
 80067a6:	2b0c      	cmp	r3, #12
 80067a8:	f200 817e 	bhi.w	8006aa8 <HAL_RCC_GetSysClockFreq+0x330>
 80067ac:	a201      	add	r2, pc, #4	@ (adr r2, 80067b4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80067ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b2:	bf00      	nop
 80067b4:	080067e9 	.word	0x080067e9
 80067b8:	08006aa9 	.word	0x08006aa9
 80067bc:	08006aa9 	.word	0x08006aa9
 80067c0:	08006aa9 	.word	0x08006aa9
 80067c4:	080067f1 	.word	0x080067f1
 80067c8:	08006aa9 	.word	0x08006aa9
 80067cc:	08006aa9 	.word	0x08006aa9
 80067d0:	08006aa9 	.word	0x08006aa9
 80067d4:	080067f9 	.word	0x080067f9
 80067d8:	08006aa9 	.word	0x08006aa9
 80067dc:	08006aa9 	.word	0x08006aa9
 80067e0:	08006aa9 	.word	0x08006aa9
 80067e4:	08006963 	.word	0x08006963
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80067e8:	4bb6      	ldr	r3, [pc, #728]	@ (8006ac4 <HAL_RCC_GetSysClockFreq+0x34c>)
 80067ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 80067ee:	e15f      	b.n	8006ab0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80067f0:	4bb5      	ldr	r3, [pc, #724]	@ (8006ac8 <HAL_RCC_GetSysClockFreq+0x350>)
 80067f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80067f6:	e15b      	b.n	8006ab0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80067f8:	4bb1      	ldr	r3, [pc, #708]	@ (8006ac0 <HAL_RCC_GetSysClockFreq+0x348>)
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006800:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006804:	4bae      	ldr	r3, [pc, #696]	@ (8006ac0 <HAL_RCC_GetSysClockFreq+0x348>)
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800680c:	2b00      	cmp	r3, #0
 800680e:	d031      	beq.n	8006874 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006810:	4bab      	ldr	r3, [pc, #684]	@ (8006ac0 <HAL_RCC_GetSysClockFreq+0x348>)
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	099b      	lsrs	r3, r3, #6
 8006816:	2200      	movs	r2, #0
 8006818:	66bb      	str	r3, [r7, #104]	@ 0x68
 800681a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800681c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800681e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006822:	663b      	str	r3, [r7, #96]	@ 0x60
 8006824:	2300      	movs	r3, #0
 8006826:	667b      	str	r3, [r7, #100]	@ 0x64
 8006828:	4ba7      	ldr	r3, [pc, #668]	@ (8006ac8 <HAL_RCC_GetSysClockFreq+0x350>)
 800682a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800682e:	462a      	mov	r2, r5
 8006830:	fb03 f202 	mul.w	r2, r3, r2
 8006834:	2300      	movs	r3, #0
 8006836:	4621      	mov	r1, r4
 8006838:	fb01 f303 	mul.w	r3, r1, r3
 800683c:	4413      	add	r3, r2
 800683e:	4aa2      	ldr	r2, [pc, #648]	@ (8006ac8 <HAL_RCC_GetSysClockFreq+0x350>)
 8006840:	4621      	mov	r1, r4
 8006842:	fba1 1202 	umull	r1, r2, r1, r2
 8006846:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006848:	460a      	mov	r2, r1
 800684a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800684c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800684e:	4413      	add	r3, r2
 8006850:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006852:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006856:	2200      	movs	r2, #0
 8006858:	65bb      	str	r3, [r7, #88]	@ 0x58
 800685a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800685c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006860:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8006864:	f7f9 fd2c 	bl	80002c0 <__aeabi_uldivmod>
 8006868:	4602      	mov	r2, r0
 800686a:	460b      	mov	r3, r1
 800686c:	4613      	mov	r3, r2
 800686e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006872:	e064      	b.n	800693e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006874:	4b92      	ldr	r3, [pc, #584]	@ (8006ac0 <HAL_RCC_GetSysClockFreq+0x348>)
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	099b      	lsrs	r3, r3, #6
 800687a:	2200      	movs	r2, #0
 800687c:	653b      	str	r3, [r7, #80]	@ 0x50
 800687e:	657a      	str	r2, [r7, #84]	@ 0x54
 8006880:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006886:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006888:	2300      	movs	r3, #0
 800688a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800688c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8006890:	4622      	mov	r2, r4
 8006892:	462b      	mov	r3, r5
 8006894:	f04f 0000 	mov.w	r0, #0
 8006898:	f04f 0100 	mov.w	r1, #0
 800689c:	0159      	lsls	r1, r3, #5
 800689e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068a2:	0150      	lsls	r0, r2, #5
 80068a4:	4602      	mov	r2, r0
 80068a6:	460b      	mov	r3, r1
 80068a8:	4621      	mov	r1, r4
 80068aa:	1a51      	subs	r1, r2, r1
 80068ac:	6139      	str	r1, [r7, #16]
 80068ae:	4629      	mov	r1, r5
 80068b0:	eb63 0301 	sbc.w	r3, r3, r1
 80068b4:	617b      	str	r3, [r7, #20]
 80068b6:	f04f 0200 	mov.w	r2, #0
 80068ba:	f04f 0300 	mov.w	r3, #0
 80068be:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80068c2:	4659      	mov	r1, fp
 80068c4:	018b      	lsls	r3, r1, #6
 80068c6:	4651      	mov	r1, sl
 80068c8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80068cc:	4651      	mov	r1, sl
 80068ce:	018a      	lsls	r2, r1, #6
 80068d0:	4651      	mov	r1, sl
 80068d2:	ebb2 0801 	subs.w	r8, r2, r1
 80068d6:	4659      	mov	r1, fp
 80068d8:	eb63 0901 	sbc.w	r9, r3, r1
 80068dc:	f04f 0200 	mov.w	r2, #0
 80068e0:	f04f 0300 	mov.w	r3, #0
 80068e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80068e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80068ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80068f0:	4690      	mov	r8, r2
 80068f2:	4699      	mov	r9, r3
 80068f4:	4623      	mov	r3, r4
 80068f6:	eb18 0303 	adds.w	r3, r8, r3
 80068fa:	60bb      	str	r3, [r7, #8]
 80068fc:	462b      	mov	r3, r5
 80068fe:	eb49 0303 	adc.w	r3, r9, r3
 8006902:	60fb      	str	r3, [r7, #12]
 8006904:	f04f 0200 	mov.w	r2, #0
 8006908:	f04f 0300 	mov.w	r3, #0
 800690c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006910:	4629      	mov	r1, r5
 8006912:	028b      	lsls	r3, r1, #10
 8006914:	4621      	mov	r1, r4
 8006916:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800691a:	4621      	mov	r1, r4
 800691c:	028a      	lsls	r2, r1, #10
 800691e:	4610      	mov	r0, r2
 8006920:	4619      	mov	r1, r3
 8006922:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006926:	2200      	movs	r2, #0
 8006928:	643b      	str	r3, [r7, #64]	@ 0x40
 800692a:	647a      	str	r2, [r7, #68]	@ 0x44
 800692c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006930:	f7f9 fcc6 	bl	80002c0 <__aeabi_uldivmod>
 8006934:	4602      	mov	r2, r0
 8006936:	460b      	mov	r3, r1
 8006938:	4613      	mov	r3, r2
 800693a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800693e:	4b60      	ldr	r3, [pc, #384]	@ (8006ac0 <HAL_RCC_GetSysClockFreq+0x348>)
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	0c1b      	lsrs	r3, r3, #16
 8006944:	f003 0303 	and.w	r3, r3, #3
 8006948:	3301      	adds	r3, #1
 800694a:	005b      	lsls	r3, r3, #1
 800694c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 8006950:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006954:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006958:	fbb2 f3f3 	udiv	r3, r2, r3
 800695c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8006960:	e0a6      	b.n	8006ab0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006962:	4b57      	ldr	r3, [pc, #348]	@ (8006ac0 <HAL_RCC_GetSysClockFreq+0x348>)
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800696a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800696e:	4b54      	ldr	r3, [pc, #336]	@ (8006ac0 <HAL_RCC_GetSysClockFreq+0x348>)
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006976:	2b00      	cmp	r3, #0
 8006978:	d02a      	beq.n	80069d0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800697a:	4b51      	ldr	r3, [pc, #324]	@ (8006ac0 <HAL_RCC_GetSysClockFreq+0x348>)
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	099b      	lsrs	r3, r3, #6
 8006980:	2200      	movs	r2, #0
 8006982:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006984:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006988:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800698c:	2100      	movs	r1, #0
 800698e:	4b4e      	ldr	r3, [pc, #312]	@ (8006ac8 <HAL_RCC_GetSysClockFreq+0x350>)
 8006990:	fb03 f201 	mul.w	r2, r3, r1
 8006994:	2300      	movs	r3, #0
 8006996:	fb00 f303 	mul.w	r3, r0, r3
 800699a:	4413      	add	r3, r2
 800699c:	4a4a      	ldr	r2, [pc, #296]	@ (8006ac8 <HAL_RCC_GetSysClockFreq+0x350>)
 800699e:	fba0 1202 	umull	r1, r2, r0, r2
 80069a2:	677a      	str	r2, [r7, #116]	@ 0x74
 80069a4:	460a      	mov	r2, r1
 80069a6:	673a      	str	r2, [r7, #112]	@ 0x70
 80069a8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80069aa:	4413      	add	r3, r2
 80069ac:	677b      	str	r3, [r7, #116]	@ 0x74
 80069ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80069b2:	2200      	movs	r2, #0
 80069b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80069b6:	637a      	str	r2, [r7, #52]	@ 0x34
 80069b8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80069bc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80069c0:	f7f9 fc7e 	bl	80002c0 <__aeabi_uldivmod>
 80069c4:	4602      	mov	r2, r0
 80069c6:	460b      	mov	r3, r1
 80069c8:	4613      	mov	r3, r2
 80069ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80069ce:	e05b      	b.n	8006a88 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069d0:	4b3b      	ldr	r3, [pc, #236]	@ (8006ac0 <HAL_RCC_GetSysClockFreq+0x348>)
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	099b      	lsrs	r3, r3, #6
 80069d6:	2200      	movs	r2, #0
 80069d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80069da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80069dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069e2:	623b      	str	r3, [r7, #32]
 80069e4:	2300      	movs	r3, #0
 80069e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80069e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80069ec:	4642      	mov	r2, r8
 80069ee:	464b      	mov	r3, r9
 80069f0:	f04f 0000 	mov.w	r0, #0
 80069f4:	f04f 0100 	mov.w	r1, #0
 80069f8:	0159      	lsls	r1, r3, #5
 80069fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069fe:	0150      	lsls	r0, r2, #5
 8006a00:	4602      	mov	r2, r0
 8006a02:	460b      	mov	r3, r1
 8006a04:	4641      	mov	r1, r8
 8006a06:	ebb2 0a01 	subs.w	sl, r2, r1
 8006a0a:	4649      	mov	r1, r9
 8006a0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006a10:	f04f 0200 	mov.w	r2, #0
 8006a14:	f04f 0300 	mov.w	r3, #0
 8006a18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006a1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006a20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006a24:	ebb2 040a 	subs.w	r4, r2, sl
 8006a28:	eb63 050b 	sbc.w	r5, r3, fp
 8006a2c:	f04f 0200 	mov.w	r2, #0
 8006a30:	f04f 0300 	mov.w	r3, #0
 8006a34:	00eb      	lsls	r3, r5, #3
 8006a36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a3a:	00e2      	lsls	r2, r4, #3
 8006a3c:	4614      	mov	r4, r2
 8006a3e:	461d      	mov	r5, r3
 8006a40:	4643      	mov	r3, r8
 8006a42:	18e3      	adds	r3, r4, r3
 8006a44:	603b      	str	r3, [r7, #0]
 8006a46:	464b      	mov	r3, r9
 8006a48:	eb45 0303 	adc.w	r3, r5, r3
 8006a4c:	607b      	str	r3, [r7, #4]
 8006a4e:	f04f 0200 	mov.w	r2, #0
 8006a52:	f04f 0300 	mov.w	r3, #0
 8006a56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006a5a:	4629      	mov	r1, r5
 8006a5c:	028b      	lsls	r3, r1, #10
 8006a5e:	4621      	mov	r1, r4
 8006a60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006a64:	4621      	mov	r1, r4
 8006a66:	028a      	lsls	r2, r1, #10
 8006a68:	4610      	mov	r0, r2
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a70:	2200      	movs	r2, #0
 8006a72:	61bb      	str	r3, [r7, #24]
 8006a74:	61fa      	str	r2, [r7, #28]
 8006a76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a7a:	f7f9 fc21 	bl	80002c0 <__aeabi_uldivmod>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	460b      	mov	r3, r1
 8006a82:	4613      	mov	r3, r2
 8006a84:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006a88:	4b0d      	ldr	r3, [pc, #52]	@ (8006ac0 <HAL_RCC_GetSysClockFreq+0x348>)
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	0f1b      	lsrs	r3, r3, #28
 8006a8e:	f003 0307 	and.w	r3, r3, #7
 8006a92:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 8006a96:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006a9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aa2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8006aa6:	e003      	b.n	8006ab0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006aa8:	4b06      	ldr	r3, [pc, #24]	@ (8006ac4 <HAL_RCC_GetSysClockFreq+0x34c>)
 8006aaa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8006aae:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ab0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3798      	adds	r7, #152	@ 0x98
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006abe:	bf00      	nop
 8006ac0:	40023800 	.word	0x40023800
 8006ac4:	00f42400 	.word	0x00f42400
 8006ac8:	017d7840 	.word	0x017d7840

08006acc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b086      	sub	sp, #24
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d101      	bne.n	8006ade <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e28d      	b.n	8006ffa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 0301 	and.w	r3, r3, #1
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f000 8083 	beq.w	8006bf2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006aec:	4b94      	ldr	r3, [pc, #592]	@ (8006d40 <HAL_RCC_OscConfig+0x274>)
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	f003 030c 	and.w	r3, r3, #12
 8006af4:	2b04      	cmp	r3, #4
 8006af6:	d019      	beq.n	8006b2c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006af8:	4b91      	ldr	r3, [pc, #580]	@ (8006d40 <HAL_RCC_OscConfig+0x274>)
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006b00:	2b08      	cmp	r3, #8
 8006b02:	d106      	bne.n	8006b12 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006b04:	4b8e      	ldr	r3, [pc, #568]	@ (8006d40 <HAL_RCC_OscConfig+0x274>)
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b10:	d00c      	beq.n	8006b2c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b12:	4b8b      	ldr	r3, [pc, #556]	@ (8006d40 <HAL_RCC_OscConfig+0x274>)
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006b1a:	2b0c      	cmp	r3, #12
 8006b1c:	d112      	bne.n	8006b44 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b1e:	4b88      	ldr	r3, [pc, #544]	@ (8006d40 <HAL_RCC_OscConfig+0x274>)
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b2a:	d10b      	bne.n	8006b44 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b2c:	4b84      	ldr	r3, [pc, #528]	@ (8006d40 <HAL_RCC_OscConfig+0x274>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d05b      	beq.n	8006bf0 <HAL_RCC_OscConfig+0x124>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d157      	bne.n	8006bf0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e25a      	b.n	8006ffa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b4c:	d106      	bne.n	8006b5c <HAL_RCC_OscConfig+0x90>
 8006b4e:	4b7c      	ldr	r3, [pc, #496]	@ (8006d40 <HAL_RCC_OscConfig+0x274>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a7b      	ldr	r2, [pc, #492]	@ (8006d40 <HAL_RCC_OscConfig+0x274>)
 8006b54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b58:	6013      	str	r3, [r2, #0]
 8006b5a:	e01d      	b.n	8006b98 <HAL_RCC_OscConfig+0xcc>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b64:	d10c      	bne.n	8006b80 <HAL_RCC_OscConfig+0xb4>
 8006b66:	4b76      	ldr	r3, [pc, #472]	@ (8006d40 <HAL_RCC_OscConfig+0x274>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a75      	ldr	r2, [pc, #468]	@ (8006d40 <HAL_RCC_OscConfig+0x274>)
 8006b6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b70:	6013      	str	r3, [r2, #0]
 8006b72:	4b73      	ldr	r3, [pc, #460]	@ (8006d40 <HAL_RCC_OscConfig+0x274>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a72      	ldr	r2, [pc, #456]	@ (8006d40 <HAL_RCC_OscConfig+0x274>)
 8006b78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b7c:	6013      	str	r3, [r2, #0]
 8006b7e:	e00b      	b.n	8006b98 <HAL_RCC_OscConfig+0xcc>
 8006b80:	4b6f      	ldr	r3, [pc, #444]	@ (8006d40 <HAL_RCC_OscConfig+0x274>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a6e      	ldr	r2, [pc, #440]	@ (8006d40 <HAL_RCC_OscConfig+0x274>)
 8006b86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b8a:	6013      	str	r3, [r2, #0]
 8006b8c:	4b6c      	ldr	r3, [pc, #432]	@ (8006d40 <HAL_RCC_OscConfig+0x274>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a6b      	ldr	r2, [pc, #428]	@ (8006d40 <HAL_RCC_OscConfig+0x274>)
 8006b92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d013      	beq.n	8006bc8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ba0:	f7ff f94e 	bl	8005e40 <HAL_GetTick>
 8006ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ba6:	e008      	b.n	8006bba <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ba8:	f7ff f94a 	bl	8005e40 <HAL_GetTick>
 8006bac:	4602      	mov	r2, r0
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	2b64      	cmp	r3, #100	@ 0x64
 8006bb4:	d901      	bls.n	8006bba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e21f      	b.n	8006ffa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bba:	4b61      	ldr	r3, [pc, #388]	@ (8006d40 <HAL_RCC_OscConfig+0x274>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d0f0      	beq.n	8006ba8 <HAL_RCC_OscConfig+0xdc>
 8006bc6:	e014      	b.n	8006bf2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bc8:	f7ff f93a 	bl	8005e40 <HAL_GetTick>
 8006bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bce:	e008      	b.n	8006be2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006bd0:	f7ff f936 	bl	8005e40 <HAL_GetTick>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	2b64      	cmp	r3, #100	@ 0x64
 8006bdc:	d901      	bls.n	8006be2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e20b      	b.n	8006ffa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006be2:	4b57      	ldr	r3, [pc, #348]	@ (8006d40 <HAL_RCC_OscConfig+0x274>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1f0      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x104>
 8006bee:	e000      	b.n	8006bf2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 0302 	and.w	r3, r3, #2
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d06f      	beq.n	8006cde <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006bfe:	4b50      	ldr	r3, [pc, #320]	@ (8006d40 <HAL_RCC_OscConfig+0x274>)
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f003 030c 	and.w	r3, r3, #12
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d017      	beq.n	8006c3a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006c0a:	4b4d      	ldr	r3, [pc, #308]	@ (8006d40 <HAL_RCC_OscConfig+0x274>)
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006c12:	2b08      	cmp	r3, #8
 8006c14:	d105      	bne.n	8006c22 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006c16:	4b4a      	ldr	r3, [pc, #296]	@ (8006d40 <HAL_RCC_OscConfig+0x274>)
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00b      	beq.n	8006c3a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c22:	4b47      	ldr	r3, [pc, #284]	@ (8006d40 <HAL_RCC_OscConfig+0x274>)
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006c2a:	2b0c      	cmp	r3, #12
 8006c2c:	d11c      	bne.n	8006c68 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c2e:	4b44      	ldr	r3, [pc, #272]	@ (8006d40 <HAL_RCC_OscConfig+0x274>)
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d116      	bne.n	8006c68 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c3a:	4b41      	ldr	r3, [pc, #260]	@ (8006d40 <HAL_RCC_OscConfig+0x274>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 0302 	and.w	r3, r3, #2
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d005      	beq.n	8006c52 <HAL_RCC_OscConfig+0x186>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d001      	beq.n	8006c52 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e1d3      	b.n	8006ffa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c52:	4b3b      	ldr	r3, [pc, #236]	@ (8006d40 <HAL_RCC_OscConfig+0x274>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	00db      	lsls	r3, r3, #3
 8006c60:	4937      	ldr	r1, [pc, #220]	@ (8006d40 <HAL_RCC_OscConfig+0x274>)
 8006c62:	4313      	orrs	r3, r2
 8006c64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c66:	e03a      	b.n	8006cde <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d020      	beq.n	8006cb2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c70:	4b34      	ldr	r3, [pc, #208]	@ (8006d44 <HAL_RCC_OscConfig+0x278>)
 8006c72:	2201      	movs	r2, #1
 8006c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c76:	f7ff f8e3 	bl	8005e40 <HAL_GetTick>
 8006c7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c7c:	e008      	b.n	8006c90 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c7e:	f7ff f8df 	bl	8005e40 <HAL_GetTick>
 8006c82:	4602      	mov	r2, r0
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	1ad3      	subs	r3, r2, r3
 8006c88:	2b02      	cmp	r3, #2
 8006c8a:	d901      	bls.n	8006c90 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	e1b4      	b.n	8006ffa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c90:	4b2b      	ldr	r3, [pc, #172]	@ (8006d40 <HAL_RCC_OscConfig+0x274>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0302 	and.w	r3, r3, #2
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d0f0      	beq.n	8006c7e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c9c:	4b28      	ldr	r3, [pc, #160]	@ (8006d40 <HAL_RCC_OscConfig+0x274>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	691b      	ldr	r3, [r3, #16]
 8006ca8:	00db      	lsls	r3, r3, #3
 8006caa:	4925      	ldr	r1, [pc, #148]	@ (8006d40 <HAL_RCC_OscConfig+0x274>)
 8006cac:	4313      	orrs	r3, r2
 8006cae:	600b      	str	r3, [r1, #0]
 8006cb0:	e015      	b.n	8006cde <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cb2:	4b24      	ldr	r3, [pc, #144]	@ (8006d44 <HAL_RCC_OscConfig+0x278>)
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cb8:	f7ff f8c2 	bl	8005e40 <HAL_GetTick>
 8006cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cbe:	e008      	b.n	8006cd2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cc0:	f7ff f8be 	bl	8005e40 <HAL_GetTick>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d901      	bls.n	8006cd2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e193      	b.n	8006ffa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cd2:	4b1b      	ldr	r3, [pc, #108]	@ (8006d40 <HAL_RCC_OscConfig+0x274>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f003 0302 	and.w	r3, r3, #2
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d1f0      	bne.n	8006cc0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 0308 	and.w	r3, r3, #8
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d036      	beq.n	8006d58 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	695b      	ldr	r3, [r3, #20]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d016      	beq.n	8006d20 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cf2:	4b15      	ldr	r3, [pc, #84]	@ (8006d48 <HAL_RCC_OscConfig+0x27c>)
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cf8:	f7ff f8a2 	bl	8005e40 <HAL_GetTick>
 8006cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cfe:	e008      	b.n	8006d12 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d00:	f7ff f89e 	bl	8005e40 <HAL_GetTick>
 8006d04:	4602      	mov	r2, r0
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	1ad3      	subs	r3, r2, r3
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	d901      	bls.n	8006d12 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	e173      	b.n	8006ffa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d12:	4b0b      	ldr	r3, [pc, #44]	@ (8006d40 <HAL_RCC_OscConfig+0x274>)
 8006d14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d16:	f003 0302 	and.w	r3, r3, #2
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d0f0      	beq.n	8006d00 <HAL_RCC_OscConfig+0x234>
 8006d1e:	e01b      	b.n	8006d58 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d20:	4b09      	ldr	r3, [pc, #36]	@ (8006d48 <HAL_RCC_OscConfig+0x27c>)
 8006d22:	2200      	movs	r2, #0
 8006d24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d26:	f7ff f88b 	bl	8005e40 <HAL_GetTick>
 8006d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d2c:	e00e      	b.n	8006d4c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d2e:	f7ff f887 	bl	8005e40 <HAL_GetTick>
 8006d32:	4602      	mov	r2, r0
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	2b02      	cmp	r3, #2
 8006d3a:	d907      	bls.n	8006d4c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	e15c      	b.n	8006ffa <HAL_RCC_OscConfig+0x52e>
 8006d40:	40023800 	.word	0x40023800
 8006d44:	42470000 	.word	0x42470000
 8006d48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d4c:	4b8a      	ldr	r3, [pc, #552]	@ (8006f78 <HAL_RCC_OscConfig+0x4ac>)
 8006d4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d50:	f003 0302 	and.w	r3, r3, #2
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d1ea      	bne.n	8006d2e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 0304 	and.w	r3, r3, #4
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f000 8097 	beq.w	8006e94 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d66:	2300      	movs	r3, #0
 8006d68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d6a:	4b83      	ldr	r3, [pc, #524]	@ (8006f78 <HAL_RCC_OscConfig+0x4ac>)
 8006d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d10f      	bne.n	8006d96 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d76:	2300      	movs	r3, #0
 8006d78:	60bb      	str	r3, [r7, #8]
 8006d7a:	4b7f      	ldr	r3, [pc, #508]	@ (8006f78 <HAL_RCC_OscConfig+0x4ac>)
 8006d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d7e:	4a7e      	ldr	r2, [pc, #504]	@ (8006f78 <HAL_RCC_OscConfig+0x4ac>)
 8006d80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d84:	6413      	str	r3, [r2, #64]	@ 0x40
 8006d86:	4b7c      	ldr	r3, [pc, #496]	@ (8006f78 <HAL_RCC_OscConfig+0x4ac>)
 8006d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d8e:	60bb      	str	r3, [r7, #8]
 8006d90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d92:	2301      	movs	r3, #1
 8006d94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d96:	4b79      	ldr	r3, [pc, #484]	@ (8006f7c <HAL_RCC_OscConfig+0x4b0>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d118      	bne.n	8006dd4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006da2:	4b76      	ldr	r3, [pc, #472]	@ (8006f7c <HAL_RCC_OscConfig+0x4b0>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a75      	ldr	r2, [pc, #468]	@ (8006f7c <HAL_RCC_OscConfig+0x4b0>)
 8006da8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006dac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006dae:	f7ff f847 	bl	8005e40 <HAL_GetTick>
 8006db2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006db4:	e008      	b.n	8006dc8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006db6:	f7ff f843 	bl	8005e40 <HAL_GetTick>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	1ad3      	subs	r3, r2, r3
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d901      	bls.n	8006dc8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006dc4:	2303      	movs	r3, #3
 8006dc6:	e118      	b.n	8006ffa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dc8:	4b6c      	ldr	r3, [pc, #432]	@ (8006f7c <HAL_RCC_OscConfig+0x4b0>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d0f0      	beq.n	8006db6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d106      	bne.n	8006dea <HAL_RCC_OscConfig+0x31e>
 8006ddc:	4b66      	ldr	r3, [pc, #408]	@ (8006f78 <HAL_RCC_OscConfig+0x4ac>)
 8006dde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006de0:	4a65      	ldr	r2, [pc, #404]	@ (8006f78 <HAL_RCC_OscConfig+0x4ac>)
 8006de2:	f043 0301 	orr.w	r3, r3, #1
 8006de6:	6713      	str	r3, [r2, #112]	@ 0x70
 8006de8:	e01c      	b.n	8006e24 <HAL_RCC_OscConfig+0x358>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	2b05      	cmp	r3, #5
 8006df0:	d10c      	bne.n	8006e0c <HAL_RCC_OscConfig+0x340>
 8006df2:	4b61      	ldr	r3, [pc, #388]	@ (8006f78 <HAL_RCC_OscConfig+0x4ac>)
 8006df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006df6:	4a60      	ldr	r2, [pc, #384]	@ (8006f78 <HAL_RCC_OscConfig+0x4ac>)
 8006df8:	f043 0304 	orr.w	r3, r3, #4
 8006dfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8006dfe:	4b5e      	ldr	r3, [pc, #376]	@ (8006f78 <HAL_RCC_OscConfig+0x4ac>)
 8006e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e02:	4a5d      	ldr	r2, [pc, #372]	@ (8006f78 <HAL_RCC_OscConfig+0x4ac>)
 8006e04:	f043 0301 	orr.w	r3, r3, #1
 8006e08:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e0a:	e00b      	b.n	8006e24 <HAL_RCC_OscConfig+0x358>
 8006e0c:	4b5a      	ldr	r3, [pc, #360]	@ (8006f78 <HAL_RCC_OscConfig+0x4ac>)
 8006e0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e10:	4a59      	ldr	r2, [pc, #356]	@ (8006f78 <HAL_RCC_OscConfig+0x4ac>)
 8006e12:	f023 0301 	bic.w	r3, r3, #1
 8006e16:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e18:	4b57      	ldr	r3, [pc, #348]	@ (8006f78 <HAL_RCC_OscConfig+0x4ac>)
 8006e1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e1c:	4a56      	ldr	r2, [pc, #344]	@ (8006f78 <HAL_RCC_OscConfig+0x4ac>)
 8006e1e:	f023 0304 	bic.w	r3, r3, #4
 8006e22:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d015      	beq.n	8006e58 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e2c:	f7ff f808 	bl	8005e40 <HAL_GetTick>
 8006e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e32:	e00a      	b.n	8006e4a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e34:	f7ff f804 	bl	8005e40 <HAL_GetTick>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d901      	bls.n	8006e4a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006e46:	2303      	movs	r3, #3
 8006e48:	e0d7      	b.n	8006ffa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e4a:	4b4b      	ldr	r3, [pc, #300]	@ (8006f78 <HAL_RCC_OscConfig+0x4ac>)
 8006e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e4e:	f003 0302 	and.w	r3, r3, #2
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d0ee      	beq.n	8006e34 <HAL_RCC_OscConfig+0x368>
 8006e56:	e014      	b.n	8006e82 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e58:	f7fe fff2 	bl	8005e40 <HAL_GetTick>
 8006e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e5e:	e00a      	b.n	8006e76 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e60:	f7fe ffee 	bl	8005e40 <HAL_GetTick>
 8006e64:	4602      	mov	r2, r0
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d901      	bls.n	8006e76 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006e72:	2303      	movs	r3, #3
 8006e74:	e0c1      	b.n	8006ffa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e76:	4b40      	ldr	r3, [pc, #256]	@ (8006f78 <HAL_RCC_OscConfig+0x4ac>)
 8006e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e7a:	f003 0302 	and.w	r3, r3, #2
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d1ee      	bne.n	8006e60 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e82:	7dfb      	ldrb	r3, [r7, #23]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d105      	bne.n	8006e94 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e88:	4b3b      	ldr	r3, [pc, #236]	@ (8006f78 <HAL_RCC_OscConfig+0x4ac>)
 8006e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e8c:	4a3a      	ldr	r2, [pc, #232]	@ (8006f78 <HAL_RCC_OscConfig+0x4ac>)
 8006e8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e92:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	699b      	ldr	r3, [r3, #24]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f000 80ad 	beq.w	8006ff8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e9e:	4b36      	ldr	r3, [pc, #216]	@ (8006f78 <HAL_RCC_OscConfig+0x4ac>)
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	f003 030c 	and.w	r3, r3, #12
 8006ea6:	2b08      	cmp	r3, #8
 8006ea8:	d060      	beq.n	8006f6c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d145      	bne.n	8006f3e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006eb2:	4b33      	ldr	r3, [pc, #204]	@ (8006f80 <HAL_RCC_OscConfig+0x4b4>)
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eb8:	f7fe ffc2 	bl	8005e40 <HAL_GetTick>
 8006ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ebe:	e008      	b.n	8006ed2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ec0:	f7fe ffbe 	bl	8005e40 <HAL_GetTick>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d901      	bls.n	8006ed2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	e093      	b.n	8006ffa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ed2:	4b29      	ldr	r3, [pc, #164]	@ (8006f78 <HAL_RCC_OscConfig+0x4ac>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1f0      	bne.n	8006ec0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	69da      	ldr	r2, [r3, #28]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	431a      	orrs	r2, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eec:	019b      	lsls	r3, r3, #6
 8006eee:	431a      	orrs	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ef4:	085b      	lsrs	r3, r3, #1
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	041b      	lsls	r3, r3, #16
 8006efa:	431a      	orrs	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f00:	061b      	lsls	r3, r3, #24
 8006f02:	431a      	orrs	r2, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f08:	071b      	lsls	r3, r3, #28
 8006f0a:	491b      	ldr	r1, [pc, #108]	@ (8006f78 <HAL_RCC_OscConfig+0x4ac>)
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f10:	4b1b      	ldr	r3, [pc, #108]	@ (8006f80 <HAL_RCC_OscConfig+0x4b4>)
 8006f12:	2201      	movs	r2, #1
 8006f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f16:	f7fe ff93 	bl	8005e40 <HAL_GetTick>
 8006f1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f1c:	e008      	b.n	8006f30 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f1e:	f7fe ff8f 	bl	8005e40 <HAL_GetTick>
 8006f22:	4602      	mov	r2, r0
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	1ad3      	subs	r3, r2, r3
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	d901      	bls.n	8006f30 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	e064      	b.n	8006ffa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f30:	4b11      	ldr	r3, [pc, #68]	@ (8006f78 <HAL_RCC_OscConfig+0x4ac>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d0f0      	beq.n	8006f1e <HAL_RCC_OscConfig+0x452>
 8006f3c:	e05c      	b.n	8006ff8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f3e:	4b10      	ldr	r3, [pc, #64]	@ (8006f80 <HAL_RCC_OscConfig+0x4b4>)
 8006f40:	2200      	movs	r2, #0
 8006f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f44:	f7fe ff7c 	bl	8005e40 <HAL_GetTick>
 8006f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f4a:	e008      	b.n	8006f5e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f4c:	f7fe ff78 	bl	8005e40 <HAL_GetTick>
 8006f50:	4602      	mov	r2, r0
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d901      	bls.n	8006f5e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	e04d      	b.n	8006ffa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f5e:	4b06      	ldr	r3, [pc, #24]	@ (8006f78 <HAL_RCC_OscConfig+0x4ac>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1f0      	bne.n	8006f4c <HAL_RCC_OscConfig+0x480>
 8006f6a:	e045      	b.n	8006ff8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	699b      	ldr	r3, [r3, #24]
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d107      	bne.n	8006f84 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e040      	b.n	8006ffa <HAL_RCC_OscConfig+0x52e>
 8006f78:	40023800 	.word	0x40023800
 8006f7c:	40007000 	.word	0x40007000
 8006f80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006f84:	4b1f      	ldr	r3, [pc, #124]	@ (8007004 <HAL_RCC_OscConfig+0x538>)
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	699b      	ldr	r3, [r3, #24]
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d030      	beq.n	8006ff4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d129      	bne.n	8006ff4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d122      	bne.n	8006ff4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006fb4:	4013      	ands	r3, r2
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006fba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d119      	bne.n	8006ff4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fca:	085b      	lsrs	r3, r3, #1
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d10f      	bne.n	8006ff4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d107      	bne.n	8006ff4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d001      	beq.n	8006ff8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e000      	b.n	8006ffa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3718      	adds	r7, #24
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	40023800 	.word	0x40023800

08007008 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d101      	bne.n	800701a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	e07b      	b.n	8007112 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800701e:	2b00      	cmp	r3, #0
 8007020:	d108      	bne.n	8007034 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800702a:	d009      	beq.n	8007040 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	61da      	str	r2, [r3, #28]
 8007032:	e005      	b.n	8007040 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800704c:	b2db      	uxtb	r3, r3
 800704e:	2b00      	cmp	r3, #0
 8007050:	d106      	bne.n	8007060 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f7fe fc96 	bl	800598c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2202      	movs	r2, #2
 8007064:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007076:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007088:	431a      	orrs	r2, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007092:	431a      	orrs	r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	f003 0302 	and.w	r3, r3, #2
 800709c:	431a      	orrs	r2, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	695b      	ldr	r3, [r3, #20]
 80070a2:	f003 0301 	and.w	r3, r3, #1
 80070a6:	431a      	orrs	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	699b      	ldr	r3, [r3, #24]
 80070ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80070b0:	431a      	orrs	r2, r3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	69db      	ldr	r3, [r3, #28]
 80070b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80070ba:	431a      	orrs	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6a1b      	ldr	r3, [r3, #32]
 80070c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070c4:	ea42 0103 	orr.w	r1, r2, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070cc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	430a      	orrs	r2, r1
 80070d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	699b      	ldr	r3, [r3, #24]
 80070dc:	0c1b      	lsrs	r3, r3, #16
 80070de:	f003 0104 	and.w	r1, r3, #4
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070e6:	f003 0210 	and.w	r2, r3, #16
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	430a      	orrs	r2, r1
 80070f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	69da      	ldr	r2, [r3, #28]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007100:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	3708      	adds	r7, #8
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800711a:	b580      	push	{r7, lr}
 800711c:	b082      	sub	sp, #8
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d101      	bne.n	800712c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	e042      	b.n	80071b2 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007132:	b2db      	uxtb	r3, r3
 8007134:	2b00      	cmp	r3, #0
 8007136:	d106      	bne.n	8007146 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f7fe fc6b 	bl	8005a1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2224      	movs	r2, #36	@ 0x24
 800714a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	68da      	ldr	r2, [r3, #12]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800715c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 fdbe 	bl	8007ce0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	691a      	ldr	r2, [r3, #16]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007172:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	695a      	ldr	r2, [r3, #20]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007182:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68da      	ldr	r2, [r3, #12]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007192:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2220      	movs	r2, #32
 800719e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2220      	movs	r2, #32
 80071a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3708      	adds	r7, #8
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b08a      	sub	sp, #40	@ 0x28
 80071be:	af02      	add	r7, sp, #8
 80071c0:	60f8      	str	r0, [r7, #12]
 80071c2:	60b9      	str	r1, [r7, #8]
 80071c4:	603b      	str	r3, [r7, #0]
 80071c6:	4613      	mov	r3, r2
 80071c8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80071ca:	2300      	movs	r3, #0
 80071cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	2b20      	cmp	r3, #32
 80071d8:	d175      	bne.n	80072c6 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d002      	beq.n	80071e6 <HAL_UART_Transmit+0x2c>
 80071e0:	88fb      	ldrh	r3, [r7, #6]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d101      	bne.n	80071ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e06e      	b.n	80072c8 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2200      	movs	r2, #0
 80071ee:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2221      	movs	r2, #33	@ 0x21
 80071f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80071f8:	f7fe fe22 	bl	8005e40 <HAL_GetTick>
 80071fc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	88fa      	ldrh	r2, [r7, #6]
 8007202:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	88fa      	ldrh	r2, [r7, #6]
 8007208:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007212:	d108      	bne.n	8007226 <HAL_UART_Transmit+0x6c>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d104      	bne.n	8007226 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800721c:	2300      	movs	r3, #0
 800721e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	61bb      	str	r3, [r7, #24]
 8007224:	e003      	b.n	800722e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800722a:	2300      	movs	r3, #0
 800722c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800722e:	e02e      	b.n	800728e <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	9300      	str	r3, [sp, #0]
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	2200      	movs	r2, #0
 8007238:	2180      	movs	r1, #128	@ 0x80
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f000 fb20 	bl	8007880 <UART_WaitOnFlagUntilTimeout>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d005      	beq.n	8007252 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2220      	movs	r2, #32
 800724a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	e03a      	b.n	80072c8 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d10b      	bne.n	8007270 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007258:	69bb      	ldr	r3, [r7, #24]
 800725a:	881b      	ldrh	r3, [r3, #0]
 800725c:	461a      	mov	r2, r3
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007266:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	3302      	adds	r3, #2
 800726c:	61bb      	str	r3, [r7, #24]
 800726e:	e007      	b.n	8007280 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	781a      	ldrb	r2, [r3, #0]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	3301      	adds	r3, #1
 800727e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007284:	b29b      	uxth	r3, r3
 8007286:	3b01      	subs	r3, #1
 8007288:	b29a      	uxth	r2, r3
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007292:	b29b      	uxth	r3, r3
 8007294:	2b00      	cmp	r3, #0
 8007296:	d1cb      	bne.n	8007230 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	9300      	str	r3, [sp, #0]
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	2200      	movs	r2, #0
 80072a0:	2140      	movs	r1, #64	@ 0x40
 80072a2:	68f8      	ldr	r0, [r7, #12]
 80072a4:	f000 faec 	bl	8007880 <UART_WaitOnFlagUntilTimeout>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d005      	beq.n	80072ba <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2220      	movs	r2, #32
 80072b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80072b6:	2303      	movs	r3, #3
 80072b8:	e006      	b.n	80072c8 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2220      	movs	r2, #32
 80072be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80072c2:	2300      	movs	r3, #0
 80072c4:	e000      	b.n	80072c8 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80072c6:	2302      	movs	r3, #2
  }
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3720      	adds	r7, #32
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	4613      	mov	r3, r2
 80072dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b20      	cmp	r3, #32
 80072e8:	d112      	bne.n	8007310 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d002      	beq.n	80072f6 <HAL_UART_Receive_IT+0x26>
 80072f0:	88fb      	ldrh	r3, [r7, #6]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d101      	bne.n	80072fa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e00b      	b.n	8007312 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2200      	movs	r2, #0
 80072fe:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007300:	88fb      	ldrh	r3, [r7, #6]
 8007302:	461a      	mov	r2, r3
 8007304:	68b9      	ldr	r1, [r7, #8]
 8007306:	68f8      	ldr	r0, [r7, #12]
 8007308:	f000 fb13 	bl	8007932 <UART_Start_Receive_IT>
 800730c:	4603      	mov	r3, r0
 800730e:	e000      	b.n	8007312 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007310:	2302      	movs	r3, #2
  }
}
 8007312:	4618      	mov	r0, r3
 8007314:	3710      	adds	r7, #16
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
	...

0800731c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b0ba      	sub	sp, #232	@ 0xe8
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	695b      	ldr	r3, [r3, #20]
 800733e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007342:	2300      	movs	r3, #0
 8007344:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007348:	2300      	movs	r3, #0
 800734a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800734e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007352:	f003 030f 	and.w	r3, r3, #15
 8007356:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800735a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800735e:	2b00      	cmp	r3, #0
 8007360:	d10f      	bne.n	8007382 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007366:	f003 0320 	and.w	r3, r3, #32
 800736a:	2b00      	cmp	r3, #0
 800736c:	d009      	beq.n	8007382 <HAL_UART_IRQHandler+0x66>
 800736e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007372:	f003 0320 	and.w	r3, r3, #32
 8007376:	2b00      	cmp	r3, #0
 8007378:	d003      	beq.n	8007382 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 fbf2 	bl	8007b64 <UART_Receive_IT>
      return;
 8007380:	e25b      	b.n	800783a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007382:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007386:	2b00      	cmp	r3, #0
 8007388:	f000 80de 	beq.w	8007548 <HAL_UART_IRQHandler+0x22c>
 800738c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007390:	f003 0301 	and.w	r3, r3, #1
 8007394:	2b00      	cmp	r3, #0
 8007396:	d106      	bne.n	80073a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800739c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f000 80d1 	beq.w	8007548 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80073a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073aa:	f003 0301 	and.w	r3, r3, #1
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00b      	beq.n	80073ca <HAL_UART_IRQHandler+0xae>
 80073b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d005      	beq.n	80073ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073c2:	f043 0201 	orr.w	r2, r3, #1
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80073ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073ce:	f003 0304 	and.w	r3, r3, #4
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00b      	beq.n	80073ee <HAL_UART_IRQHandler+0xd2>
 80073d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073da:	f003 0301 	and.w	r3, r3, #1
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d005      	beq.n	80073ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073e6:	f043 0202 	orr.w	r2, r3, #2
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80073ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073f2:	f003 0302 	and.w	r3, r3, #2
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00b      	beq.n	8007412 <HAL_UART_IRQHandler+0xf6>
 80073fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073fe:	f003 0301 	and.w	r3, r3, #1
 8007402:	2b00      	cmp	r3, #0
 8007404:	d005      	beq.n	8007412 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800740a:	f043 0204 	orr.w	r2, r3, #4
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007416:	f003 0308 	and.w	r3, r3, #8
 800741a:	2b00      	cmp	r3, #0
 800741c:	d011      	beq.n	8007442 <HAL_UART_IRQHandler+0x126>
 800741e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007422:	f003 0320 	and.w	r3, r3, #32
 8007426:	2b00      	cmp	r3, #0
 8007428:	d105      	bne.n	8007436 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800742a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800742e:	f003 0301 	and.w	r3, r3, #1
 8007432:	2b00      	cmp	r3, #0
 8007434:	d005      	beq.n	8007442 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800743a:	f043 0208 	orr.w	r2, r3, #8
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007446:	2b00      	cmp	r3, #0
 8007448:	f000 81f2 	beq.w	8007830 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800744c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007450:	f003 0320 	and.w	r3, r3, #32
 8007454:	2b00      	cmp	r3, #0
 8007456:	d008      	beq.n	800746a <HAL_UART_IRQHandler+0x14e>
 8007458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800745c:	f003 0320 	and.w	r3, r3, #32
 8007460:	2b00      	cmp	r3, #0
 8007462:	d002      	beq.n	800746a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 fb7d 	bl	8007b64 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	695b      	ldr	r3, [r3, #20]
 8007470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007474:	2b40      	cmp	r3, #64	@ 0x40
 8007476:	bf0c      	ite	eq
 8007478:	2301      	moveq	r3, #1
 800747a:	2300      	movne	r3, #0
 800747c:	b2db      	uxtb	r3, r3
 800747e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007486:	f003 0308 	and.w	r3, r3, #8
 800748a:	2b00      	cmp	r3, #0
 800748c:	d103      	bne.n	8007496 <HAL_UART_IRQHandler+0x17a>
 800748e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007492:	2b00      	cmp	r3, #0
 8007494:	d04f      	beq.n	8007536 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 fa85 	bl	80079a6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	695b      	ldr	r3, [r3, #20]
 80074a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074a6:	2b40      	cmp	r3, #64	@ 0x40
 80074a8:	d141      	bne.n	800752e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	3314      	adds	r3, #20
 80074b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80074b8:	e853 3f00 	ldrex	r3, [r3]
 80074bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80074c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80074c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	3314      	adds	r3, #20
 80074d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80074d6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80074da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80074e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80074e6:	e841 2300 	strex	r3, r2, [r1]
 80074ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80074ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1d9      	bne.n	80074aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d013      	beq.n	8007526 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007502:	4a7e      	ldr	r2, [pc, #504]	@ (80076fc <HAL_UART_IRQHandler+0x3e0>)
 8007504:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800750a:	4618      	mov	r0, r3
 800750c:	f7fe fe49 	bl	80061a2 <HAL_DMA_Abort_IT>
 8007510:	4603      	mov	r3, r0
 8007512:	2b00      	cmp	r3, #0
 8007514:	d016      	beq.n	8007544 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800751a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007520:	4610      	mov	r0, r2
 8007522:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007524:	e00e      	b.n	8007544 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 f994 	bl	8007854 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800752c:	e00a      	b.n	8007544 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 f990 	bl	8007854 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007534:	e006      	b.n	8007544 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 f98c 	bl	8007854 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007542:	e175      	b.n	8007830 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007544:	bf00      	nop
    return;
 8007546:	e173      	b.n	8007830 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800754c:	2b01      	cmp	r3, #1
 800754e:	f040 814f 	bne.w	80077f0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007556:	f003 0310 	and.w	r3, r3, #16
 800755a:	2b00      	cmp	r3, #0
 800755c:	f000 8148 	beq.w	80077f0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007564:	f003 0310 	and.w	r3, r3, #16
 8007568:	2b00      	cmp	r3, #0
 800756a:	f000 8141 	beq.w	80077f0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800756e:	2300      	movs	r3, #0
 8007570:	60bb      	str	r3, [r7, #8]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	60bb      	str	r3, [r7, #8]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	60bb      	str	r3, [r7, #8]
 8007582:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	695b      	ldr	r3, [r3, #20]
 800758a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800758e:	2b40      	cmp	r3, #64	@ 0x40
 8007590:	f040 80b6 	bne.w	8007700 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80075a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	f000 8145 	beq.w	8007834 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80075ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80075b2:	429a      	cmp	r2, r3
 80075b4:	f080 813e 	bcs.w	8007834 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80075be:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075c4:	69db      	ldr	r3, [r3, #28]
 80075c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075ca:	f000 8088 	beq.w	80076de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	330c      	adds	r3, #12
 80075d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80075dc:	e853 3f00 	ldrex	r3, [r3]
 80075e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80075e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80075e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	330c      	adds	r3, #12
 80075f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80075fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80075fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007602:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007606:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800760a:	e841 2300 	strex	r3, r2, [r1]
 800760e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007612:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1d9      	bne.n	80075ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	3314      	adds	r3, #20
 8007620:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007622:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007624:	e853 3f00 	ldrex	r3, [r3]
 8007628:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800762a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800762c:	f023 0301 	bic.w	r3, r3, #1
 8007630:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	3314      	adds	r3, #20
 800763a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800763e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007642:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007644:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007646:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800764a:	e841 2300 	strex	r3, r2, [r1]
 800764e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007650:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007652:	2b00      	cmp	r3, #0
 8007654:	d1e1      	bne.n	800761a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	3314      	adds	r3, #20
 800765c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007660:	e853 3f00 	ldrex	r3, [r3]
 8007664:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007666:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007668:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800766c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	3314      	adds	r3, #20
 8007676:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800767a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800767c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007680:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007682:	e841 2300 	strex	r3, r2, [r1]
 8007686:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007688:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1e3      	bne.n	8007656 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2220      	movs	r2, #32
 8007692:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	330c      	adds	r3, #12
 80076a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076a6:	e853 3f00 	ldrex	r3, [r3]
 80076aa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80076ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076ae:	f023 0310 	bic.w	r3, r3, #16
 80076b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	330c      	adds	r3, #12
 80076bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80076c0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80076c2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80076c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80076c8:	e841 2300 	strex	r3, r2, [r1]
 80076cc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80076ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d1e3      	bne.n	800769c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076d8:	4618      	mov	r0, r3
 80076da:	f7fe fcf2 	bl	80060c2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2202      	movs	r2, #2
 80076e2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	1ad3      	subs	r3, r2, r3
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	4619      	mov	r1, r3
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 f8b7 	bl	8007868 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80076fa:	e09b      	b.n	8007834 <HAL_UART_IRQHandler+0x518>
 80076fc:	08007a6d 	.word	0x08007a6d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007708:	b29b      	uxth	r3, r3
 800770a:	1ad3      	subs	r3, r2, r3
 800770c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007714:	b29b      	uxth	r3, r3
 8007716:	2b00      	cmp	r3, #0
 8007718:	f000 808e 	beq.w	8007838 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800771c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007720:	2b00      	cmp	r3, #0
 8007722:	f000 8089 	beq.w	8007838 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	330c      	adds	r3, #12
 800772c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007730:	e853 3f00 	ldrex	r3, [r3]
 8007734:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007738:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800773c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	330c      	adds	r3, #12
 8007746:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800774a:	647a      	str	r2, [r7, #68]	@ 0x44
 800774c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800774e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007750:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007752:	e841 2300 	strex	r3, r2, [r1]
 8007756:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007758:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800775a:	2b00      	cmp	r3, #0
 800775c:	d1e3      	bne.n	8007726 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	3314      	adds	r3, #20
 8007764:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007768:	e853 3f00 	ldrex	r3, [r3]
 800776c:	623b      	str	r3, [r7, #32]
   return(result);
 800776e:	6a3b      	ldr	r3, [r7, #32]
 8007770:	f023 0301 	bic.w	r3, r3, #1
 8007774:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	3314      	adds	r3, #20
 800777e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007782:	633a      	str	r2, [r7, #48]	@ 0x30
 8007784:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007786:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007788:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800778a:	e841 2300 	strex	r3, r2, [r1]
 800778e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007792:	2b00      	cmp	r3, #0
 8007794:	d1e3      	bne.n	800775e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2220      	movs	r2, #32
 800779a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	330c      	adds	r3, #12
 80077aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	e853 3f00 	ldrex	r3, [r3]
 80077b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f023 0310 	bic.w	r3, r3, #16
 80077ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	330c      	adds	r3, #12
 80077c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80077c8:	61fa      	str	r2, [r7, #28]
 80077ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077cc:	69b9      	ldr	r1, [r7, #24]
 80077ce:	69fa      	ldr	r2, [r7, #28]
 80077d0:	e841 2300 	strex	r3, r2, [r1]
 80077d4:	617b      	str	r3, [r7, #20]
   return(result);
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1e3      	bne.n	80077a4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2202      	movs	r2, #2
 80077e0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80077e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80077e6:	4619      	mov	r1, r3
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 f83d 	bl	8007868 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80077ee:	e023      	b.n	8007838 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80077f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d009      	beq.n	8007810 <HAL_UART_IRQHandler+0x4f4>
 80077fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007800:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007804:	2b00      	cmp	r3, #0
 8007806:	d003      	beq.n	8007810 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 f943 	bl	8007a94 <UART_Transmit_IT>
    return;
 800780e:	e014      	b.n	800783a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007818:	2b00      	cmp	r3, #0
 800781a:	d00e      	beq.n	800783a <HAL_UART_IRQHandler+0x51e>
 800781c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007824:	2b00      	cmp	r3, #0
 8007826:	d008      	beq.n	800783a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 f983 	bl	8007b34 <UART_EndTransmit_IT>
    return;
 800782e:	e004      	b.n	800783a <HAL_UART_IRQHandler+0x51e>
    return;
 8007830:	bf00      	nop
 8007832:	e002      	b.n	800783a <HAL_UART_IRQHandler+0x51e>
      return;
 8007834:	bf00      	nop
 8007836:	e000      	b.n	800783a <HAL_UART_IRQHandler+0x51e>
      return;
 8007838:	bf00      	nop
  }
}
 800783a:	37e8      	adds	r7, #232	@ 0xe8
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007848:	bf00      	nop
 800784a:	370c      	adds	r7, #12
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800785c:	bf00      	nop
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	460b      	mov	r3, r1
 8007872:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007874:	bf00      	nop
 8007876:	370c      	adds	r7, #12
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b086      	sub	sp, #24
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	60b9      	str	r1, [r7, #8]
 800788a:	603b      	str	r3, [r7, #0]
 800788c:	4613      	mov	r3, r2
 800788e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007890:	e03b      	b.n	800790a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007892:	6a3b      	ldr	r3, [r7, #32]
 8007894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007898:	d037      	beq.n	800790a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800789a:	f7fe fad1 	bl	8005e40 <HAL_GetTick>
 800789e:	4602      	mov	r2, r0
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	1ad3      	subs	r3, r2, r3
 80078a4:	6a3a      	ldr	r2, [r7, #32]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d302      	bcc.n	80078b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80078aa:	6a3b      	ldr	r3, [r7, #32]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d101      	bne.n	80078b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80078b0:	2303      	movs	r3, #3
 80078b2:	e03a      	b.n	800792a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	f003 0304 	and.w	r3, r3, #4
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d023      	beq.n	800790a <UART_WaitOnFlagUntilTimeout+0x8a>
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	2b80      	cmp	r3, #128	@ 0x80
 80078c6:	d020      	beq.n	800790a <UART_WaitOnFlagUntilTimeout+0x8a>
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	2b40      	cmp	r3, #64	@ 0x40
 80078cc:	d01d      	beq.n	800790a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f003 0308 	and.w	r3, r3, #8
 80078d8:	2b08      	cmp	r3, #8
 80078da:	d116      	bne.n	800790a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80078dc:	2300      	movs	r3, #0
 80078de:	617b      	str	r3, [r7, #20]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	617b      	str	r3, [r7, #20]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	617b      	str	r3, [r7, #20]
 80078f0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078f2:	68f8      	ldr	r0, [r7, #12]
 80078f4:	f000 f857 	bl	80079a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2208      	movs	r2, #8
 80078fc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e00f      	b.n	800792a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	4013      	ands	r3, r2
 8007914:	68ba      	ldr	r2, [r7, #8]
 8007916:	429a      	cmp	r2, r3
 8007918:	bf0c      	ite	eq
 800791a:	2301      	moveq	r3, #1
 800791c:	2300      	movne	r3, #0
 800791e:	b2db      	uxtb	r3, r3
 8007920:	461a      	mov	r2, r3
 8007922:	79fb      	ldrb	r3, [r7, #7]
 8007924:	429a      	cmp	r2, r3
 8007926:	d0b4      	beq.n	8007892 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	3718      	adds	r7, #24
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007932:	b480      	push	{r7}
 8007934:	b085      	sub	sp, #20
 8007936:	af00      	add	r7, sp, #0
 8007938:	60f8      	str	r0, [r7, #12]
 800793a:	60b9      	str	r1, [r7, #8]
 800793c:	4613      	mov	r3, r2
 800793e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	68ba      	ldr	r2, [r7, #8]
 8007944:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	88fa      	ldrh	r2, [r7, #6]
 800794a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	88fa      	ldrh	r2, [r7, #6]
 8007950:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2200      	movs	r2, #0
 8007956:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2222      	movs	r2, #34	@ 0x22
 800795c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d007      	beq.n	8007978 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	68da      	ldr	r2, [r3, #12]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007976:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	695a      	ldr	r2, [r3, #20]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f042 0201 	orr.w	r2, r2, #1
 8007986:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	68da      	ldr	r2, [r3, #12]
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f042 0220 	orr.w	r2, r2, #32
 8007996:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	3714      	adds	r7, #20
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr

080079a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80079a6:	b480      	push	{r7}
 80079a8:	b095      	sub	sp, #84	@ 0x54
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	330c      	adds	r3, #12
 80079b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079b8:	e853 3f00 	ldrex	r3, [r3]
 80079bc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80079be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	330c      	adds	r3, #12
 80079cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80079ce:	643a      	str	r2, [r7, #64]	@ 0x40
 80079d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80079d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80079d6:	e841 2300 	strex	r3, r2, [r1]
 80079da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80079dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d1e5      	bne.n	80079ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	3314      	adds	r3, #20
 80079e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ea:	6a3b      	ldr	r3, [r7, #32]
 80079ec:	e853 3f00 	ldrex	r3, [r3]
 80079f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	f023 0301 	bic.w	r3, r3, #1
 80079f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	3314      	adds	r3, #20
 8007a00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007a04:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a0a:	e841 2300 	strex	r3, r2, [r1]
 8007a0e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d1e5      	bne.n	80079e2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d119      	bne.n	8007a52 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	330c      	adds	r3, #12
 8007a24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	e853 3f00 	ldrex	r3, [r3]
 8007a2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	f023 0310 	bic.w	r3, r3, #16
 8007a34:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	330c      	adds	r3, #12
 8007a3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a3e:	61ba      	str	r2, [r7, #24]
 8007a40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a42:	6979      	ldr	r1, [r7, #20]
 8007a44:	69ba      	ldr	r2, [r7, #24]
 8007a46:	e841 2300 	strex	r3, r2, [r1]
 8007a4a:	613b      	str	r3, [r7, #16]
   return(result);
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d1e5      	bne.n	8007a1e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2220      	movs	r2, #32
 8007a56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007a60:	bf00      	nop
 8007a62:	3754      	adds	r7, #84	@ 0x54
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b084      	sub	sp, #16
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2200      	movs	r2, #0
 8007a84:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	f7ff fee4 	bl	8007854 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a8c:	bf00      	nop
 8007a8e:	3710      	adds	r7, #16
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b085      	sub	sp, #20
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	2b21      	cmp	r3, #33	@ 0x21
 8007aa6:	d13e      	bne.n	8007b26 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ab0:	d114      	bne.n	8007adc <UART_Transmit_IT+0x48>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	691b      	ldr	r3, [r3, #16]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d110      	bne.n	8007adc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a1b      	ldr	r3, [r3, #32]
 8007abe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	881b      	ldrh	r3, [r3, #0]
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ace:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6a1b      	ldr	r3, [r3, #32]
 8007ad4:	1c9a      	adds	r2, r3, #2
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	621a      	str	r2, [r3, #32]
 8007ada:	e008      	b.n	8007aee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6a1b      	ldr	r3, [r3, #32]
 8007ae0:	1c59      	adds	r1, r3, #1
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	6211      	str	r1, [r2, #32]
 8007ae6:	781a      	ldrb	r2, [r3, #0]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	3b01      	subs	r3, #1
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	4619      	mov	r1, r3
 8007afc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d10f      	bne.n	8007b22 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	68da      	ldr	r2, [r3, #12]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007b10:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	68da      	ldr	r2, [r3, #12]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b20:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007b22:	2300      	movs	r3, #0
 8007b24:	e000      	b.n	8007b28 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007b26:	2302      	movs	r3, #2
  }
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3714      	adds	r7, #20
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	68da      	ldr	r2, [r3, #12]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b4a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2220      	movs	r2, #32
 8007b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f7ff fe73 	bl	8007840 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007b5a:	2300      	movs	r3, #0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3708      	adds	r7, #8
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b08c      	sub	sp, #48	@ 0x30
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	2b22      	cmp	r3, #34	@ 0x22
 8007b76:	f040 80ae 	bne.w	8007cd6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b82:	d117      	bne.n	8007bb4 <UART_Receive_IT+0x50>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	691b      	ldr	r3, [r3, #16]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d113      	bne.n	8007bb4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b94:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ba2:	b29a      	uxth	r2, r3
 8007ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ba6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bac:	1c9a      	adds	r2, r3, #2
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	629a      	str	r2, [r3, #40]	@ 0x28
 8007bb2:	e026      	b.n	8007c02 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bc6:	d007      	beq.n	8007bd8 <UART_Receive_IT+0x74>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d10a      	bne.n	8007be6 <UART_Receive_IT+0x82>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d106      	bne.n	8007be6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	b2da      	uxtb	r2, r3
 8007be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007be2:	701a      	strb	r2, [r3, #0]
 8007be4:	e008      	b.n	8007bf8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bf2:	b2da      	uxtb	r2, r3
 8007bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bf6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bfc:	1c5a      	adds	r2, r3, #1
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	3b01      	subs	r3, #1
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	4619      	mov	r1, r3
 8007c10:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d15d      	bne.n	8007cd2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	68da      	ldr	r2, [r3, #12]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f022 0220 	bic.w	r2, r2, #32
 8007c24:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	68da      	ldr	r2, [r3, #12]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007c34:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	695a      	ldr	r2, [r3, #20]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f022 0201 	bic.w	r2, r2, #1
 8007c44:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2220      	movs	r2, #32
 8007c4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d135      	bne.n	8007cc8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	330c      	adds	r3, #12
 8007c68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	e853 3f00 	ldrex	r3, [r3]
 8007c70:	613b      	str	r3, [r7, #16]
   return(result);
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	f023 0310 	bic.w	r3, r3, #16
 8007c78:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	330c      	adds	r3, #12
 8007c80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c82:	623a      	str	r2, [r7, #32]
 8007c84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c86:	69f9      	ldr	r1, [r7, #28]
 8007c88:	6a3a      	ldr	r2, [r7, #32]
 8007c8a:	e841 2300 	strex	r3, r2, [r1]
 8007c8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c90:	69bb      	ldr	r3, [r7, #24]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d1e5      	bne.n	8007c62 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f003 0310 	and.w	r3, r3, #16
 8007ca0:	2b10      	cmp	r3, #16
 8007ca2:	d10a      	bne.n	8007cba <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	60fb      	str	r3, [r7, #12]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	60fb      	str	r3, [r7, #12]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	60fb      	str	r3, [r7, #12]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f7ff fdd1 	bl	8007868 <HAL_UARTEx_RxEventCallback>
 8007cc6:	e002      	b.n	8007cce <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f7fb ffe3 	bl	8003c94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	e002      	b.n	8007cd8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	e000      	b.n	8007cd8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007cd6:	2302      	movs	r3, #2
  }
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3730      	adds	r7, #48	@ 0x30
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ce0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ce4:	b0c0      	sub	sp, #256	@ 0x100
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	691b      	ldr	r3, [r3, #16]
 8007cf4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cfc:	68d9      	ldr	r1, [r3, #12]
 8007cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	ea40 0301 	orr.w	r3, r0, r1
 8007d08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d0e:	689a      	ldr	r2, [r3, #8]
 8007d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d14:	691b      	ldr	r3, [r3, #16]
 8007d16:	431a      	orrs	r2, r3
 8007d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d1c:	695b      	ldr	r3, [r3, #20]
 8007d1e:	431a      	orrs	r2, r3
 8007d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d24:	69db      	ldr	r3, [r3, #28]
 8007d26:	4313      	orrs	r3, r2
 8007d28:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007d38:	f021 010c 	bic.w	r1, r1, #12
 8007d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007d46:	430b      	orrs	r3, r1
 8007d48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	695b      	ldr	r3, [r3, #20]
 8007d52:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d5a:	6999      	ldr	r1, [r3, #24]
 8007d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	ea40 0301 	orr.w	r3, r0, r1
 8007d66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	4b8f      	ldr	r3, [pc, #572]	@ (8007fac <UART_SetConfig+0x2cc>)
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d005      	beq.n	8007d80 <UART_SetConfig+0xa0>
 8007d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	4b8d      	ldr	r3, [pc, #564]	@ (8007fb0 <UART_SetConfig+0x2d0>)
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d104      	bne.n	8007d8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007d80:	f7fe fce6 	bl	8006750 <HAL_RCC_GetPCLK2Freq>
 8007d84:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007d88:	e003      	b.n	8007d92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007d8a:	f7fe fccd 	bl	8006728 <HAL_RCC_GetPCLK1Freq>
 8007d8e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d96:	69db      	ldr	r3, [r3, #28]
 8007d98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d9c:	f040 810c 	bne.w	8007fb8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007da0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007da4:	2200      	movs	r2, #0
 8007da6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007daa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007dae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007db2:	4622      	mov	r2, r4
 8007db4:	462b      	mov	r3, r5
 8007db6:	1891      	adds	r1, r2, r2
 8007db8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007dba:	415b      	adcs	r3, r3
 8007dbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007dbe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007dc2:	4621      	mov	r1, r4
 8007dc4:	eb12 0801 	adds.w	r8, r2, r1
 8007dc8:	4629      	mov	r1, r5
 8007dca:	eb43 0901 	adc.w	r9, r3, r1
 8007dce:	f04f 0200 	mov.w	r2, #0
 8007dd2:	f04f 0300 	mov.w	r3, #0
 8007dd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007dda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007dde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007de2:	4690      	mov	r8, r2
 8007de4:	4699      	mov	r9, r3
 8007de6:	4623      	mov	r3, r4
 8007de8:	eb18 0303 	adds.w	r3, r8, r3
 8007dec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007df0:	462b      	mov	r3, r5
 8007df2:	eb49 0303 	adc.w	r3, r9, r3
 8007df6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007e06:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007e0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007e0e:	460b      	mov	r3, r1
 8007e10:	18db      	adds	r3, r3, r3
 8007e12:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e14:	4613      	mov	r3, r2
 8007e16:	eb42 0303 	adc.w	r3, r2, r3
 8007e1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8007e1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007e20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007e24:	f7f8 fa4c 	bl	80002c0 <__aeabi_uldivmod>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	4b61      	ldr	r3, [pc, #388]	@ (8007fb4 <UART_SetConfig+0x2d4>)
 8007e2e:	fba3 2302 	umull	r2, r3, r3, r2
 8007e32:	095b      	lsrs	r3, r3, #5
 8007e34:	011c      	lsls	r4, r3, #4
 8007e36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007e40:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007e44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007e48:	4642      	mov	r2, r8
 8007e4a:	464b      	mov	r3, r9
 8007e4c:	1891      	adds	r1, r2, r2
 8007e4e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007e50:	415b      	adcs	r3, r3
 8007e52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007e58:	4641      	mov	r1, r8
 8007e5a:	eb12 0a01 	adds.w	sl, r2, r1
 8007e5e:	4649      	mov	r1, r9
 8007e60:	eb43 0b01 	adc.w	fp, r3, r1
 8007e64:	f04f 0200 	mov.w	r2, #0
 8007e68:	f04f 0300 	mov.w	r3, #0
 8007e6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007e70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007e74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e78:	4692      	mov	sl, r2
 8007e7a:	469b      	mov	fp, r3
 8007e7c:	4643      	mov	r3, r8
 8007e7e:	eb1a 0303 	adds.w	r3, sl, r3
 8007e82:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007e86:	464b      	mov	r3, r9
 8007e88:	eb4b 0303 	adc.w	r3, fp, r3
 8007e8c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e9c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007ea0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	18db      	adds	r3, r3, r3
 8007ea8:	643b      	str	r3, [r7, #64]	@ 0x40
 8007eaa:	4613      	mov	r3, r2
 8007eac:	eb42 0303 	adc.w	r3, r2, r3
 8007eb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007eb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007eb6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007eba:	f7f8 fa01 	bl	80002c0 <__aeabi_uldivmod>
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	4611      	mov	r1, r2
 8007ec4:	4b3b      	ldr	r3, [pc, #236]	@ (8007fb4 <UART_SetConfig+0x2d4>)
 8007ec6:	fba3 2301 	umull	r2, r3, r3, r1
 8007eca:	095b      	lsrs	r3, r3, #5
 8007ecc:	2264      	movs	r2, #100	@ 0x64
 8007ece:	fb02 f303 	mul.w	r3, r2, r3
 8007ed2:	1acb      	subs	r3, r1, r3
 8007ed4:	00db      	lsls	r3, r3, #3
 8007ed6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007eda:	4b36      	ldr	r3, [pc, #216]	@ (8007fb4 <UART_SetConfig+0x2d4>)
 8007edc:	fba3 2302 	umull	r2, r3, r3, r2
 8007ee0:	095b      	lsrs	r3, r3, #5
 8007ee2:	005b      	lsls	r3, r3, #1
 8007ee4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007ee8:	441c      	add	r4, r3
 8007eea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007ef4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007ef8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007efc:	4642      	mov	r2, r8
 8007efe:	464b      	mov	r3, r9
 8007f00:	1891      	adds	r1, r2, r2
 8007f02:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007f04:	415b      	adcs	r3, r3
 8007f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007f0c:	4641      	mov	r1, r8
 8007f0e:	1851      	adds	r1, r2, r1
 8007f10:	6339      	str	r1, [r7, #48]	@ 0x30
 8007f12:	4649      	mov	r1, r9
 8007f14:	414b      	adcs	r3, r1
 8007f16:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f18:	f04f 0200 	mov.w	r2, #0
 8007f1c:	f04f 0300 	mov.w	r3, #0
 8007f20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007f24:	4659      	mov	r1, fp
 8007f26:	00cb      	lsls	r3, r1, #3
 8007f28:	4651      	mov	r1, sl
 8007f2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f2e:	4651      	mov	r1, sl
 8007f30:	00ca      	lsls	r2, r1, #3
 8007f32:	4610      	mov	r0, r2
 8007f34:	4619      	mov	r1, r3
 8007f36:	4603      	mov	r3, r0
 8007f38:	4642      	mov	r2, r8
 8007f3a:	189b      	adds	r3, r3, r2
 8007f3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007f40:	464b      	mov	r3, r9
 8007f42:	460a      	mov	r2, r1
 8007f44:	eb42 0303 	adc.w	r3, r2, r3
 8007f48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007f58:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007f5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007f60:	460b      	mov	r3, r1
 8007f62:	18db      	adds	r3, r3, r3
 8007f64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007f66:	4613      	mov	r3, r2
 8007f68:	eb42 0303 	adc.w	r3, r2, r3
 8007f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007f72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007f76:	f7f8 f9a3 	bl	80002c0 <__aeabi_uldivmod>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8007fb4 <UART_SetConfig+0x2d4>)
 8007f80:	fba3 1302 	umull	r1, r3, r3, r2
 8007f84:	095b      	lsrs	r3, r3, #5
 8007f86:	2164      	movs	r1, #100	@ 0x64
 8007f88:	fb01 f303 	mul.w	r3, r1, r3
 8007f8c:	1ad3      	subs	r3, r2, r3
 8007f8e:	00db      	lsls	r3, r3, #3
 8007f90:	3332      	adds	r3, #50	@ 0x32
 8007f92:	4a08      	ldr	r2, [pc, #32]	@ (8007fb4 <UART_SetConfig+0x2d4>)
 8007f94:	fba2 2303 	umull	r2, r3, r2, r3
 8007f98:	095b      	lsrs	r3, r3, #5
 8007f9a:	f003 0207 	and.w	r2, r3, #7
 8007f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4422      	add	r2, r4
 8007fa6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007fa8:	e106      	b.n	80081b8 <UART_SetConfig+0x4d8>
 8007faa:	bf00      	nop
 8007fac:	40011000 	.word	0x40011000
 8007fb0:	40011400 	.word	0x40011400
 8007fb4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007fb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007fc2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007fc6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007fca:	4642      	mov	r2, r8
 8007fcc:	464b      	mov	r3, r9
 8007fce:	1891      	adds	r1, r2, r2
 8007fd0:	6239      	str	r1, [r7, #32]
 8007fd2:	415b      	adcs	r3, r3
 8007fd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007fda:	4641      	mov	r1, r8
 8007fdc:	1854      	adds	r4, r2, r1
 8007fde:	4649      	mov	r1, r9
 8007fe0:	eb43 0501 	adc.w	r5, r3, r1
 8007fe4:	f04f 0200 	mov.w	r2, #0
 8007fe8:	f04f 0300 	mov.w	r3, #0
 8007fec:	00eb      	lsls	r3, r5, #3
 8007fee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ff2:	00e2      	lsls	r2, r4, #3
 8007ff4:	4614      	mov	r4, r2
 8007ff6:	461d      	mov	r5, r3
 8007ff8:	4643      	mov	r3, r8
 8007ffa:	18e3      	adds	r3, r4, r3
 8007ffc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008000:	464b      	mov	r3, r9
 8008002:	eb45 0303 	adc.w	r3, r5, r3
 8008006:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800800a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008016:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800801a:	f04f 0200 	mov.w	r2, #0
 800801e:	f04f 0300 	mov.w	r3, #0
 8008022:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008026:	4629      	mov	r1, r5
 8008028:	008b      	lsls	r3, r1, #2
 800802a:	4621      	mov	r1, r4
 800802c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008030:	4621      	mov	r1, r4
 8008032:	008a      	lsls	r2, r1, #2
 8008034:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008038:	f7f8 f942 	bl	80002c0 <__aeabi_uldivmod>
 800803c:	4602      	mov	r2, r0
 800803e:	460b      	mov	r3, r1
 8008040:	4b60      	ldr	r3, [pc, #384]	@ (80081c4 <UART_SetConfig+0x4e4>)
 8008042:	fba3 2302 	umull	r2, r3, r3, r2
 8008046:	095b      	lsrs	r3, r3, #5
 8008048:	011c      	lsls	r4, r3, #4
 800804a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800804e:	2200      	movs	r2, #0
 8008050:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008054:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008058:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800805c:	4642      	mov	r2, r8
 800805e:	464b      	mov	r3, r9
 8008060:	1891      	adds	r1, r2, r2
 8008062:	61b9      	str	r1, [r7, #24]
 8008064:	415b      	adcs	r3, r3
 8008066:	61fb      	str	r3, [r7, #28]
 8008068:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800806c:	4641      	mov	r1, r8
 800806e:	1851      	adds	r1, r2, r1
 8008070:	6139      	str	r1, [r7, #16]
 8008072:	4649      	mov	r1, r9
 8008074:	414b      	adcs	r3, r1
 8008076:	617b      	str	r3, [r7, #20]
 8008078:	f04f 0200 	mov.w	r2, #0
 800807c:	f04f 0300 	mov.w	r3, #0
 8008080:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008084:	4659      	mov	r1, fp
 8008086:	00cb      	lsls	r3, r1, #3
 8008088:	4651      	mov	r1, sl
 800808a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800808e:	4651      	mov	r1, sl
 8008090:	00ca      	lsls	r2, r1, #3
 8008092:	4610      	mov	r0, r2
 8008094:	4619      	mov	r1, r3
 8008096:	4603      	mov	r3, r0
 8008098:	4642      	mov	r2, r8
 800809a:	189b      	adds	r3, r3, r2
 800809c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80080a0:	464b      	mov	r3, r9
 80080a2:	460a      	mov	r2, r1
 80080a4:	eb42 0303 	adc.w	r3, r2, r3
 80080a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80080ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80080b6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80080b8:	f04f 0200 	mov.w	r2, #0
 80080bc:	f04f 0300 	mov.w	r3, #0
 80080c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80080c4:	4649      	mov	r1, r9
 80080c6:	008b      	lsls	r3, r1, #2
 80080c8:	4641      	mov	r1, r8
 80080ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080ce:	4641      	mov	r1, r8
 80080d0:	008a      	lsls	r2, r1, #2
 80080d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80080d6:	f7f8 f8f3 	bl	80002c0 <__aeabi_uldivmod>
 80080da:	4602      	mov	r2, r0
 80080dc:	460b      	mov	r3, r1
 80080de:	4611      	mov	r1, r2
 80080e0:	4b38      	ldr	r3, [pc, #224]	@ (80081c4 <UART_SetConfig+0x4e4>)
 80080e2:	fba3 2301 	umull	r2, r3, r3, r1
 80080e6:	095b      	lsrs	r3, r3, #5
 80080e8:	2264      	movs	r2, #100	@ 0x64
 80080ea:	fb02 f303 	mul.w	r3, r2, r3
 80080ee:	1acb      	subs	r3, r1, r3
 80080f0:	011b      	lsls	r3, r3, #4
 80080f2:	3332      	adds	r3, #50	@ 0x32
 80080f4:	4a33      	ldr	r2, [pc, #204]	@ (80081c4 <UART_SetConfig+0x4e4>)
 80080f6:	fba2 2303 	umull	r2, r3, r2, r3
 80080fa:	095b      	lsrs	r3, r3, #5
 80080fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008100:	441c      	add	r4, r3
 8008102:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008106:	2200      	movs	r2, #0
 8008108:	673b      	str	r3, [r7, #112]	@ 0x70
 800810a:	677a      	str	r2, [r7, #116]	@ 0x74
 800810c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008110:	4642      	mov	r2, r8
 8008112:	464b      	mov	r3, r9
 8008114:	1891      	adds	r1, r2, r2
 8008116:	60b9      	str	r1, [r7, #8]
 8008118:	415b      	adcs	r3, r3
 800811a:	60fb      	str	r3, [r7, #12]
 800811c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008120:	4641      	mov	r1, r8
 8008122:	1851      	adds	r1, r2, r1
 8008124:	6039      	str	r1, [r7, #0]
 8008126:	4649      	mov	r1, r9
 8008128:	414b      	adcs	r3, r1
 800812a:	607b      	str	r3, [r7, #4]
 800812c:	f04f 0200 	mov.w	r2, #0
 8008130:	f04f 0300 	mov.w	r3, #0
 8008134:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008138:	4659      	mov	r1, fp
 800813a:	00cb      	lsls	r3, r1, #3
 800813c:	4651      	mov	r1, sl
 800813e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008142:	4651      	mov	r1, sl
 8008144:	00ca      	lsls	r2, r1, #3
 8008146:	4610      	mov	r0, r2
 8008148:	4619      	mov	r1, r3
 800814a:	4603      	mov	r3, r0
 800814c:	4642      	mov	r2, r8
 800814e:	189b      	adds	r3, r3, r2
 8008150:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008152:	464b      	mov	r3, r9
 8008154:	460a      	mov	r2, r1
 8008156:	eb42 0303 	adc.w	r3, r2, r3
 800815a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800815c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	663b      	str	r3, [r7, #96]	@ 0x60
 8008166:	667a      	str	r2, [r7, #100]	@ 0x64
 8008168:	f04f 0200 	mov.w	r2, #0
 800816c:	f04f 0300 	mov.w	r3, #0
 8008170:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008174:	4649      	mov	r1, r9
 8008176:	008b      	lsls	r3, r1, #2
 8008178:	4641      	mov	r1, r8
 800817a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800817e:	4641      	mov	r1, r8
 8008180:	008a      	lsls	r2, r1, #2
 8008182:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008186:	f7f8 f89b 	bl	80002c0 <__aeabi_uldivmod>
 800818a:	4602      	mov	r2, r0
 800818c:	460b      	mov	r3, r1
 800818e:	4b0d      	ldr	r3, [pc, #52]	@ (80081c4 <UART_SetConfig+0x4e4>)
 8008190:	fba3 1302 	umull	r1, r3, r3, r2
 8008194:	095b      	lsrs	r3, r3, #5
 8008196:	2164      	movs	r1, #100	@ 0x64
 8008198:	fb01 f303 	mul.w	r3, r1, r3
 800819c:	1ad3      	subs	r3, r2, r3
 800819e:	011b      	lsls	r3, r3, #4
 80081a0:	3332      	adds	r3, #50	@ 0x32
 80081a2:	4a08      	ldr	r2, [pc, #32]	@ (80081c4 <UART_SetConfig+0x4e4>)
 80081a4:	fba2 2303 	umull	r2, r3, r2, r3
 80081a8:	095b      	lsrs	r3, r3, #5
 80081aa:	f003 020f 	and.w	r2, r3, #15
 80081ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4422      	add	r2, r4
 80081b6:	609a      	str	r2, [r3, #8]
}
 80081b8:	bf00      	nop
 80081ba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80081be:	46bd      	mov	sp, r7
 80081c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081c4:	51eb851f 	.word	0x51eb851f

080081c8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80081cc:	4904      	ldr	r1, [pc, #16]	@ (80081e0 <MX_FATFS_Init+0x18>)
 80081ce:	4805      	ldr	r0, [pc, #20]	@ (80081e4 <MX_FATFS_Init+0x1c>)
 80081d0:	f000 fd88 	bl	8008ce4 <FATFS_LinkDriver>
 80081d4:	4603      	mov	r3, r0
 80081d6:	461a      	mov	r2, r3
 80081d8:	4b03      	ldr	r3, [pc, #12]	@ (80081e8 <MX_FATFS_Init+0x20>)
 80081da:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80081dc:	bf00      	nop
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	20014190 	.word	0x20014190
 80081e4:	20012e88 	.word	0x20012e88
 80081e8:	2001418c 	.word	0x2001418c

080081ec <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b083      	sub	sp, #12
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	4603      	mov	r3, r0
 80081f4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80081f6:	4b06      	ldr	r3, [pc, #24]	@ (8008210 <USER_initialize+0x24>)
 80081f8:	2201      	movs	r2, #1
 80081fa:	701a      	strb	r2, [r3, #0]
    return Stat;
 80081fc:	4b04      	ldr	r3, [pc, #16]	@ (8008210 <USER_initialize+0x24>)
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8008202:	4618      	mov	r0, r3
 8008204:	370c      	adds	r7, #12
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr
 800820e:	bf00      	nop
 8008210:	20012e85 	.word	0x20012e85

08008214 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008214:	b480      	push	{r7}
 8008216:	b083      	sub	sp, #12
 8008218:	af00      	add	r7, sp, #0
 800821a:	4603      	mov	r3, r0
 800821c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800821e:	4b06      	ldr	r3, [pc, #24]	@ (8008238 <USER_status+0x24>)
 8008220:	2201      	movs	r2, #1
 8008222:	701a      	strb	r2, [r3, #0]
    return Stat;
 8008224:	4b04      	ldr	r3, [pc, #16]	@ (8008238 <USER_status+0x24>)
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800822a:	4618      	mov	r0, r3
 800822c:	370c      	adds	r7, #12
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr
 8008236:	bf00      	nop
 8008238:	20012e85 	.word	0x20012e85

0800823c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800823c:	b480      	push	{r7}
 800823e:	b085      	sub	sp, #20
 8008240:	af00      	add	r7, sp, #0
 8008242:	60b9      	str	r1, [r7, #8]
 8008244:	607a      	str	r2, [r7, #4]
 8008246:	603b      	str	r3, [r7, #0]
 8008248:	4603      	mov	r3, r0
 800824a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800824c:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800824e:	4618      	mov	r0, r3
 8008250:	3714      	adds	r7, #20
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr

0800825a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800825a:	b480      	push	{r7}
 800825c:	b085      	sub	sp, #20
 800825e:	af00      	add	r7, sp, #0
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	607a      	str	r2, [r7, #4]
 8008264:	603b      	str	r3, [r7, #0]
 8008266:	4603      	mov	r3, r0
 8008268:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800826a:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800826c:	4618      	mov	r0, r3
 800826e:	3714      	adds	r7, #20
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr

08008278 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008278:	b480      	push	{r7}
 800827a:	b085      	sub	sp, #20
 800827c:	af00      	add	r7, sp, #0
 800827e:	4603      	mov	r3, r0
 8008280:	603a      	str	r2, [r7, #0]
 8008282:	71fb      	strb	r3, [r7, #7]
 8008284:	460b      	mov	r3, r1
 8008286:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8008288:	2301      	movs	r3, #1
 800828a:	73fb      	strb	r3, [r7, #15]
    return res;
 800828c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800828e:	4618      	mov	r0, r3
 8008290:	3714      	adds	r7, #20
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr
	...

0800829c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	4603      	mov	r3, r0
 80082a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80082a6:	79fb      	ldrb	r3, [r7, #7]
 80082a8:	4a08      	ldr	r2, [pc, #32]	@ (80082cc <disk_status+0x30>)
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	4413      	add	r3, r2
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	79fa      	ldrb	r2, [r7, #7]
 80082b4:	4905      	ldr	r1, [pc, #20]	@ (80082cc <disk_status+0x30>)
 80082b6:	440a      	add	r2, r1
 80082b8:	7a12      	ldrb	r2, [r2, #8]
 80082ba:	4610      	mov	r0, r2
 80082bc:	4798      	blx	r3
 80082be:	4603      	mov	r3, r0
 80082c0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80082c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3710      	adds	r7, #16
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}
 80082cc:	200143bc 	.word	0x200143bc

080082d0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	4603      	mov	r3, r0
 80082d8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80082da:	2300      	movs	r3, #0
 80082dc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80082de:	79fb      	ldrb	r3, [r7, #7]
 80082e0:	4a0e      	ldr	r2, [pc, #56]	@ (800831c <disk_initialize+0x4c>)
 80082e2:	5cd3      	ldrb	r3, [r2, r3]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d114      	bne.n	8008312 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80082e8:	79fb      	ldrb	r3, [r7, #7]
 80082ea:	4a0c      	ldr	r2, [pc, #48]	@ (800831c <disk_initialize+0x4c>)
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	4413      	add	r3, r2
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	79fa      	ldrb	r2, [r7, #7]
 80082f6:	4909      	ldr	r1, [pc, #36]	@ (800831c <disk_initialize+0x4c>)
 80082f8:	440a      	add	r2, r1
 80082fa:	7a12      	ldrb	r2, [r2, #8]
 80082fc:	4610      	mov	r0, r2
 80082fe:	4798      	blx	r3
 8008300:	4603      	mov	r3, r0
 8008302:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8008304:	7bfb      	ldrb	r3, [r7, #15]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d103      	bne.n	8008312 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800830a:	79fb      	ldrb	r3, [r7, #7]
 800830c:	4a03      	ldr	r2, [pc, #12]	@ (800831c <disk_initialize+0x4c>)
 800830e:	2101      	movs	r1, #1
 8008310:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8008312:	7bfb      	ldrb	r3, [r7, #15]
}
 8008314:	4618      	mov	r0, r3
 8008316:	3710      	adds	r7, #16
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}
 800831c:	200143bc 	.word	0x200143bc

08008320 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008320:	b590      	push	{r4, r7, lr}
 8008322:	b087      	sub	sp, #28
 8008324:	af00      	add	r7, sp, #0
 8008326:	60b9      	str	r1, [r7, #8]
 8008328:	607a      	str	r2, [r7, #4]
 800832a:	603b      	str	r3, [r7, #0]
 800832c:	4603      	mov	r3, r0
 800832e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008330:	7bfb      	ldrb	r3, [r7, #15]
 8008332:	4a0a      	ldr	r2, [pc, #40]	@ (800835c <disk_read+0x3c>)
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	4413      	add	r3, r2
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	689c      	ldr	r4, [r3, #8]
 800833c:	7bfb      	ldrb	r3, [r7, #15]
 800833e:	4a07      	ldr	r2, [pc, #28]	@ (800835c <disk_read+0x3c>)
 8008340:	4413      	add	r3, r2
 8008342:	7a18      	ldrb	r0, [r3, #8]
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	68b9      	ldr	r1, [r7, #8]
 800834a:	47a0      	blx	r4
 800834c:	4603      	mov	r3, r0
 800834e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008350:	7dfb      	ldrb	r3, [r7, #23]
}
 8008352:	4618      	mov	r0, r3
 8008354:	371c      	adds	r7, #28
 8008356:	46bd      	mov	sp, r7
 8008358:	bd90      	pop	{r4, r7, pc}
 800835a:	bf00      	nop
 800835c:	200143bc 	.word	0x200143bc

08008360 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008360:	b590      	push	{r4, r7, lr}
 8008362:	b087      	sub	sp, #28
 8008364:	af00      	add	r7, sp, #0
 8008366:	60b9      	str	r1, [r7, #8]
 8008368:	607a      	str	r2, [r7, #4]
 800836a:	603b      	str	r3, [r7, #0]
 800836c:	4603      	mov	r3, r0
 800836e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008370:	7bfb      	ldrb	r3, [r7, #15]
 8008372:	4a0a      	ldr	r2, [pc, #40]	@ (800839c <disk_write+0x3c>)
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	4413      	add	r3, r2
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	68dc      	ldr	r4, [r3, #12]
 800837c:	7bfb      	ldrb	r3, [r7, #15]
 800837e:	4a07      	ldr	r2, [pc, #28]	@ (800839c <disk_write+0x3c>)
 8008380:	4413      	add	r3, r2
 8008382:	7a18      	ldrb	r0, [r3, #8]
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	68b9      	ldr	r1, [r7, #8]
 800838a:	47a0      	blx	r4
 800838c:	4603      	mov	r3, r0
 800838e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008390:	7dfb      	ldrb	r3, [r7, #23]
}
 8008392:	4618      	mov	r0, r3
 8008394:	371c      	adds	r7, #28
 8008396:	46bd      	mov	sp, r7
 8008398:	bd90      	pop	{r4, r7, pc}
 800839a:	bf00      	nop
 800839c:	200143bc 	.word	0x200143bc

080083a0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b084      	sub	sp, #16
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	4603      	mov	r3, r0
 80083a8:	603a      	str	r2, [r7, #0]
 80083aa:	71fb      	strb	r3, [r7, #7]
 80083ac:	460b      	mov	r3, r1
 80083ae:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80083b0:	79fb      	ldrb	r3, [r7, #7]
 80083b2:	4a09      	ldr	r2, [pc, #36]	@ (80083d8 <disk_ioctl+0x38>)
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	4413      	add	r3, r2
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	691b      	ldr	r3, [r3, #16]
 80083bc:	79fa      	ldrb	r2, [r7, #7]
 80083be:	4906      	ldr	r1, [pc, #24]	@ (80083d8 <disk_ioctl+0x38>)
 80083c0:	440a      	add	r2, r1
 80083c2:	7a10      	ldrb	r0, [r2, #8]
 80083c4:	79b9      	ldrb	r1, [r7, #6]
 80083c6:	683a      	ldr	r2, [r7, #0]
 80083c8:	4798      	blx	r3
 80083ca:	4603      	mov	r3, r0
 80083cc:	73fb      	strb	r3, [r7, #15]
  return res;
 80083ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3710      	adds	r7, #16
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}
 80083d8:	200143bc 	.word	0x200143bc

080083dc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80083dc:	b480      	push	{r7}
 80083de:	b085      	sub	sp, #20
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	3301      	adds	r3, #1
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80083ec:	89fb      	ldrh	r3, [r7, #14]
 80083ee:	021b      	lsls	r3, r3, #8
 80083f0:	b21a      	sxth	r2, r3
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	b21b      	sxth	r3, r3
 80083f8:	4313      	orrs	r3, r2
 80083fa:	b21b      	sxth	r3, r3
 80083fc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80083fe:	89fb      	ldrh	r3, [r7, #14]
}
 8008400:	4618      	mov	r0, r3
 8008402:	3714      	adds	r7, #20
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800840c:	b480      	push	{r7}
 800840e:	b085      	sub	sp, #20
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	3303      	adds	r3, #3
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	021b      	lsls	r3, r3, #8
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	3202      	adds	r2, #2
 8008424:	7812      	ldrb	r2, [r2, #0]
 8008426:	4313      	orrs	r3, r2
 8008428:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	021b      	lsls	r3, r3, #8
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	3201      	adds	r2, #1
 8008432:	7812      	ldrb	r2, [r2, #0]
 8008434:	4313      	orrs	r3, r2
 8008436:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	021b      	lsls	r3, r3, #8
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	7812      	ldrb	r2, [r2, #0]
 8008440:	4313      	orrs	r3, r2
 8008442:	60fb      	str	r3, [r7, #12]
	return rv;
 8008444:	68fb      	ldr	r3, [r7, #12]
}
 8008446:	4618      	mov	r0, r3
 8008448:	3714      	adds	r7, #20
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr
	...

08008454 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008454:	b480      	push	{r7}
 8008456:	b085      	sub	sp, #20
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800845c:	2300      	movs	r3, #0
 800845e:	60fb      	str	r3, [r7, #12]
 8008460:	e010      	b.n	8008484 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008462:	4a0d      	ldr	r2, [pc, #52]	@ (8008498 <clear_lock+0x44>)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	011b      	lsls	r3, r3, #4
 8008468:	4413      	add	r3, r2
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	429a      	cmp	r2, r3
 8008470:	d105      	bne.n	800847e <clear_lock+0x2a>
 8008472:	4a09      	ldr	r2, [pc, #36]	@ (8008498 <clear_lock+0x44>)
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	011b      	lsls	r3, r3, #4
 8008478:	4413      	add	r3, r2
 800847a:	2200      	movs	r2, #0
 800847c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	3301      	adds	r3, #1
 8008482:	60fb      	str	r3, [r7, #12]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2b01      	cmp	r3, #1
 8008488:	d9eb      	bls.n	8008462 <clear_lock+0xe>
	}
}
 800848a:	bf00      	nop
 800848c:	bf00      	nop
 800848e:	3714      	adds	r7, #20
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr
 8008498:	2001419c 	.word	0x2001419c

0800849c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b086      	sub	sp, #24
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80084a4:	2300      	movs	r3, #0
 80084a6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	78db      	ldrb	r3, [r3, #3]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d034      	beq.n	800851a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084b4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	7858      	ldrb	r0, [r3, #1]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80084c0:	2301      	movs	r3, #1
 80084c2:	697a      	ldr	r2, [r7, #20]
 80084c4:	f7ff ff4c 	bl	8008360 <disk_write>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d002      	beq.n	80084d4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	73fb      	strb	r3, [r7, #15]
 80084d2:	e022      	b.n	800851a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2200      	movs	r2, #0
 80084d8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084de:	697a      	ldr	r2, [r7, #20]
 80084e0:	1ad2      	subs	r2, r2, r3
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6a1b      	ldr	r3, [r3, #32]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d217      	bcs.n	800851a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	789b      	ldrb	r3, [r3, #2]
 80084ee:	613b      	str	r3, [r7, #16]
 80084f0:	e010      	b.n	8008514 <sync_window+0x78>
					wsect += fs->fsize;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6a1b      	ldr	r3, [r3, #32]
 80084f6:	697a      	ldr	r2, [r7, #20]
 80084f8:	4413      	add	r3, r2
 80084fa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	7858      	ldrb	r0, [r3, #1]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008506:	2301      	movs	r3, #1
 8008508:	697a      	ldr	r2, [r7, #20]
 800850a:	f7ff ff29 	bl	8008360 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	3b01      	subs	r3, #1
 8008512:	613b      	str	r3, [r7, #16]
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	2b01      	cmp	r3, #1
 8008518:	d8eb      	bhi.n	80084f2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800851a:	7bfb      	ldrb	r3, [r7, #15]
}
 800851c:	4618      	mov	r0, r3
 800851e:	3718      	adds	r7, #24
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800852e:	2300      	movs	r3, #0
 8008530:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008536:	683a      	ldr	r2, [r7, #0]
 8008538:	429a      	cmp	r2, r3
 800853a:	d01b      	beq.n	8008574 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f7ff ffad 	bl	800849c <sync_window>
 8008542:	4603      	mov	r3, r0
 8008544:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008546:	7bfb      	ldrb	r3, [r7, #15]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d113      	bne.n	8008574 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	7858      	ldrb	r0, [r3, #1]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008556:	2301      	movs	r3, #1
 8008558:	683a      	ldr	r2, [r7, #0]
 800855a:	f7ff fee1 	bl	8008320 <disk_read>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d004      	beq.n	800856e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008564:	f04f 33ff 	mov.w	r3, #4294967295
 8008568:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800856a:	2301      	movs	r3, #1
 800856c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	683a      	ldr	r2, [r7, #0]
 8008572:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8008574:	7bfb      	ldrb	r3, [r7, #15]
}
 8008576:	4618      	mov	r0, r3
 8008578:	3710      	adds	r7, #16
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}

0800857e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800857e:	b480      	push	{r7}
 8008580:	b087      	sub	sp, #28
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008586:	f04f 33ff 	mov.w	r3, #4294967295
 800858a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d031      	beq.n	80085f8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	617b      	str	r3, [r7, #20]
 800859a:	e002      	b.n	80085a2 <get_ldnumber+0x24>
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	3301      	adds	r3, #1
 80085a0:	617b      	str	r3, [r7, #20]
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	2b1f      	cmp	r3, #31
 80085a8:	d903      	bls.n	80085b2 <get_ldnumber+0x34>
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	2b3a      	cmp	r3, #58	@ 0x3a
 80085b0:	d1f4      	bne.n	800859c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	2b3a      	cmp	r3, #58	@ 0x3a
 80085b8:	d11c      	bne.n	80085f4 <get_ldnumber+0x76>
			tp = *path;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	1c5a      	adds	r2, r3, #1
 80085c4:	60fa      	str	r2, [r7, #12]
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	3b30      	subs	r3, #48	@ 0x30
 80085ca:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	2b09      	cmp	r3, #9
 80085d0:	d80e      	bhi.n	80085f0 <get_ldnumber+0x72>
 80085d2:	68fa      	ldr	r2, [r7, #12]
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d10a      	bne.n	80085f0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d107      	bne.n	80085f0 <get_ldnumber+0x72>
					vol = (int)i;
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	3301      	adds	r3, #1
 80085e8:	617b      	str	r3, [r7, #20]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	697a      	ldr	r2, [r7, #20]
 80085ee:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	e002      	b.n	80085fa <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80085f4:	2300      	movs	r3, #0
 80085f6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80085f8:	693b      	ldr	r3, [r7, #16]
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	371c      	adds	r7, #28
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr
	...

08008608 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	70da      	strb	r2, [r3, #3]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f04f 32ff 	mov.w	r2, #4294967295
 800861e:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008620:	6839      	ldr	r1, [r7, #0]
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f7ff ff7e 	bl	8008524 <move_window>
 8008628:	4603      	mov	r3, r0
 800862a:	2b00      	cmp	r3, #0
 800862c:	d001      	beq.n	8008632 <check_fs+0x2a>
 800862e:	2304      	movs	r3, #4
 8008630:	e038      	b.n	80086a4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	3338      	adds	r3, #56	@ 0x38
 8008636:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800863a:	4618      	mov	r0, r3
 800863c:	f7ff fece 	bl	80083dc <ld_word>
 8008640:	4603      	mov	r3, r0
 8008642:	461a      	mov	r2, r3
 8008644:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008648:	429a      	cmp	r2, r3
 800864a:	d001      	beq.n	8008650 <check_fs+0x48>
 800864c:	2303      	movs	r3, #3
 800864e:	e029      	b.n	80086a4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008656:	2be9      	cmp	r3, #233	@ 0xe9
 8008658:	d009      	beq.n	800866e <check_fs+0x66>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008660:	2beb      	cmp	r3, #235	@ 0xeb
 8008662:	d11e      	bne.n	80086a2 <check_fs+0x9a>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800866a:	2b90      	cmp	r3, #144	@ 0x90
 800866c:	d119      	bne.n	80086a2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	3338      	adds	r3, #56	@ 0x38
 8008672:	3336      	adds	r3, #54	@ 0x36
 8008674:	4618      	mov	r0, r3
 8008676:	f7ff fec9 	bl	800840c <ld_dword>
 800867a:	4603      	mov	r3, r0
 800867c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008680:	4a0a      	ldr	r2, [pc, #40]	@ (80086ac <check_fs+0xa4>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d101      	bne.n	800868a <check_fs+0x82>
 8008686:	2300      	movs	r3, #0
 8008688:	e00c      	b.n	80086a4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	3338      	adds	r3, #56	@ 0x38
 800868e:	3352      	adds	r3, #82	@ 0x52
 8008690:	4618      	mov	r0, r3
 8008692:	f7ff febb 	bl	800840c <ld_dword>
 8008696:	4603      	mov	r3, r0
 8008698:	4a05      	ldr	r2, [pc, #20]	@ (80086b0 <check_fs+0xa8>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d101      	bne.n	80086a2 <check_fs+0x9a>
 800869e:	2300      	movs	r3, #0
 80086a0:	e000      	b.n	80086a4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80086a2:	2302      	movs	r3, #2
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3708      	adds	r7, #8
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	00544146 	.word	0x00544146
 80086b0:	33544146 	.word	0x33544146

080086b4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b096      	sub	sp, #88	@ 0x58
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	60b9      	str	r1, [r7, #8]
 80086be:	4613      	mov	r3, r2
 80086c0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	2200      	movs	r2, #0
 80086c6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80086c8:	68f8      	ldr	r0, [r7, #12]
 80086ca:	f7ff ff58 	bl	800857e <get_ldnumber>
 80086ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80086d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	da01      	bge.n	80086da <find_volume+0x26>
 80086d6:	230b      	movs	r3, #11
 80086d8:	e265      	b.n	8008ba6 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80086da:	4a9f      	ldr	r2, [pc, #636]	@ (8008958 <find_volume+0x2a4>)
 80086dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086e2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80086e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d101      	bne.n	80086ee <find_volume+0x3a>
 80086ea:	230c      	movs	r3, #12
 80086ec:	e25b      	b.n	8008ba6 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80086f2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80086f4:	79fb      	ldrb	r3, [r7, #7]
 80086f6:	f023 0301 	bic.w	r3, r3, #1
 80086fa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80086fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d01a      	beq.n	800873a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008706:	785b      	ldrb	r3, [r3, #1]
 8008708:	4618      	mov	r0, r3
 800870a:	f7ff fdc7 	bl	800829c <disk_status>
 800870e:	4603      	mov	r3, r0
 8008710:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008714:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008718:	f003 0301 	and.w	r3, r3, #1
 800871c:	2b00      	cmp	r3, #0
 800871e:	d10c      	bne.n	800873a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008720:	79fb      	ldrb	r3, [r7, #7]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d007      	beq.n	8008736 <find_volume+0x82>
 8008726:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800872a:	f003 0304 	and.w	r3, r3, #4
 800872e:	2b00      	cmp	r3, #0
 8008730:	d001      	beq.n	8008736 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008732:	230a      	movs	r3, #10
 8008734:	e237      	b.n	8008ba6 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8008736:	2300      	movs	r3, #0
 8008738:	e235      	b.n	8008ba6 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800873a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800873c:	2200      	movs	r2, #0
 800873e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008740:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008742:	b2da      	uxtb	r2, r3
 8008744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008746:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800874a:	785b      	ldrb	r3, [r3, #1]
 800874c:	4618      	mov	r0, r3
 800874e:	f7ff fdbf 	bl	80082d0 <disk_initialize>
 8008752:	4603      	mov	r3, r0
 8008754:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008758:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800875c:	f003 0301 	and.w	r3, r3, #1
 8008760:	2b00      	cmp	r3, #0
 8008762:	d001      	beq.n	8008768 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008764:	2303      	movs	r3, #3
 8008766:	e21e      	b.n	8008ba6 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008768:	79fb      	ldrb	r3, [r7, #7]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d007      	beq.n	800877e <find_volume+0xca>
 800876e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008772:	f003 0304 	and.w	r3, r3, #4
 8008776:	2b00      	cmp	r3, #0
 8008778:	d001      	beq.n	800877e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800877a:	230a      	movs	r3, #10
 800877c:	e213      	b.n	8008ba6 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800877e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008780:	7858      	ldrb	r0, [r3, #1]
 8008782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008784:	330c      	adds	r3, #12
 8008786:	461a      	mov	r2, r3
 8008788:	2102      	movs	r1, #2
 800878a:	f7ff fe09 	bl	80083a0 <disk_ioctl>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d001      	beq.n	8008798 <find_volume+0xe4>
 8008794:	2301      	movs	r3, #1
 8008796:	e206      	b.n	8008ba6 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800879a:	899b      	ldrh	r3, [r3, #12]
 800879c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087a0:	d80d      	bhi.n	80087be <find_volume+0x10a>
 80087a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087a4:	899b      	ldrh	r3, [r3, #12]
 80087a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087aa:	d308      	bcc.n	80087be <find_volume+0x10a>
 80087ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ae:	899b      	ldrh	r3, [r3, #12]
 80087b0:	461a      	mov	r2, r3
 80087b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087b4:	899b      	ldrh	r3, [r3, #12]
 80087b6:	3b01      	subs	r3, #1
 80087b8:	4013      	ands	r3, r2
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d001      	beq.n	80087c2 <find_volume+0x10e>
 80087be:	2301      	movs	r3, #1
 80087c0:	e1f1      	b.n	8008ba6 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80087c2:	2300      	movs	r3, #0
 80087c4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80087c6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80087c8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80087ca:	f7ff ff1d 	bl	8008608 <check_fs>
 80087ce:	4603      	mov	r3, r0
 80087d0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80087d4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80087d8:	2b02      	cmp	r3, #2
 80087da:	d149      	bne.n	8008870 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80087dc:	2300      	movs	r3, #0
 80087de:	643b      	str	r3, [r7, #64]	@ 0x40
 80087e0:	e01e      	b.n	8008820 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80087e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087e4:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80087e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087ea:	011b      	lsls	r3, r3, #4
 80087ec:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80087f0:	4413      	add	r3, r2
 80087f2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80087f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f6:	3304      	adds	r3, #4
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d006      	beq.n	800880c <find_volume+0x158>
 80087fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008800:	3308      	adds	r3, #8
 8008802:	4618      	mov	r0, r3
 8008804:	f7ff fe02 	bl	800840c <ld_dword>
 8008808:	4602      	mov	r2, r0
 800880a:	e000      	b.n	800880e <find_volume+0x15a>
 800880c:	2200      	movs	r2, #0
 800880e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008810:	009b      	lsls	r3, r3, #2
 8008812:	3358      	adds	r3, #88	@ 0x58
 8008814:	443b      	add	r3, r7
 8008816:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800881a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800881c:	3301      	adds	r3, #1
 800881e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008820:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008822:	2b03      	cmp	r3, #3
 8008824:	d9dd      	bls.n	80087e2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008826:	2300      	movs	r3, #0
 8008828:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800882a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800882c:	2b00      	cmp	r3, #0
 800882e:	d002      	beq.n	8008836 <find_volume+0x182>
 8008830:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008832:	3b01      	subs	r3, #1
 8008834:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008836:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	3358      	adds	r3, #88	@ 0x58
 800883c:	443b      	add	r3, r7
 800883e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008842:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008844:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008846:	2b00      	cmp	r3, #0
 8008848:	d005      	beq.n	8008856 <find_volume+0x1a2>
 800884a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800884c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800884e:	f7ff fedb 	bl	8008608 <check_fs>
 8008852:	4603      	mov	r3, r0
 8008854:	e000      	b.n	8008858 <find_volume+0x1a4>
 8008856:	2303      	movs	r3, #3
 8008858:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800885c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008860:	2b01      	cmp	r3, #1
 8008862:	d905      	bls.n	8008870 <find_volume+0x1bc>
 8008864:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008866:	3301      	adds	r3, #1
 8008868:	643b      	str	r3, [r7, #64]	@ 0x40
 800886a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800886c:	2b03      	cmp	r3, #3
 800886e:	d9e2      	bls.n	8008836 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008870:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008874:	2b04      	cmp	r3, #4
 8008876:	d101      	bne.n	800887c <find_volume+0x1c8>
 8008878:	2301      	movs	r3, #1
 800887a:	e194      	b.n	8008ba6 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800887c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008880:	2b01      	cmp	r3, #1
 8008882:	d901      	bls.n	8008888 <find_volume+0x1d4>
 8008884:	230d      	movs	r3, #13
 8008886:	e18e      	b.n	8008ba6 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800888a:	3338      	adds	r3, #56	@ 0x38
 800888c:	330b      	adds	r3, #11
 800888e:	4618      	mov	r0, r3
 8008890:	f7ff fda4 	bl	80083dc <ld_word>
 8008894:	4603      	mov	r3, r0
 8008896:	461a      	mov	r2, r3
 8008898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800889a:	899b      	ldrh	r3, [r3, #12]
 800889c:	429a      	cmp	r2, r3
 800889e:	d001      	beq.n	80088a4 <find_volume+0x1f0>
 80088a0:	230d      	movs	r3, #13
 80088a2:	e180      	b.n	8008ba6 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80088a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088a6:	3338      	adds	r3, #56	@ 0x38
 80088a8:	3316      	adds	r3, #22
 80088aa:	4618      	mov	r0, r3
 80088ac:	f7ff fd96 	bl	80083dc <ld_word>
 80088b0:	4603      	mov	r3, r0
 80088b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80088b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d106      	bne.n	80088c8 <find_volume+0x214>
 80088ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088bc:	3338      	adds	r3, #56	@ 0x38
 80088be:	3324      	adds	r3, #36	@ 0x24
 80088c0:	4618      	mov	r0, r3
 80088c2:	f7ff fda3 	bl	800840c <ld_dword>
 80088c6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80088c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80088cc:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80088ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088d0:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80088d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088d6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80088d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088da:	789b      	ldrb	r3, [r3, #2]
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d005      	beq.n	80088ec <find_volume+0x238>
 80088e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088e2:	789b      	ldrb	r3, [r3, #2]
 80088e4:	2b02      	cmp	r3, #2
 80088e6:	d001      	beq.n	80088ec <find_volume+0x238>
 80088e8:	230d      	movs	r3, #13
 80088ea:	e15c      	b.n	8008ba6 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80088ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ee:	789b      	ldrb	r3, [r3, #2]
 80088f0:	461a      	mov	r2, r3
 80088f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088f4:	fb02 f303 	mul.w	r3, r2, r3
 80088f8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80088fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008900:	461a      	mov	r2, r3
 8008902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008904:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008908:	895b      	ldrh	r3, [r3, #10]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d008      	beq.n	8008920 <find_volume+0x26c>
 800890e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008910:	895b      	ldrh	r3, [r3, #10]
 8008912:	461a      	mov	r2, r3
 8008914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008916:	895b      	ldrh	r3, [r3, #10]
 8008918:	3b01      	subs	r3, #1
 800891a:	4013      	ands	r3, r2
 800891c:	2b00      	cmp	r3, #0
 800891e:	d001      	beq.n	8008924 <find_volume+0x270>
 8008920:	230d      	movs	r3, #13
 8008922:	e140      	b.n	8008ba6 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008926:	3338      	adds	r3, #56	@ 0x38
 8008928:	3311      	adds	r3, #17
 800892a:	4618      	mov	r0, r3
 800892c:	f7ff fd56 	bl	80083dc <ld_word>
 8008930:	4603      	mov	r3, r0
 8008932:	461a      	mov	r2, r3
 8008934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008936:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800893a:	891b      	ldrh	r3, [r3, #8]
 800893c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800893e:	8992      	ldrh	r2, [r2, #12]
 8008940:	0952      	lsrs	r2, r2, #5
 8008942:	b292      	uxth	r2, r2
 8008944:	fbb3 f1f2 	udiv	r1, r3, r2
 8008948:	fb01 f202 	mul.w	r2, r1, r2
 800894c:	1a9b      	subs	r3, r3, r2
 800894e:	b29b      	uxth	r3, r3
 8008950:	2b00      	cmp	r3, #0
 8008952:	d003      	beq.n	800895c <find_volume+0x2a8>
 8008954:	230d      	movs	r3, #13
 8008956:	e126      	b.n	8008ba6 <find_volume+0x4f2>
 8008958:	20014194 	.word	0x20014194

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800895c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800895e:	3338      	adds	r3, #56	@ 0x38
 8008960:	3313      	adds	r3, #19
 8008962:	4618      	mov	r0, r3
 8008964:	f7ff fd3a 	bl	80083dc <ld_word>
 8008968:	4603      	mov	r3, r0
 800896a:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800896c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800896e:	2b00      	cmp	r3, #0
 8008970:	d106      	bne.n	8008980 <find_volume+0x2cc>
 8008972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008974:	3338      	adds	r3, #56	@ 0x38
 8008976:	3320      	adds	r3, #32
 8008978:	4618      	mov	r0, r3
 800897a:	f7ff fd47 	bl	800840c <ld_dword>
 800897e:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008982:	3338      	adds	r3, #56	@ 0x38
 8008984:	330e      	adds	r3, #14
 8008986:	4618      	mov	r0, r3
 8008988:	f7ff fd28 	bl	80083dc <ld_word>
 800898c:	4603      	mov	r3, r0
 800898e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008990:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008992:	2b00      	cmp	r3, #0
 8008994:	d101      	bne.n	800899a <find_volume+0x2e6>
 8008996:	230d      	movs	r3, #13
 8008998:	e105      	b.n	8008ba6 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800899a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800899c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800899e:	4413      	add	r3, r2
 80089a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80089a2:	8911      	ldrh	r1, [r2, #8]
 80089a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80089a6:	8992      	ldrh	r2, [r2, #12]
 80089a8:	0952      	lsrs	r2, r2, #5
 80089aa:	b292      	uxth	r2, r2
 80089ac:	fbb1 f2f2 	udiv	r2, r1, r2
 80089b0:	b292      	uxth	r2, r2
 80089b2:	4413      	add	r3, r2
 80089b4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80089b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80089b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d201      	bcs.n	80089c2 <find_volume+0x30e>
 80089be:	230d      	movs	r3, #13
 80089c0:	e0f1      	b.n	8008ba6 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80089c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80089c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089c6:	1ad3      	subs	r3, r2, r3
 80089c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80089ca:	8952      	ldrh	r2, [r2, #10]
 80089cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80089d0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80089d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d101      	bne.n	80089dc <find_volume+0x328>
 80089d8:	230d      	movs	r3, #13
 80089da:	e0e4      	b.n	8008ba6 <find_volume+0x4f2>
		fmt = FS_FAT32;
 80089dc:	2303      	movs	r3, #3
 80089de:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80089e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e4:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d802      	bhi.n	80089f2 <find_volume+0x33e>
 80089ec:	2302      	movs	r3, #2
 80089ee:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80089f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089f4:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d802      	bhi.n	8008a02 <find_volume+0x34e>
 80089fc:	2301      	movs	r3, #1
 80089fe:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a04:	1c9a      	adds	r2, r3, #2
 8008a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a08:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8008a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a0c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008a0e:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008a10:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008a12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a14:	441a      	add	r2, r3
 8008a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a18:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8008a1a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a1e:	441a      	add	r2, r3
 8008a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a22:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8008a24:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008a28:	2b03      	cmp	r3, #3
 8008a2a:	d11e      	bne.n	8008a6a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a2e:	3338      	adds	r3, #56	@ 0x38
 8008a30:	332a      	adds	r3, #42	@ 0x2a
 8008a32:	4618      	mov	r0, r3
 8008a34:	f7ff fcd2 	bl	80083dc <ld_word>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d001      	beq.n	8008a42 <find_volume+0x38e>
 8008a3e:	230d      	movs	r3, #13
 8008a40:	e0b1      	b.n	8008ba6 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a44:	891b      	ldrh	r3, [r3, #8]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d001      	beq.n	8008a4e <find_volume+0x39a>
 8008a4a:	230d      	movs	r3, #13
 8008a4c:	e0ab      	b.n	8008ba6 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a50:	3338      	adds	r3, #56	@ 0x38
 8008a52:	332c      	adds	r3, #44	@ 0x2c
 8008a54:	4618      	mov	r0, r3
 8008a56:	f7ff fcd9 	bl	800840c <ld_dword>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a5e:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008a60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a62:	69db      	ldr	r3, [r3, #28]
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a68:	e01f      	b.n	8008aaa <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a6c:	891b      	ldrh	r3, [r3, #8]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d101      	bne.n	8008a76 <find_volume+0x3c2>
 8008a72:	230d      	movs	r3, #13
 8008a74:	e097      	b.n	8008ba6 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a78:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008a7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a7c:	441a      	add	r2, r3
 8008a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a80:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008a82:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008a86:	2b02      	cmp	r3, #2
 8008a88:	d103      	bne.n	8008a92 <find_volume+0x3de>
 8008a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a8c:	69db      	ldr	r3, [r3, #28]
 8008a8e:	005b      	lsls	r3, r3, #1
 8008a90:	e00a      	b.n	8008aa8 <find_volume+0x3f4>
 8008a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a94:	69da      	ldr	r2, [r3, #28]
 8008a96:	4613      	mov	r3, r2
 8008a98:	005b      	lsls	r3, r3, #1
 8008a9a:	4413      	add	r3, r2
 8008a9c:	085a      	lsrs	r2, r3, #1
 8008a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aa0:	69db      	ldr	r3, [r3, #28]
 8008aa2:	f003 0301 	and.w	r3, r3, #1
 8008aa6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008aa8:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aac:	6a1a      	ldr	r2, [r3, #32]
 8008aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ab0:	899b      	ldrh	r3, [r3, #12]
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ab6:	440b      	add	r3, r1
 8008ab8:	3b01      	subs	r3, #1
 8008aba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008abc:	8989      	ldrh	r1, [r1, #12]
 8008abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d201      	bcs.n	8008aca <find_volume+0x416>
 8008ac6:	230d      	movs	r3, #13
 8008ac8:	e06d      	b.n	8008ba6 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008acc:	f04f 32ff 	mov.w	r2, #4294967295
 8008ad0:	619a      	str	r2, [r3, #24]
 8008ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ad4:	699a      	ldr	r2, [r3, #24]
 8008ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ad8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8008ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008adc:	2280      	movs	r2, #128	@ 0x80
 8008ade:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008ae0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008ae4:	2b03      	cmp	r3, #3
 8008ae6:	d149      	bne.n	8008b7c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aea:	3338      	adds	r3, #56	@ 0x38
 8008aec:	3330      	adds	r3, #48	@ 0x30
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7ff fc74 	bl	80083dc <ld_word>
 8008af4:	4603      	mov	r3, r0
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d140      	bne.n	8008b7c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008afa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008afc:	3301      	adds	r3, #1
 8008afe:	4619      	mov	r1, r3
 8008b00:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008b02:	f7ff fd0f 	bl	8008524 <move_window>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d137      	bne.n	8008b7c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8008b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b0e:	2200      	movs	r2, #0
 8008b10:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b14:	3338      	adds	r3, #56	@ 0x38
 8008b16:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f7ff fc5e 	bl	80083dc <ld_word>
 8008b20:	4603      	mov	r3, r0
 8008b22:	461a      	mov	r2, r3
 8008b24:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d127      	bne.n	8008b7c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b2e:	3338      	adds	r3, #56	@ 0x38
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7ff fc6b 	bl	800840c <ld_dword>
 8008b36:	4603      	mov	r3, r0
 8008b38:	4a1d      	ldr	r2, [pc, #116]	@ (8008bb0 <find_volume+0x4fc>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d11e      	bne.n	8008b7c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b40:	3338      	adds	r3, #56	@ 0x38
 8008b42:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008b46:	4618      	mov	r0, r3
 8008b48:	f7ff fc60 	bl	800840c <ld_dword>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	4a19      	ldr	r2, [pc, #100]	@ (8008bb4 <find_volume+0x500>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d113      	bne.n	8008b7c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b56:	3338      	adds	r3, #56	@ 0x38
 8008b58:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f7ff fc55 	bl	800840c <ld_dword>
 8008b62:	4602      	mov	r2, r0
 8008b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b66:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b6a:	3338      	adds	r3, #56	@ 0x38
 8008b6c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8008b70:	4618      	mov	r0, r3
 8008b72:	f7ff fc4b 	bl	800840c <ld_dword>
 8008b76:	4602      	mov	r2, r0
 8008b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b7a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b7e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8008b82:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008b84:	4b0c      	ldr	r3, [pc, #48]	@ (8008bb8 <find_volume+0x504>)
 8008b86:	881b      	ldrh	r3, [r3, #0]
 8008b88:	3301      	adds	r3, #1
 8008b8a:	b29a      	uxth	r2, r3
 8008b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8008bb8 <find_volume+0x504>)
 8008b8e:	801a      	strh	r2, [r3, #0]
 8008b90:	4b09      	ldr	r3, [pc, #36]	@ (8008bb8 <find_volume+0x504>)
 8008b92:	881a      	ldrh	r2, [r3, #0]
 8008b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b96:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8008b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b9a:	4a08      	ldr	r2, [pc, #32]	@ (8008bbc <find_volume+0x508>)
 8008b9c:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008b9e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008ba0:	f7ff fc58 	bl	8008454 <clear_lock>
#endif
	return FR_OK;
 8008ba4:	2300      	movs	r3, #0
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3758      	adds	r7, #88	@ 0x58
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	41615252 	.word	0x41615252
 8008bb4:	61417272 	.word	0x61417272
 8008bb8:	20014198 	.word	0x20014198
 8008bbc:	200141bc 	.word	0x200141bc

08008bc0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b088      	sub	sp, #32
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	60f8      	str	r0, [r7, #12]
 8008bc8:	60b9      	str	r1, [r7, #8]
 8008bca:	4613      	mov	r3, r2
 8008bcc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008bd2:	f107 0310 	add.w	r3, r7, #16
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f7ff fcd1 	bl	800857e <get_ldnumber>
 8008bdc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	da01      	bge.n	8008be8 <f_mount+0x28>
 8008be4:	230b      	movs	r3, #11
 8008be6:	e02b      	b.n	8008c40 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008be8:	4a17      	ldr	r2, [pc, #92]	@ (8008c48 <f_mount+0x88>)
 8008bea:	69fb      	ldr	r3, [r7, #28]
 8008bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bf0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008bf2:	69bb      	ldr	r3, [r7, #24]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d005      	beq.n	8008c04 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008bf8:	69b8      	ldr	r0, [r7, #24]
 8008bfa:	f7ff fc2b 	bl	8008454 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008bfe:	69bb      	ldr	r3, [r7, #24]
 8008c00:	2200      	movs	r2, #0
 8008c02:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d002      	beq.n	8008c10 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008c10:	68fa      	ldr	r2, [r7, #12]
 8008c12:	490d      	ldr	r1, [pc, #52]	@ (8008c48 <f_mount+0x88>)
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d002      	beq.n	8008c26 <f_mount+0x66>
 8008c20:	79fb      	ldrb	r3, [r7, #7]
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d001      	beq.n	8008c2a <f_mount+0x6a>
 8008c26:	2300      	movs	r3, #0
 8008c28:	e00a      	b.n	8008c40 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008c2a:	f107 010c 	add.w	r1, r7, #12
 8008c2e:	f107 0308 	add.w	r3, r7, #8
 8008c32:	2200      	movs	r2, #0
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7ff fd3d 	bl	80086b4 <find_volume>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3720      	adds	r7, #32
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}
 8008c48:	20014194 	.word	0x20014194

08008c4c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b087      	sub	sp, #28
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	60b9      	str	r1, [r7, #8]
 8008c56:	4613      	mov	r3, r2
 8008c58:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008c62:	4b1f      	ldr	r3, [pc, #124]	@ (8008ce0 <FATFS_LinkDriverEx+0x94>)
 8008c64:	7a5b      	ldrb	r3, [r3, #9]
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d131      	bne.n	8008cd0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008c6c:	4b1c      	ldr	r3, [pc, #112]	@ (8008ce0 <FATFS_LinkDriverEx+0x94>)
 8008c6e:	7a5b      	ldrb	r3, [r3, #9]
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	461a      	mov	r2, r3
 8008c74:	4b1a      	ldr	r3, [pc, #104]	@ (8008ce0 <FATFS_LinkDriverEx+0x94>)
 8008c76:	2100      	movs	r1, #0
 8008c78:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008c7a:	4b19      	ldr	r3, [pc, #100]	@ (8008ce0 <FATFS_LinkDriverEx+0x94>)
 8008c7c:	7a5b      	ldrb	r3, [r3, #9]
 8008c7e:	b2db      	uxtb	r3, r3
 8008c80:	4a17      	ldr	r2, [pc, #92]	@ (8008ce0 <FATFS_LinkDriverEx+0x94>)
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	4413      	add	r3, r2
 8008c86:	68fa      	ldr	r2, [r7, #12]
 8008c88:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008c8a:	4b15      	ldr	r3, [pc, #84]	@ (8008ce0 <FATFS_LinkDriverEx+0x94>)
 8008c8c:	7a5b      	ldrb	r3, [r3, #9]
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	461a      	mov	r2, r3
 8008c92:	4b13      	ldr	r3, [pc, #76]	@ (8008ce0 <FATFS_LinkDriverEx+0x94>)
 8008c94:	4413      	add	r3, r2
 8008c96:	79fa      	ldrb	r2, [r7, #7]
 8008c98:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008c9a:	4b11      	ldr	r3, [pc, #68]	@ (8008ce0 <FATFS_LinkDriverEx+0x94>)
 8008c9c:	7a5b      	ldrb	r3, [r3, #9]
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	1c5a      	adds	r2, r3, #1
 8008ca2:	b2d1      	uxtb	r1, r2
 8008ca4:	4a0e      	ldr	r2, [pc, #56]	@ (8008ce0 <FATFS_LinkDriverEx+0x94>)
 8008ca6:	7251      	strb	r1, [r2, #9]
 8008ca8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008caa:	7dbb      	ldrb	r3, [r7, #22]
 8008cac:	3330      	adds	r3, #48	@ 0x30
 8008cae:	b2da      	uxtb	r2, r3
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	223a      	movs	r2, #58	@ 0x3a
 8008cba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	3302      	adds	r3, #2
 8008cc0:	222f      	movs	r2, #47	@ 0x2f
 8008cc2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	3303      	adds	r3, #3
 8008cc8:	2200      	movs	r2, #0
 8008cca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008cd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	371c      	adds	r7, #28
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr
 8008cde:	bf00      	nop
 8008ce0:	200143bc 	.word	0x200143bc

08008ce4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b082      	sub	sp, #8
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008cee:	2200      	movs	r2, #0
 8008cf0:	6839      	ldr	r1, [r7, #0]
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f7ff ffaa 	bl	8008c4c <FATFS_LinkDriverEx>
 8008cf8:	4603      	mov	r3, r0
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3708      	adds	r7, #8
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
	...

08008d04 <siprintf>:
 8008d04:	b40e      	push	{r1, r2, r3}
 8008d06:	b500      	push	{lr}
 8008d08:	b09c      	sub	sp, #112	@ 0x70
 8008d0a:	ab1d      	add	r3, sp, #116	@ 0x74
 8008d0c:	9002      	str	r0, [sp, #8]
 8008d0e:	9006      	str	r0, [sp, #24]
 8008d10:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008d14:	4809      	ldr	r0, [pc, #36]	@ (8008d3c <siprintf+0x38>)
 8008d16:	9107      	str	r1, [sp, #28]
 8008d18:	9104      	str	r1, [sp, #16]
 8008d1a:	4909      	ldr	r1, [pc, #36]	@ (8008d40 <siprintf+0x3c>)
 8008d1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d20:	9105      	str	r1, [sp, #20]
 8008d22:	6800      	ldr	r0, [r0, #0]
 8008d24:	9301      	str	r3, [sp, #4]
 8008d26:	a902      	add	r1, sp, #8
 8008d28:	f000 f994 	bl	8009054 <_svfiprintf_r>
 8008d2c:	9b02      	ldr	r3, [sp, #8]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	701a      	strb	r2, [r3, #0]
 8008d32:	b01c      	add	sp, #112	@ 0x70
 8008d34:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d38:	b003      	add	sp, #12
 8008d3a:	4770      	bx	lr
 8008d3c:	20012e9c 	.word	0x20012e9c
 8008d40:	ffff0208 	.word	0xffff0208

08008d44 <memset>:
 8008d44:	4402      	add	r2, r0
 8008d46:	4603      	mov	r3, r0
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d100      	bne.n	8008d4e <memset+0xa>
 8008d4c:	4770      	bx	lr
 8008d4e:	f803 1b01 	strb.w	r1, [r3], #1
 8008d52:	e7f9      	b.n	8008d48 <memset+0x4>

08008d54 <__errno>:
 8008d54:	4b01      	ldr	r3, [pc, #4]	@ (8008d5c <__errno+0x8>)
 8008d56:	6818      	ldr	r0, [r3, #0]
 8008d58:	4770      	bx	lr
 8008d5a:	bf00      	nop
 8008d5c:	20012e9c 	.word	0x20012e9c

08008d60 <__libc_init_array>:
 8008d60:	b570      	push	{r4, r5, r6, lr}
 8008d62:	4d0d      	ldr	r5, [pc, #52]	@ (8008d98 <__libc_init_array+0x38>)
 8008d64:	4c0d      	ldr	r4, [pc, #52]	@ (8008d9c <__libc_init_array+0x3c>)
 8008d66:	1b64      	subs	r4, r4, r5
 8008d68:	10a4      	asrs	r4, r4, #2
 8008d6a:	2600      	movs	r6, #0
 8008d6c:	42a6      	cmp	r6, r4
 8008d6e:	d109      	bne.n	8008d84 <__libc_init_array+0x24>
 8008d70:	4d0b      	ldr	r5, [pc, #44]	@ (8008da0 <__libc_init_array+0x40>)
 8008d72:	4c0c      	ldr	r4, [pc, #48]	@ (8008da4 <__libc_init_array+0x44>)
 8008d74:	f000 fc66 	bl	8009644 <_init>
 8008d78:	1b64      	subs	r4, r4, r5
 8008d7a:	10a4      	asrs	r4, r4, #2
 8008d7c:	2600      	movs	r6, #0
 8008d7e:	42a6      	cmp	r6, r4
 8008d80:	d105      	bne.n	8008d8e <__libc_init_array+0x2e>
 8008d82:	bd70      	pop	{r4, r5, r6, pc}
 8008d84:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d88:	4798      	blx	r3
 8008d8a:	3601      	adds	r6, #1
 8008d8c:	e7ee      	b.n	8008d6c <__libc_init_array+0xc>
 8008d8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d92:	4798      	blx	r3
 8008d94:	3601      	adds	r6, #1
 8008d96:	e7f2      	b.n	8008d7e <__libc_init_array+0x1e>
 8008d98:	08021a4c 	.word	0x08021a4c
 8008d9c:	08021a4c 	.word	0x08021a4c
 8008da0:	08021a4c 	.word	0x08021a4c
 8008da4:	08021a50 	.word	0x08021a50

08008da8 <__retarget_lock_acquire_recursive>:
 8008da8:	4770      	bx	lr

08008daa <__retarget_lock_release_recursive>:
 8008daa:	4770      	bx	lr

08008dac <_free_r>:
 8008dac:	b538      	push	{r3, r4, r5, lr}
 8008dae:	4605      	mov	r5, r0
 8008db0:	2900      	cmp	r1, #0
 8008db2:	d041      	beq.n	8008e38 <_free_r+0x8c>
 8008db4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008db8:	1f0c      	subs	r4, r1, #4
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	bfb8      	it	lt
 8008dbe:	18e4      	addlt	r4, r4, r3
 8008dc0:	f000 f8e0 	bl	8008f84 <__malloc_lock>
 8008dc4:	4a1d      	ldr	r2, [pc, #116]	@ (8008e3c <_free_r+0x90>)
 8008dc6:	6813      	ldr	r3, [r2, #0]
 8008dc8:	b933      	cbnz	r3, 8008dd8 <_free_r+0x2c>
 8008dca:	6063      	str	r3, [r4, #4]
 8008dcc:	6014      	str	r4, [r2, #0]
 8008dce:	4628      	mov	r0, r5
 8008dd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008dd4:	f000 b8dc 	b.w	8008f90 <__malloc_unlock>
 8008dd8:	42a3      	cmp	r3, r4
 8008dda:	d908      	bls.n	8008dee <_free_r+0x42>
 8008ddc:	6820      	ldr	r0, [r4, #0]
 8008dde:	1821      	adds	r1, r4, r0
 8008de0:	428b      	cmp	r3, r1
 8008de2:	bf01      	itttt	eq
 8008de4:	6819      	ldreq	r1, [r3, #0]
 8008de6:	685b      	ldreq	r3, [r3, #4]
 8008de8:	1809      	addeq	r1, r1, r0
 8008dea:	6021      	streq	r1, [r4, #0]
 8008dec:	e7ed      	b.n	8008dca <_free_r+0x1e>
 8008dee:	461a      	mov	r2, r3
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	b10b      	cbz	r3, 8008df8 <_free_r+0x4c>
 8008df4:	42a3      	cmp	r3, r4
 8008df6:	d9fa      	bls.n	8008dee <_free_r+0x42>
 8008df8:	6811      	ldr	r1, [r2, #0]
 8008dfa:	1850      	adds	r0, r2, r1
 8008dfc:	42a0      	cmp	r0, r4
 8008dfe:	d10b      	bne.n	8008e18 <_free_r+0x6c>
 8008e00:	6820      	ldr	r0, [r4, #0]
 8008e02:	4401      	add	r1, r0
 8008e04:	1850      	adds	r0, r2, r1
 8008e06:	4283      	cmp	r3, r0
 8008e08:	6011      	str	r1, [r2, #0]
 8008e0a:	d1e0      	bne.n	8008dce <_free_r+0x22>
 8008e0c:	6818      	ldr	r0, [r3, #0]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	6053      	str	r3, [r2, #4]
 8008e12:	4408      	add	r0, r1
 8008e14:	6010      	str	r0, [r2, #0]
 8008e16:	e7da      	b.n	8008dce <_free_r+0x22>
 8008e18:	d902      	bls.n	8008e20 <_free_r+0x74>
 8008e1a:	230c      	movs	r3, #12
 8008e1c:	602b      	str	r3, [r5, #0]
 8008e1e:	e7d6      	b.n	8008dce <_free_r+0x22>
 8008e20:	6820      	ldr	r0, [r4, #0]
 8008e22:	1821      	adds	r1, r4, r0
 8008e24:	428b      	cmp	r3, r1
 8008e26:	bf04      	itt	eq
 8008e28:	6819      	ldreq	r1, [r3, #0]
 8008e2a:	685b      	ldreq	r3, [r3, #4]
 8008e2c:	6063      	str	r3, [r4, #4]
 8008e2e:	bf04      	itt	eq
 8008e30:	1809      	addeq	r1, r1, r0
 8008e32:	6021      	streq	r1, [r4, #0]
 8008e34:	6054      	str	r4, [r2, #4]
 8008e36:	e7ca      	b.n	8008dce <_free_r+0x22>
 8008e38:	bd38      	pop	{r3, r4, r5, pc}
 8008e3a:	bf00      	nop
 8008e3c:	2001450c 	.word	0x2001450c

08008e40 <sbrk_aligned>:
 8008e40:	b570      	push	{r4, r5, r6, lr}
 8008e42:	4e0f      	ldr	r6, [pc, #60]	@ (8008e80 <sbrk_aligned+0x40>)
 8008e44:	460c      	mov	r4, r1
 8008e46:	6831      	ldr	r1, [r6, #0]
 8008e48:	4605      	mov	r5, r0
 8008e4a:	b911      	cbnz	r1, 8008e52 <sbrk_aligned+0x12>
 8008e4c:	f000 fba6 	bl	800959c <_sbrk_r>
 8008e50:	6030      	str	r0, [r6, #0]
 8008e52:	4621      	mov	r1, r4
 8008e54:	4628      	mov	r0, r5
 8008e56:	f000 fba1 	bl	800959c <_sbrk_r>
 8008e5a:	1c43      	adds	r3, r0, #1
 8008e5c:	d103      	bne.n	8008e66 <sbrk_aligned+0x26>
 8008e5e:	f04f 34ff 	mov.w	r4, #4294967295
 8008e62:	4620      	mov	r0, r4
 8008e64:	bd70      	pop	{r4, r5, r6, pc}
 8008e66:	1cc4      	adds	r4, r0, #3
 8008e68:	f024 0403 	bic.w	r4, r4, #3
 8008e6c:	42a0      	cmp	r0, r4
 8008e6e:	d0f8      	beq.n	8008e62 <sbrk_aligned+0x22>
 8008e70:	1a21      	subs	r1, r4, r0
 8008e72:	4628      	mov	r0, r5
 8008e74:	f000 fb92 	bl	800959c <_sbrk_r>
 8008e78:	3001      	adds	r0, #1
 8008e7a:	d1f2      	bne.n	8008e62 <sbrk_aligned+0x22>
 8008e7c:	e7ef      	b.n	8008e5e <sbrk_aligned+0x1e>
 8008e7e:	bf00      	nop
 8008e80:	20014508 	.word	0x20014508

08008e84 <_malloc_r>:
 8008e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e88:	1ccd      	adds	r5, r1, #3
 8008e8a:	f025 0503 	bic.w	r5, r5, #3
 8008e8e:	3508      	adds	r5, #8
 8008e90:	2d0c      	cmp	r5, #12
 8008e92:	bf38      	it	cc
 8008e94:	250c      	movcc	r5, #12
 8008e96:	2d00      	cmp	r5, #0
 8008e98:	4606      	mov	r6, r0
 8008e9a:	db01      	blt.n	8008ea0 <_malloc_r+0x1c>
 8008e9c:	42a9      	cmp	r1, r5
 8008e9e:	d904      	bls.n	8008eaa <_malloc_r+0x26>
 8008ea0:	230c      	movs	r3, #12
 8008ea2:	6033      	str	r3, [r6, #0]
 8008ea4:	2000      	movs	r0, #0
 8008ea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008eaa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008f80 <_malloc_r+0xfc>
 8008eae:	f000 f869 	bl	8008f84 <__malloc_lock>
 8008eb2:	f8d8 3000 	ldr.w	r3, [r8]
 8008eb6:	461c      	mov	r4, r3
 8008eb8:	bb44      	cbnz	r4, 8008f0c <_malloc_r+0x88>
 8008eba:	4629      	mov	r1, r5
 8008ebc:	4630      	mov	r0, r6
 8008ebe:	f7ff ffbf 	bl	8008e40 <sbrk_aligned>
 8008ec2:	1c43      	adds	r3, r0, #1
 8008ec4:	4604      	mov	r4, r0
 8008ec6:	d158      	bne.n	8008f7a <_malloc_r+0xf6>
 8008ec8:	f8d8 4000 	ldr.w	r4, [r8]
 8008ecc:	4627      	mov	r7, r4
 8008ece:	2f00      	cmp	r7, #0
 8008ed0:	d143      	bne.n	8008f5a <_malloc_r+0xd6>
 8008ed2:	2c00      	cmp	r4, #0
 8008ed4:	d04b      	beq.n	8008f6e <_malloc_r+0xea>
 8008ed6:	6823      	ldr	r3, [r4, #0]
 8008ed8:	4639      	mov	r1, r7
 8008eda:	4630      	mov	r0, r6
 8008edc:	eb04 0903 	add.w	r9, r4, r3
 8008ee0:	f000 fb5c 	bl	800959c <_sbrk_r>
 8008ee4:	4581      	cmp	r9, r0
 8008ee6:	d142      	bne.n	8008f6e <_malloc_r+0xea>
 8008ee8:	6821      	ldr	r1, [r4, #0]
 8008eea:	1a6d      	subs	r5, r5, r1
 8008eec:	4629      	mov	r1, r5
 8008eee:	4630      	mov	r0, r6
 8008ef0:	f7ff ffa6 	bl	8008e40 <sbrk_aligned>
 8008ef4:	3001      	adds	r0, #1
 8008ef6:	d03a      	beq.n	8008f6e <_malloc_r+0xea>
 8008ef8:	6823      	ldr	r3, [r4, #0]
 8008efa:	442b      	add	r3, r5
 8008efc:	6023      	str	r3, [r4, #0]
 8008efe:	f8d8 3000 	ldr.w	r3, [r8]
 8008f02:	685a      	ldr	r2, [r3, #4]
 8008f04:	bb62      	cbnz	r2, 8008f60 <_malloc_r+0xdc>
 8008f06:	f8c8 7000 	str.w	r7, [r8]
 8008f0a:	e00f      	b.n	8008f2c <_malloc_r+0xa8>
 8008f0c:	6822      	ldr	r2, [r4, #0]
 8008f0e:	1b52      	subs	r2, r2, r5
 8008f10:	d420      	bmi.n	8008f54 <_malloc_r+0xd0>
 8008f12:	2a0b      	cmp	r2, #11
 8008f14:	d917      	bls.n	8008f46 <_malloc_r+0xc2>
 8008f16:	1961      	adds	r1, r4, r5
 8008f18:	42a3      	cmp	r3, r4
 8008f1a:	6025      	str	r5, [r4, #0]
 8008f1c:	bf18      	it	ne
 8008f1e:	6059      	strne	r1, [r3, #4]
 8008f20:	6863      	ldr	r3, [r4, #4]
 8008f22:	bf08      	it	eq
 8008f24:	f8c8 1000 	streq.w	r1, [r8]
 8008f28:	5162      	str	r2, [r4, r5]
 8008f2a:	604b      	str	r3, [r1, #4]
 8008f2c:	4630      	mov	r0, r6
 8008f2e:	f000 f82f 	bl	8008f90 <__malloc_unlock>
 8008f32:	f104 000b 	add.w	r0, r4, #11
 8008f36:	1d23      	adds	r3, r4, #4
 8008f38:	f020 0007 	bic.w	r0, r0, #7
 8008f3c:	1ac2      	subs	r2, r0, r3
 8008f3e:	bf1c      	itt	ne
 8008f40:	1a1b      	subne	r3, r3, r0
 8008f42:	50a3      	strne	r3, [r4, r2]
 8008f44:	e7af      	b.n	8008ea6 <_malloc_r+0x22>
 8008f46:	6862      	ldr	r2, [r4, #4]
 8008f48:	42a3      	cmp	r3, r4
 8008f4a:	bf0c      	ite	eq
 8008f4c:	f8c8 2000 	streq.w	r2, [r8]
 8008f50:	605a      	strne	r2, [r3, #4]
 8008f52:	e7eb      	b.n	8008f2c <_malloc_r+0xa8>
 8008f54:	4623      	mov	r3, r4
 8008f56:	6864      	ldr	r4, [r4, #4]
 8008f58:	e7ae      	b.n	8008eb8 <_malloc_r+0x34>
 8008f5a:	463c      	mov	r4, r7
 8008f5c:	687f      	ldr	r7, [r7, #4]
 8008f5e:	e7b6      	b.n	8008ece <_malloc_r+0x4a>
 8008f60:	461a      	mov	r2, r3
 8008f62:	685b      	ldr	r3, [r3, #4]
 8008f64:	42a3      	cmp	r3, r4
 8008f66:	d1fb      	bne.n	8008f60 <_malloc_r+0xdc>
 8008f68:	2300      	movs	r3, #0
 8008f6a:	6053      	str	r3, [r2, #4]
 8008f6c:	e7de      	b.n	8008f2c <_malloc_r+0xa8>
 8008f6e:	230c      	movs	r3, #12
 8008f70:	6033      	str	r3, [r6, #0]
 8008f72:	4630      	mov	r0, r6
 8008f74:	f000 f80c 	bl	8008f90 <__malloc_unlock>
 8008f78:	e794      	b.n	8008ea4 <_malloc_r+0x20>
 8008f7a:	6005      	str	r5, [r0, #0]
 8008f7c:	e7d6      	b.n	8008f2c <_malloc_r+0xa8>
 8008f7e:	bf00      	nop
 8008f80:	2001450c 	.word	0x2001450c

08008f84 <__malloc_lock>:
 8008f84:	4801      	ldr	r0, [pc, #4]	@ (8008f8c <__malloc_lock+0x8>)
 8008f86:	f7ff bf0f 	b.w	8008da8 <__retarget_lock_acquire_recursive>
 8008f8a:	bf00      	nop
 8008f8c:	20014504 	.word	0x20014504

08008f90 <__malloc_unlock>:
 8008f90:	4801      	ldr	r0, [pc, #4]	@ (8008f98 <__malloc_unlock+0x8>)
 8008f92:	f7ff bf0a 	b.w	8008daa <__retarget_lock_release_recursive>
 8008f96:	bf00      	nop
 8008f98:	20014504 	.word	0x20014504

08008f9c <__ssputs_r>:
 8008f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fa0:	688e      	ldr	r6, [r1, #8]
 8008fa2:	461f      	mov	r7, r3
 8008fa4:	42be      	cmp	r6, r7
 8008fa6:	680b      	ldr	r3, [r1, #0]
 8008fa8:	4682      	mov	sl, r0
 8008faa:	460c      	mov	r4, r1
 8008fac:	4690      	mov	r8, r2
 8008fae:	d82d      	bhi.n	800900c <__ssputs_r+0x70>
 8008fb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008fb4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008fb8:	d026      	beq.n	8009008 <__ssputs_r+0x6c>
 8008fba:	6965      	ldr	r5, [r4, #20]
 8008fbc:	6909      	ldr	r1, [r1, #16]
 8008fbe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008fc2:	eba3 0901 	sub.w	r9, r3, r1
 8008fc6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008fca:	1c7b      	adds	r3, r7, #1
 8008fcc:	444b      	add	r3, r9
 8008fce:	106d      	asrs	r5, r5, #1
 8008fd0:	429d      	cmp	r5, r3
 8008fd2:	bf38      	it	cc
 8008fd4:	461d      	movcc	r5, r3
 8008fd6:	0553      	lsls	r3, r2, #21
 8008fd8:	d527      	bpl.n	800902a <__ssputs_r+0x8e>
 8008fda:	4629      	mov	r1, r5
 8008fdc:	f7ff ff52 	bl	8008e84 <_malloc_r>
 8008fe0:	4606      	mov	r6, r0
 8008fe2:	b360      	cbz	r0, 800903e <__ssputs_r+0xa2>
 8008fe4:	6921      	ldr	r1, [r4, #16]
 8008fe6:	464a      	mov	r2, r9
 8008fe8:	f000 fae8 	bl	80095bc <memcpy>
 8008fec:	89a3      	ldrh	r3, [r4, #12]
 8008fee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008ff2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ff6:	81a3      	strh	r3, [r4, #12]
 8008ff8:	6126      	str	r6, [r4, #16]
 8008ffa:	6165      	str	r5, [r4, #20]
 8008ffc:	444e      	add	r6, r9
 8008ffe:	eba5 0509 	sub.w	r5, r5, r9
 8009002:	6026      	str	r6, [r4, #0]
 8009004:	60a5      	str	r5, [r4, #8]
 8009006:	463e      	mov	r6, r7
 8009008:	42be      	cmp	r6, r7
 800900a:	d900      	bls.n	800900e <__ssputs_r+0x72>
 800900c:	463e      	mov	r6, r7
 800900e:	6820      	ldr	r0, [r4, #0]
 8009010:	4632      	mov	r2, r6
 8009012:	4641      	mov	r1, r8
 8009014:	f000 faa8 	bl	8009568 <memmove>
 8009018:	68a3      	ldr	r3, [r4, #8]
 800901a:	1b9b      	subs	r3, r3, r6
 800901c:	60a3      	str	r3, [r4, #8]
 800901e:	6823      	ldr	r3, [r4, #0]
 8009020:	4433      	add	r3, r6
 8009022:	6023      	str	r3, [r4, #0]
 8009024:	2000      	movs	r0, #0
 8009026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800902a:	462a      	mov	r2, r5
 800902c:	f000 fad4 	bl	80095d8 <_realloc_r>
 8009030:	4606      	mov	r6, r0
 8009032:	2800      	cmp	r0, #0
 8009034:	d1e0      	bne.n	8008ff8 <__ssputs_r+0x5c>
 8009036:	6921      	ldr	r1, [r4, #16]
 8009038:	4650      	mov	r0, sl
 800903a:	f7ff feb7 	bl	8008dac <_free_r>
 800903e:	230c      	movs	r3, #12
 8009040:	f8ca 3000 	str.w	r3, [sl]
 8009044:	89a3      	ldrh	r3, [r4, #12]
 8009046:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800904a:	81a3      	strh	r3, [r4, #12]
 800904c:	f04f 30ff 	mov.w	r0, #4294967295
 8009050:	e7e9      	b.n	8009026 <__ssputs_r+0x8a>
	...

08009054 <_svfiprintf_r>:
 8009054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009058:	4698      	mov	r8, r3
 800905a:	898b      	ldrh	r3, [r1, #12]
 800905c:	061b      	lsls	r3, r3, #24
 800905e:	b09d      	sub	sp, #116	@ 0x74
 8009060:	4607      	mov	r7, r0
 8009062:	460d      	mov	r5, r1
 8009064:	4614      	mov	r4, r2
 8009066:	d510      	bpl.n	800908a <_svfiprintf_r+0x36>
 8009068:	690b      	ldr	r3, [r1, #16]
 800906a:	b973      	cbnz	r3, 800908a <_svfiprintf_r+0x36>
 800906c:	2140      	movs	r1, #64	@ 0x40
 800906e:	f7ff ff09 	bl	8008e84 <_malloc_r>
 8009072:	6028      	str	r0, [r5, #0]
 8009074:	6128      	str	r0, [r5, #16]
 8009076:	b930      	cbnz	r0, 8009086 <_svfiprintf_r+0x32>
 8009078:	230c      	movs	r3, #12
 800907a:	603b      	str	r3, [r7, #0]
 800907c:	f04f 30ff 	mov.w	r0, #4294967295
 8009080:	b01d      	add	sp, #116	@ 0x74
 8009082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009086:	2340      	movs	r3, #64	@ 0x40
 8009088:	616b      	str	r3, [r5, #20]
 800908a:	2300      	movs	r3, #0
 800908c:	9309      	str	r3, [sp, #36]	@ 0x24
 800908e:	2320      	movs	r3, #32
 8009090:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009094:	f8cd 800c 	str.w	r8, [sp, #12]
 8009098:	2330      	movs	r3, #48	@ 0x30
 800909a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009238 <_svfiprintf_r+0x1e4>
 800909e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80090a2:	f04f 0901 	mov.w	r9, #1
 80090a6:	4623      	mov	r3, r4
 80090a8:	469a      	mov	sl, r3
 80090aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090ae:	b10a      	cbz	r2, 80090b4 <_svfiprintf_r+0x60>
 80090b0:	2a25      	cmp	r2, #37	@ 0x25
 80090b2:	d1f9      	bne.n	80090a8 <_svfiprintf_r+0x54>
 80090b4:	ebba 0b04 	subs.w	fp, sl, r4
 80090b8:	d00b      	beq.n	80090d2 <_svfiprintf_r+0x7e>
 80090ba:	465b      	mov	r3, fp
 80090bc:	4622      	mov	r2, r4
 80090be:	4629      	mov	r1, r5
 80090c0:	4638      	mov	r0, r7
 80090c2:	f7ff ff6b 	bl	8008f9c <__ssputs_r>
 80090c6:	3001      	adds	r0, #1
 80090c8:	f000 80a7 	beq.w	800921a <_svfiprintf_r+0x1c6>
 80090cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090ce:	445a      	add	r2, fp
 80090d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80090d2:	f89a 3000 	ldrb.w	r3, [sl]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	f000 809f 	beq.w	800921a <_svfiprintf_r+0x1c6>
 80090dc:	2300      	movs	r3, #0
 80090de:	f04f 32ff 	mov.w	r2, #4294967295
 80090e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090e6:	f10a 0a01 	add.w	sl, sl, #1
 80090ea:	9304      	str	r3, [sp, #16]
 80090ec:	9307      	str	r3, [sp, #28]
 80090ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80090f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80090f4:	4654      	mov	r4, sl
 80090f6:	2205      	movs	r2, #5
 80090f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090fc:	484e      	ldr	r0, [pc, #312]	@ (8009238 <_svfiprintf_r+0x1e4>)
 80090fe:	f7f7 f88f 	bl	8000220 <memchr>
 8009102:	9a04      	ldr	r2, [sp, #16]
 8009104:	b9d8      	cbnz	r0, 800913e <_svfiprintf_r+0xea>
 8009106:	06d0      	lsls	r0, r2, #27
 8009108:	bf44      	itt	mi
 800910a:	2320      	movmi	r3, #32
 800910c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009110:	0711      	lsls	r1, r2, #28
 8009112:	bf44      	itt	mi
 8009114:	232b      	movmi	r3, #43	@ 0x2b
 8009116:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800911a:	f89a 3000 	ldrb.w	r3, [sl]
 800911e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009120:	d015      	beq.n	800914e <_svfiprintf_r+0xfa>
 8009122:	9a07      	ldr	r2, [sp, #28]
 8009124:	4654      	mov	r4, sl
 8009126:	2000      	movs	r0, #0
 8009128:	f04f 0c0a 	mov.w	ip, #10
 800912c:	4621      	mov	r1, r4
 800912e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009132:	3b30      	subs	r3, #48	@ 0x30
 8009134:	2b09      	cmp	r3, #9
 8009136:	d94b      	bls.n	80091d0 <_svfiprintf_r+0x17c>
 8009138:	b1b0      	cbz	r0, 8009168 <_svfiprintf_r+0x114>
 800913a:	9207      	str	r2, [sp, #28]
 800913c:	e014      	b.n	8009168 <_svfiprintf_r+0x114>
 800913e:	eba0 0308 	sub.w	r3, r0, r8
 8009142:	fa09 f303 	lsl.w	r3, r9, r3
 8009146:	4313      	orrs	r3, r2
 8009148:	9304      	str	r3, [sp, #16]
 800914a:	46a2      	mov	sl, r4
 800914c:	e7d2      	b.n	80090f4 <_svfiprintf_r+0xa0>
 800914e:	9b03      	ldr	r3, [sp, #12]
 8009150:	1d19      	adds	r1, r3, #4
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	9103      	str	r1, [sp, #12]
 8009156:	2b00      	cmp	r3, #0
 8009158:	bfbb      	ittet	lt
 800915a:	425b      	neglt	r3, r3
 800915c:	f042 0202 	orrlt.w	r2, r2, #2
 8009160:	9307      	strge	r3, [sp, #28]
 8009162:	9307      	strlt	r3, [sp, #28]
 8009164:	bfb8      	it	lt
 8009166:	9204      	strlt	r2, [sp, #16]
 8009168:	7823      	ldrb	r3, [r4, #0]
 800916a:	2b2e      	cmp	r3, #46	@ 0x2e
 800916c:	d10a      	bne.n	8009184 <_svfiprintf_r+0x130>
 800916e:	7863      	ldrb	r3, [r4, #1]
 8009170:	2b2a      	cmp	r3, #42	@ 0x2a
 8009172:	d132      	bne.n	80091da <_svfiprintf_r+0x186>
 8009174:	9b03      	ldr	r3, [sp, #12]
 8009176:	1d1a      	adds	r2, r3, #4
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	9203      	str	r2, [sp, #12]
 800917c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009180:	3402      	adds	r4, #2
 8009182:	9305      	str	r3, [sp, #20]
 8009184:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009248 <_svfiprintf_r+0x1f4>
 8009188:	7821      	ldrb	r1, [r4, #0]
 800918a:	2203      	movs	r2, #3
 800918c:	4650      	mov	r0, sl
 800918e:	f7f7 f847 	bl	8000220 <memchr>
 8009192:	b138      	cbz	r0, 80091a4 <_svfiprintf_r+0x150>
 8009194:	9b04      	ldr	r3, [sp, #16]
 8009196:	eba0 000a 	sub.w	r0, r0, sl
 800919a:	2240      	movs	r2, #64	@ 0x40
 800919c:	4082      	lsls	r2, r0
 800919e:	4313      	orrs	r3, r2
 80091a0:	3401      	adds	r4, #1
 80091a2:	9304      	str	r3, [sp, #16]
 80091a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091a8:	4824      	ldr	r0, [pc, #144]	@ (800923c <_svfiprintf_r+0x1e8>)
 80091aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80091ae:	2206      	movs	r2, #6
 80091b0:	f7f7 f836 	bl	8000220 <memchr>
 80091b4:	2800      	cmp	r0, #0
 80091b6:	d036      	beq.n	8009226 <_svfiprintf_r+0x1d2>
 80091b8:	4b21      	ldr	r3, [pc, #132]	@ (8009240 <_svfiprintf_r+0x1ec>)
 80091ba:	bb1b      	cbnz	r3, 8009204 <_svfiprintf_r+0x1b0>
 80091bc:	9b03      	ldr	r3, [sp, #12]
 80091be:	3307      	adds	r3, #7
 80091c0:	f023 0307 	bic.w	r3, r3, #7
 80091c4:	3308      	adds	r3, #8
 80091c6:	9303      	str	r3, [sp, #12]
 80091c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091ca:	4433      	add	r3, r6
 80091cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80091ce:	e76a      	b.n	80090a6 <_svfiprintf_r+0x52>
 80091d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80091d4:	460c      	mov	r4, r1
 80091d6:	2001      	movs	r0, #1
 80091d8:	e7a8      	b.n	800912c <_svfiprintf_r+0xd8>
 80091da:	2300      	movs	r3, #0
 80091dc:	3401      	adds	r4, #1
 80091de:	9305      	str	r3, [sp, #20]
 80091e0:	4619      	mov	r1, r3
 80091e2:	f04f 0c0a 	mov.w	ip, #10
 80091e6:	4620      	mov	r0, r4
 80091e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091ec:	3a30      	subs	r2, #48	@ 0x30
 80091ee:	2a09      	cmp	r2, #9
 80091f0:	d903      	bls.n	80091fa <_svfiprintf_r+0x1a6>
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d0c6      	beq.n	8009184 <_svfiprintf_r+0x130>
 80091f6:	9105      	str	r1, [sp, #20]
 80091f8:	e7c4      	b.n	8009184 <_svfiprintf_r+0x130>
 80091fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80091fe:	4604      	mov	r4, r0
 8009200:	2301      	movs	r3, #1
 8009202:	e7f0      	b.n	80091e6 <_svfiprintf_r+0x192>
 8009204:	ab03      	add	r3, sp, #12
 8009206:	9300      	str	r3, [sp, #0]
 8009208:	462a      	mov	r2, r5
 800920a:	4b0e      	ldr	r3, [pc, #56]	@ (8009244 <_svfiprintf_r+0x1f0>)
 800920c:	a904      	add	r1, sp, #16
 800920e:	4638      	mov	r0, r7
 8009210:	f3af 8000 	nop.w
 8009214:	1c42      	adds	r2, r0, #1
 8009216:	4606      	mov	r6, r0
 8009218:	d1d6      	bne.n	80091c8 <_svfiprintf_r+0x174>
 800921a:	89ab      	ldrh	r3, [r5, #12]
 800921c:	065b      	lsls	r3, r3, #25
 800921e:	f53f af2d 	bmi.w	800907c <_svfiprintf_r+0x28>
 8009222:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009224:	e72c      	b.n	8009080 <_svfiprintf_r+0x2c>
 8009226:	ab03      	add	r3, sp, #12
 8009228:	9300      	str	r3, [sp, #0]
 800922a:	462a      	mov	r2, r5
 800922c:	4b05      	ldr	r3, [pc, #20]	@ (8009244 <_svfiprintf_r+0x1f0>)
 800922e:	a904      	add	r1, sp, #16
 8009230:	4638      	mov	r0, r7
 8009232:	f000 f879 	bl	8009328 <_printf_i>
 8009236:	e7ed      	b.n	8009214 <_svfiprintf_r+0x1c0>
 8009238:	08021a10 	.word	0x08021a10
 800923c:	08021a1a 	.word	0x08021a1a
 8009240:	00000000 	.word	0x00000000
 8009244:	08008f9d 	.word	0x08008f9d
 8009248:	08021a16 	.word	0x08021a16

0800924c <_printf_common>:
 800924c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009250:	4616      	mov	r6, r2
 8009252:	4698      	mov	r8, r3
 8009254:	688a      	ldr	r2, [r1, #8]
 8009256:	690b      	ldr	r3, [r1, #16]
 8009258:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800925c:	4293      	cmp	r3, r2
 800925e:	bfb8      	it	lt
 8009260:	4613      	movlt	r3, r2
 8009262:	6033      	str	r3, [r6, #0]
 8009264:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009268:	4607      	mov	r7, r0
 800926a:	460c      	mov	r4, r1
 800926c:	b10a      	cbz	r2, 8009272 <_printf_common+0x26>
 800926e:	3301      	adds	r3, #1
 8009270:	6033      	str	r3, [r6, #0]
 8009272:	6823      	ldr	r3, [r4, #0]
 8009274:	0699      	lsls	r1, r3, #26
 8009276:	bf42      	ittt	mi
 8009278:	6833      	ldrmi	r3, [r6, #0]
 800927a:	3302      	addmi	r3, #2
 800927c:	6033      	strmi	r3, [r6, #0]
 800927e:	6825      	ldr	r5, [r4, #0]
 8009280:	f015 0506 	ands.w	r5, r5, #6
 8009284:	d106      	bne.n	8009294 <_printf_common+0x48>
 8009286:	f104 0a19 	add.w	sl, r4, #25
 800928a:	68e3      	ldr	r3, [r4, #12]
 800928c:	6832      	ldr	r2, [r6, #0]
 800928e:	1a9b      	subs	r3, r3, r2
 8009290:	42ab      	cmp	r3, r5
 8009292:	dc26      	bgt.n	80092e2 <_printf_common+0x96>
 8009294:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009298:	6822      	ldr	r2, [r4, #0]
 800929a:	3b00      	subs	r3, #0
 800929c:	bf18      	it	ne
 800929e:	2301      	movne	r3, #1
 80092a0:	0692      	lsls	r2, r2, #26
 80092a2:	d42b      	bmi.n	80092fc <_printf_common+0xb0>
 80092a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80092a8:	4641      	mov	r1, r8
 80092aa:	4638      	mov	r0, r7
 80092ac:	47c8      	blx	r9
 80092ae:	3001      	adds	r0, #1
 80092b0:	d01e      	beq.n	80092f0 <_printf_common+0xa4>
 80092b2:	6823      	ldr	r3, [r4, #0]
 80092b4:	6922      	ldr	r2, [r4, #16]
 80092b6:	f003 0306 	and.w	r3, r3, #6
 80092ba:	2b04      	cmp	r3, #4
 80092bc:	bf02      	ittt	eq
 80092be:	68e5      	ldreq	r5, [r4, #12]
 80092c0:	6833      	ldreq	r3, [r6, #0]
 80092c2:	1aed      	subeq	r5, r5, r3
 80092c4:	68a3      	ldr	r3, [r4, #8]
 80092c6:	bf0c      	ite	eq
 80092c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80092cc:	2500      	movne	r5, #0
 80092ce:	4293      	cmp	r3, r2
 80092d0:	bfc4      	itt	gt
 80092d2:	1a9b      	subgt	r3, r3, r2
 80092d4:	18ed      	addgt	r5, r5, r3
 80092d6:	2600      	movs	r6, #0
 80092d8:	341a      	adds	r4, #26
 80092da:	42b5      	cmp	r5, r6
 80092dc:	d11a      	bne.n	8009314 <_printf_common+0xc8>
 80092de:	2000      	movs	r0, #0
 80092e0:	e008      	b.n	80092f4 <_printf_common+0xa8>
 80092e2:	2301      	movs	r3, #1
 80092e4:	4652      	mov	r2, sl
 80092e6:	4641      	mov	r1, r8
 80092e8:	4638      	mov	r0, r7
 80092ea:	47c8      	blx	r9
 80092ec:	3001      	adds	r0, #1
 80092ee:	d103      	bne.n	80092f8 <_printf_common+0xac>
 80092f0:	f04f 30ff 	mov.w	r0, #4294967295
 80092f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092f8:	3501      	adds	r5, #1
 80092fa:	e7c6      	b.n	800928a <_printf_common+0x3e>
 80092fc:	18e1      	adds	r1, r4, r3
 80092fe:	1c5a      	adds	r2, r3, #1
 8009300:	2030      	movs	r0, #48	@ 0x30
 8009302:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009306:	4422      	add	r2, r4
 8009308:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800930c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009310:	3302      	adds	r3, #2
 8009312:	e7c7      	b.n	80092a4 <_printf_common+0x58>
 8009314:	2301      	movs	r3, #1
 8009316:	4622      	mov	r2, r4
 8009318:	4641      	mov	r1, r8
 800931a:	4638      	mov	r0, r7
 800931c:	47c8      	blx	r9
 800931e:	3001      	adds	r0, #1
 8009320:	d0e6      	beq.n	80092f0 <_printf_common+0xa4>
 8009322:	3601      	adds	r6, #1
 8009324:	e7d9      	b.n	80092da <_printf_common+0x8e>
	...

08009328 <_printf_i>:
 8009328:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800932c:	7e0f      	ldrb	r7, [r1, #24]
 800932e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009330:	2f78      	cmp	r7, #120	@ 0x78
 8009332:	4691      	mov	r9, r2
 8009334:	4680      	mov	r8, r0
 8009336:	460c      	mov	r4, r1
 8009338:	469a      	mov	sl, r3
 800933a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800933e:	d807      	bhi.n	8009350 <_printf_i+0x28>
 8009340:	2f62      	cmp	r7, #98	@ 0x62
 8009342:	d80a      	bhi.n	800935a <_printf_i+0x32>
 8009344:	2f00      	cmp	r7, #0
 8009346:	f000 80d2 	beq.w	80094ee <_printf_i+0x1c6>
 800934a:	2f58      	cmp	r7, #88	@ 0x58
 800934c:	f000 80b9 	beq.w	80094c2 <_printf_i+0x19a>
 8009350:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009354:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009358:	e03a      	b.n	80093d0 <_printf_i+0xa8>
 800935a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800935e:	2b15      	cmp	r3, #21
 8009360:	d8f6      	bhi.n	8009350 <_printf_i+0x28>
 8009362:	a101      	add	r1, pc, #4	@ (adr r1, 8009368 <_printf_i+0x40>)
 8009364:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009368:	080093c1 	.word	0x080093c1
 800936c:	080093d5 	.word	0x080093d5
 8009370:	08009351 	.word	0x08009351
 8009374:	08009351 	.word	0x08009351
 8009378:	08009351 	.word	0x08009351
 800937c:	08009351 	.word	0x08009351
 8009380:	080093d5 	.word	0x080093d5
 8009384:	08009351 	.word	0x08009351
 8009388:	08009351 	.word	0x08009351
 800938c:	08009351 	.word	0x08009351
 8009390:	08009351 	.word	0x08009351
 8009394:	080094d5 	.word	0x080094d5
 8009398:	080093ff 	.word	0x080093ff
 800939c:	0800948f 	.word	0x0800948f
 80093a0:	08009351 	.word	0x08009351
 80093a4:	08009351 	.word	0x08009351
 80093a8:	080094f7 	.word	0x080094f7
 80093ac:	08009351 	.word	0x08009351
 80093b0:	080093ff 	.word	0x080093ff
 80093b4:	08009351 	.word	0x08009351
 80093b8:	08009351 	.word	0x08009351
 80093bc:	08009497 	.word	0x08009497
 80093c0:	6833      	ldr	r3, [r6, #0]
 80093c2:	1d1a      	adds	r2, r3, #4
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	6032      	str	r2, [r6, #0]
 80093c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80093cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80093d0:	2301      	movs	r3, #1
 80093d2:	e09d      	b.n	8009510 <_printf_i+0x1e8>
 80093d4:	6833      	ldr	r3, [r6, #0]
 80093d6:	6820      	ldr	r0, [r4, #0]
 80093d8:	1d19      	adds	r1, r3, #4
 80093da:	6031      	str	r1, [r6, #0]
 80093dc:	0606      	lsls	r6, r0, #24
 80093de:	d501      	bpl.n	80093e4 <_printf_i+0xbc>
 80093e0:	681d      	ldr	r5, [r3, #0]
 80093e2:	e003      	b.n	80093ec <_printf_i+0xc4>
 80093e4:	0645      	lsls	r5, r0, #25
 80093e6:	d5fb      	bpl.n	80093e0 <_printf_i+0xb8>
 80093e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80093ec:	2d00      	cmp	r5, #0
 80093ee:	da03      	bge.n	80093f8 <_printf_i+0xd0>
 80093f0:	232d      	movs	r3, #45	@ 0x2d
 80093f2:	426d      	negs	r5, r5
 80093f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80093f8:	4859      	ldr	r0, [pc, #356]	@ (8009560 <_printf_i+0x238>)
 80093fa:	230a      	movs	r3, #10
 80093fc:	e011      	b.n	8009422 <_printf_i+0xfa>
 80093fe:	6821      	ldr	r1, [r4, #0]
 8009400:	6833      	ldr	r3, [r6, #0]
 8009402:	0608      	lsls	r0, r1, #24
 8009404:	f853 5b04 	ldr.w	r5, [r3], #4
 8009408:	d402      	bmi.n	8009410 <_printf_i+0xe8>
 800940a:	0649      	lsls	r1, r1, #25
 800940c:	bf48      	it	mi
 800940e:	b2ad      	uxthmi	r5, r5
 8009410:	2f6f      	cmp	r7, #111	@ 0x6f
 8009412:	4853      	ldr	r0, [pc, #332]	@ (8009560 <_printf_i+0x238>)
 8009414:	6033      	str	r3, [r6, #0]
 8009416:	bf14      	ite	ne
 8009418:	230a      	movne	r3, #10
 800941a:	2308      	moveq	r3, #8
 800941c:	2100      	movs	r1, #0
 800941e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009422:	6866      	ldr	r6, [r4, #4]
 8009424:	60a6      	str	r6, [r4, #8]
 8009426:	2e00      	cmp	r6, #0
 8009428:	bfa2      	ittt	ge
 800942a:	6821      	ldrge	r1, [r4, #0]
 800942c:	f021 0104 	bicge.w	r1, r1, #4
 8009430:	6021      	strge	r1, [r4, #0]
 8009432:	b90d      	cbnz	r5, 8009438 <_printf_i+0x110>
 8009434:	2e00      	cmp	r6, #0
 8009436:	d04b      	beq.n	80094d0 <_printf_i+0x1a8>
 8009438:	4616      	mov	r6, r2
 800943a:	fbb5 f1f3 	udiv	r1, r5, r3
 800943e:	fb03 5711 	mls	r7, r3, r1, r5
 8009442:	5dc7      	ldrb	r7, [r0, r7]
 8009444:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009448:	462f      	mov	r7, r5
 800944a:	42bb      	cmp	r3, r7
 800944c:	460d      	mov	r5, r1
 800944e:	d9f4      	bls.n	800943a <_printf_i+0x112>
 8009450:	2b08      	cmp	r3, #8
 8009452:	d10b      	bne.n	800946c <_printf_i+0x144>
 8009454:	6823      	ldr	r3, [r4, #0]
 8009456:	07df      	lsls	r7, r3, #31
 8009458:	d508      	bpl.n	800946c <_printf_i+0x144>
 800945a:	6923      	ldr	r3, [r4, #16]
 800945c:	6861      	ldr	r1, [r4, #4]
 800945e:	4299      	cmp	r1, r3
 8009460:	bfde      	ittt	le
 8009462:	2330      	movle	r3, #48	@ 0x30
 8009464:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009468:	f106 36ff 	addle.w	r6, r6, #4294967295
 800946c:	1b92      	subs	r2, r2, r6
 800946e:	6122      	str	r2, [r4, #16]
 8009470:	f8cd a000 	str.w	sl, [sp]
 8009474:	464b      	mov	r3, r9
 8009476:	aa03      	add	r2, sp, #12
 8009478:	4621      	mov	r1, r4
 800947a:	4640      	mov	r0, r8
 800947c:	f7ff fee6 	bl	800924c <_printf_common>
 8009480:	3001      	adds	r0, #1
 8009482:	d14a      	bne.n	800951a <_printf_i+0x1f2>
 8009484:	f04f 30ff 	mov.w	r0, #4294967295
 8009488:	b004      	add	sp, #16
 800948a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800948e:	6823      	ldr	r3, [r4, #0]
 8009490:	f043 0320 	orr.w	r3, r3, #32
 8009494:	6023      	str	r3, [r4, #0]
 8009496:	4833      	ldr	r0, [pc, #204]	@ (8009564 <_printf_i+0x23c>)
 8009498:	2778      	movs	r7, #120	@ 0x78
 800949a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800949e:	6823      	ldr	r3, [r4, #0]
 80094a0:	6831      	ldr	r1, [r6, #0]
 80094a2:	061f      	lsls	r7, r3, #24
 80094a4:	f851 5b04 	ldr.w	r5, [r1], #4
 80094a8:	d402      	bmi.n	80094b0 <_printf_i+0x188>
 80094aa:	065f      	lsls	r7, r3, #25
 80094ac:	bf48      	it	mi
 80094ae:	b2ad      	uxthmi	r5, r5
 80094b0:	6031      	str	r1, [r6, #0]
 80094b2:	07d9      	lsls	r1, r3, #31
 80094b4:	bf44      	itt	mi
 80094b6:	f043 0320 	orrmi.w	r3, r3, #32
 80094ba:	6023      	strmi	r3, [r4, #0]
 80094bc:	b11d      	cbz	r5, 80094c6 <_printf_i+0x19e>
 80094be:	2310      	movs	r3, #16
 80094c0:	e7ac      	b.n	800941c <_printf_i+0xf4>
 80094c2:	4827      	ldr	r0, [pc, #156]	@ (8009560 <_printf_i+0x238>)
 80094c4:	e7e9      	b.n	800949a <_printf_i+0x172>
 80094c6:	6823      	ldr	r3, [r4, #0]
 80094c8:	f023 0320 	bic.w	r3, r3, #32
 80094cc:	6023      	str	r3, [r4, #0]
 80094ce:	e7f6      	b.n	80094be <_printf_i+0x196>
 80094d0:	4616      	mov	r6, r2
 80094d2:	e7bd      	b.n	8009450 <_printf_i+0x128>
 80094d4:	6833      	ldr	r3, [r6, #0]
 80094d6:	6825      	ldr	r5, [r4, #0]
 80094d8:	6961      	ldr	r1, [r4, #20]
 80094da:	1d18      	adds	r0, r3, #4
 80094dc:	6030      	str	r0, [r6, #0]
 80094de:	062e      	lsls	r6, r5, #24
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	d501      	bpl.n	80094e8 <_printf_i+0x1c0>
 80094e4:	6019      	str	r1, [r3, #0]
 80094e6:	e002      	b.n	80094ee <_printf_i+0x1c6>
 80094e8:	0668      	lsls	r0, r5, #25
 80094ea:	d5fb      	bpl.n	80094e4 <_printf_i+0x1bc>
 80094ec:	8019      	strh	r1, [r3, #0]
 80094ee:	2300      	movs	r3, #0
 80094f0:	6123      	str	r3, [r4, #16]
 80094f2:	4616      	mov	r6, r2
 80094f4:	e7bc      	b.n	8009470 <_printf_i+0x148>
 80094f6:	6833      	ldr	r3, [r6, #0]
 80094f8:	1d1a      	adds	r2, r3, #4
 80094fa:	6032      	str	r2, [r6, #0]
 80094fc:	681e      	ldr	r6, [r3, #0]
 80094fe:	6862      	ldr	r2, [r4, #4]
 8009500:	2100      	movs	r1, #0
 8009502:	4630      	mov	r0, r6
 8009504:	f7f6 fe8c 	bl	8000220 <memchr>
 8009508:	b108      	cbz	r0, 800950e <_printf_i+0x1e6>
 800950a:	1b80      	subs	r0, r0, r6
 800950c:	6060      	str	r0, [r4, #4]
 800950e:	6863      	ldr	r3, [r4, #4]
 8009510:	6123      	str	r3, [r4, #16]
 8009512:	2300      	movs	r3, #0
 8009514:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009518:	e7aa      	b.n	8009470 <_printf_i+0x148>
 800951a:	6923      	ldr	r3, [r4, #16]
 800951c:	4632      	mov	r2, r6
 800951e:	4649      	mov	r1, r9
 8009520:	4640      	mov	r0, r8
 8009522:	47d0      	blx	sl
 8009524:	3001      	adds	r0, #1
 8009526:	d0ad      	beq.n	8009484 <_printf_i+0x15c>
 8009528:	6823      	ldr	r3, [r4, #0]
 800952a:	079b      	lsls	r3, r3, #30
 800952c:	d413      	bmi.n	8009556 <_printf_i+0x22e>
 800952e:	68e0      	ldr	r0, [r4, #12]
 8009530:	9b03      	ldr	r3, [sp, #12]
 8009532:	4298      	cmp	r0, r3
 8009534:	bfb8      	it	lt
 8009536:	4618      	movlt	r0, r3
 8009538:	e7a6      	b.n	8009488 <_printf_i+0x160>
 800953a:	2301      	movs	r3, #1
 800953c:	4632      	mov	r2, r6
 800953e:	4649      	mov	r1, r9
 8009540:	4640      	mov	r0, r8
 8009542:	47d0      	blx	sl
 8009544:	3001      	adds	r0, #1
 8009546:	d09d      	beq.n	8009484 <_printf_i+0x15c>
 8009548:	3501      	adds	r5, #1
 800954a:	68e3      	ldr	r3, [r4, #12]
 800954c:	9903      	ldr	r1, [sp, #12]
 800954e:	1a5b      	subs	r3, r3, r1
 8009550:	42ab      	cmp	r3, r5
 8009552:	dcf2      	bgt.n	800953a <_printf_i+0x212>
 8009554:	e7eb      	b.n	800952e <_printf_i+0x206>
 8009556:	2500      	movs	r5, #0
 8009558:	f104 0619 	add.w	r6, r4, #25
 800955c:	e7f5      	b.n	800954a <_printf_i+0x222>
 800955e:	bf00      	nop
 8009560:	08021a21 	.word	0x08021a21
 8009564:	08021a32 	.word	0x08021a32

08009568 <memmove>:
 8009568:	4288      	cmp	r0, r1
 800956a:	b510      	push	{r4, lr}
 800956c:	eb01 0402 	add.w	r4, r1, r2
 8009570:	d902      	bls.n	8009578 <memmove+0x10>
 8009572:	4284      	cmp	r4, r0
 8009574:	4623      	mov	r3, r4
 8009576:	d807      	bhi.n	8009588 <memmove+0x20>
 8009578:	1e43      	subs	r3, r0, #1
 800957a:	42a1      	cmp	r1, r4
 800957c:	d008      	beq.n	8009590 <memmove+0x28>
 800957e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009582:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009586:	e7f8      	b.n	800957a <memmove+0x12>
 8009588:	4402      	add	r2, r0
 800958a:	4601      	mov	r1, r0
 800958c:	428a      	cmp	r2, r1
 800958e:	d100      	bne.n	8009592 <memmove+0x2a>
 8009590:	bd10      	pop	{r4, pc}
 8009592:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009596:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800959a:	e7f7      	b.n	800958c <memmove+0x24>

0800959c <_sbrk_r>:
 800959c:	b538      	push	{r3, r4, r5, lr}
 800959e:	4d06      	ldr	r5, [pc, #24]	@ (80095b8 <_sbrk_r+0x1c>)
 80095a0:	2300      	movs	r3, #0
 80095a2:	4604      	mov	r4, r0
 80095a4:	4608      	mov	r0, r1
 80095a6:	602b      	str	r3, [r5, #0]
 80095a8:	f7fc fb72 	bl	8005c90 <_sbrk>
 80095ac:	1c43      	adds	r3, r0, #1
 80095ae:	d102      	bne.n	80095b6 <_sbrk_r+0x1a>
 80095b0:	682b      	ldr	r3, [r5, #0]
 80095b2:	b103      	cbz	r3, 80095b6 <_sbrk_r+0x1a>
 80095b4:	6023      	str	r3, [r4, #0]
 80095b6:	bd38      	pop	{r3, r4, r5, pc}
 80095b8:	20014500 	.word	0x20014500

080095bc <memcpy>:
 80095bc:	440a      	add	r2, r1
 80095be:	4291      	cmp	r1, r2
 80095c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80095c4:	d100      	bne.n	80095c8 <memcpy+0xc>
 80095c6:	4770      	bx	lr
 80095c8:	b510      	push	{r4, lr}
 80095ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095d2:	4291      	cmp	r1, r2
 80095d4:	d1f9      	bne.n	80095ca <memcpy+0xe>
 80095d6:	bd10      	pop	{r4, pc}

080095d8 <_realloc_r>:
 80095d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095dc:	4680      	mov	r8, r0
 80095de:	4615      	mov	r5, r2
 80095e0:	460c      	mov	r4, r1
 80095e2:	b921      	cbnz	r1, 80095ee <_realloc_r+0x16>
 80095e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095e8:	4611      	mov	r1, r2
 80095ea:	f7ff bc4b 	b.w	8008e84 <_malloc_r>
 80095ee:	b92a      	cbnz	r2, 80095fc <_realloc_r+0x24>
 80095f0:	f7ff fbdc 	bl	8008dac <_free_r>
 80095f4:	2400      	movs	r4, #0
 80095f6:	4620      	mov	r0, r4
 80095f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095fc:	f000 f81a 	bl	8009634 <_malloc_usable_size_r>
 8009600:	4285      	cmp	r5, r0
 8009602:	4606      	mov	r6, r0
 8009604:	d802      	bhi.n	800960c <_realloc_r+0x34>
 8009606:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800960a:	d8f4      	bhi.n	80095f6 <_realloc_r+0x1e>
 800960c:	4629      	mov	r1, r5
 800960e:	4640      	mov	r0, r8
 8009610:	f7ff fc38 	bl	8008e84 <_malloc_r>
 8009614:	4607      	mov	r7, r0
 8009616:	2800      	cmp	r0, #0
 8009618:	d0ec      	beq.n	80095f4 <_realloc_r+0x1c>
 800961a:	42b5      	cmp	r5, r6
 800961c:	462a      	mov	r2, r5
 800961e:	4621      	mov	r1, r4
 8009620:	bf28      	it	cs
 8009622:	4632      	movcs	r2, r6
 8009624:	f7ff ffca 	bl	80095bc <memcpy>
 8009628:	4621      	mov	r1, r4
 800962a:	4640      	mov	r0, r8
 800962c:	f7ff fbbe 	bl	8008dac <_free_r>
 8009630:	463c      	mov	r4, r7
 8009632:	e7e0      	b.n	80095f6 <_realloc_r+0x1e>

08009634 <_malloc_usable_size_r>:
 8009634:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009638:	1f18      	subs	r0, r3, #4
 800963a:	2b00      	cmp	r3, #0
 800963c:	bfbc      	itt	lt
 800963e:	580b      	ldrlt	r3, [r1, r0]
 8009640:	18c0      	addlt	r0, r0, r3
 8009642:	4770      	bx	lr

08009644 <_init>:
 8009644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009646:	bf00      	nop
 8009648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800964a:	bc08      	pop	{r3}
 800964c:	469e      	mov	lr, r3
 800964e:	4770      	bx	lr

08009650 <_fini>:
 8009650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009652:	bf00      	nop
 8009654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009656:	bc08      	pop	{r3}
 8009658:	469e      	mov	lr, r3
 800965a:	4770      	bx	lr
